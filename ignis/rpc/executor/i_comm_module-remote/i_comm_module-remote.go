// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/executor"
)

var _ = rpc.GoUnusedProtection__
var _ = executor.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string openGroup()")
  fmt.Fprintln(os.Stderr, "  void closeGroup()")
  fmt.Fprintln(os.Stderr, "  void joinToGroup(string id, bool leader)")
  fmt.Fprintln(os.Stderr, "  void joinToGroupName(string id, bool leader, string name)")
  fmt.Fprintln(os.Stderr, "  bool hasGroup(string name)")
  fmt.Fprintln(os.Stderr, "  void destroyGroup(string name)")
  fmt.Fprintln(os.Stderr, "  void destroyGroups()")
  fmt.Fprintln(os.Stderr, "  i8 getProtocol()")
  fmt.Fprintln(os.Stderr, "   getPartitions(i8 protocol)")
  fmt.Fprintln(os.Stderr, "   getPartitions2(i8 protocol, i64 minPartitions)")
  fmt.Fprintln(os.Stderr, "  void setPartitions( partitions)")
  fmt.Fprintln(os.Stderr, "  void setPartitions2( partitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void newEmptyPartitions(i64 n)")
  fmt.Fprintln(os.Stderr, "  void newEmptyPartitions2(i64 n, ISource src)")
  fmt.Fprintln(os.Stderr, "  void driverGather(string group, ISource src)")
  fmt.Fprintln(os.Stderr, "  void driverGather0(string group, ISource src)")
  fmt.Fprintln(os.Stderr, "  void driverScatter(string group, i64 partitions)")
  fmt.Fprintln(os.Stderr, "  void driverScatter3(string group, i64 partitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  i32 enableMultithreading(string group)")
  fmt.Fprintln(os.Stderr, "  void send(string group, i64 partition, i64 dest, i32 thread)")
  fmt.Fprintln(os.Stderr, "  void recv(string group, i64 partition, i64 source, i32 thread)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := executor.NewICommModuleClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "openGroup":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "OpenGroup requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.OpenGroup(context.Background()))
    fmt.Print("\n")
    break
  case "closeGroup":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CloseGroup requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CloseGroup(context.Background()))
    fmt.Print("\n")
    break
  case "joinToGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "JoinToGroup requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.JoinToGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "joinToGroupName":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "JoinToGroupName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.JoinToGroupName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "hasGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.HasGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "destroyGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DestroyGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DestroyGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "destroyGroups":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "DestroyGroups requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.DestroyGroups(context.Background()))
    fmt.Print("\n")
    break
  case "getProtocol":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProtocol requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProtocol(context.Background()))
    fmt.Print("\n")
    break
  case "getPartitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 1 args")
      flag.Usage()
    }
    tmp0, err76 := (strconv.Atoi(flag.Arg(1)))
    if err76 != nil {
      Usage()
      return
    }
    argvalue0 := int8(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPartitions2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPartitions2 requires 2 args")
      flag.Usage()
    }
    tmp0, err77 := (strconv.Atoi(flag.Arg(1)))
    if err77 != nil {
      Usage()
      return
    }
    argvalue0 := int8(tmp0)
    value0 := argvalue0
    argvalue1, err78 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err78 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPartitions2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setPartitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetPartitions requires 1 args")
      flag.Usage()
    }
    arg79 := flag.Arg(1)
    mbTrans80 := thrift.NewTMemoryBufferLen(len(arg79))
    defer mbTrans80.Close()
    _, err81 := mbTrans80.WriteString(arg79)
    if err81 != nil { 
      Usage()
      return
    }
    factory82 := thrift.NewTJSONProtocolFactory()
    jsProt83 := factory82.GetProtocol(mbTrans80)
    containerStruct0 := executor.NewICommModuleSetPartitionsArgs()
    err84 := containerStruct0.ReadField1(context.Background(), jsProt83)
    if err84 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Partitions
    value0 := argvalue0
    fmt.Print(client.SetPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setPartitions2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPartitions2 requires 2 args")
      flag.Usage()
    }
    arg85 := flag.Arg(1)
    mbTrans86 := thrift.NewTMemoryBufferLen(len(arg85))
    defer mbTrans86.Close()
    _, err87 := mbTrans86.WriteString(arg85)
    if err87 != nil { 
      Usage()
      return
    }
    factory88 := thrift.NewTJSONProtocolFactory()
    jsProt89 := factory88.GetProtocol(mbTrans86)
    containerStruct0 := executor.NewICommModuleSetPartitions2Args()
    err90 := containerStruct0.ReadField1(context.Background(), jsProt89)
    if err90 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Partitions
    value0 := argvalue0
    arg91 := flag.Arg(2)
    mbTrans92 := thrift.NewTMemoryBufferLen(len(arg91))
    defer mbTrans92.Close()
    _, err93 := mbTrans92.WriteString(arg91)
    if err93 != nil {
      Usage()
      return
    }
    factory94 := thrift.NewTJSONProtocolFactory()
    jsProt95 := factory94.GetProtocol(mbTrans92)
    argvalue1 := rpc.NewISource()
    err96 := argvalue1.Read(context.Background(), jsProt95)
    if err96 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetPartitions2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "newEmptyPartitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NewEmptyPartitions_ requires 1 args")
      flag.Usage()
    }
    argvalue0, err97 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err97 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.NewEmptyPartitions_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "newEmptyPartitions2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NewEmptyPartitions2_ requires 2 args")
      flag.Usage()
    }
    argvalue0, err98 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err98 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg99 := flag.Arg(2)
    mbTrans100 := thrift.NewTMemoryBufferLen(len(arg99))
    defer mbTrans100.Close()
    _, err101 := mbTrans100.WriteString(arg99)
    if err101 != nil {
      Usage()
      return
    }
    factory102 := thrift.NewTJSONProtocolFactory()
    jsProt103 := factory102.GetProtocol(mbTrans100)
    argvalue1 := rpc.NewISource()
    err104 := argvalue1.Read(context.Background(), jsProt103)
    if err104 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.NewEmptyPartitions2_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "driverGather":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DriverGather requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg106 := flag.Arg(2)
    mbTrans107 := thrift.NewTMemoryBufferLen(len(arg106))
    defer mbTrans107.Close()
    _, err108 := mbTrans107.WriteString(arg106)
    if err108 != nil {
      Usage()
      return
    }
    factory109 := thrift.NewTJSONProtocolFactory()
    jsProt110 := factory109.GetProtocol(mbTrans107)
    argvalue1 := rpc.NewISource()
    err111 := argvalue1.Read(context.Background(), jsProt110)
    if err111 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DriverGather(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "driverGather0":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DriverGather0 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg113 := flag.Arg(2)
    mbTrans114 := thrift.NewTMemoryBufferLen(len(arg113))
    defer mbTrans114.Close()
    _, err115 := mbTrans114.WriteString(arg113)
    if err115 != nil {
      Usage()
      return
    }
    factory116 := thrift.NewTJSONProtocolFactory()
    jsProt117 := factory116.GetProtocol(mbTrans114)
    argvalue1 := rpc.NewISource()
    err118 := argvalue1.Read(context.Background(), jsProt117)
    if err118 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DriverGather0(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "driverScatter":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DriverScatter requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err120 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err120 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DriverScatter(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "driverScatter3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DriverScatter3 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err122 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err122 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg123 := flag.Arg(3)
    mbTrans124 := thrift.NewTMemoryBufferLen(len(arg123))
    defer mbTrans124.Close()
    _, err125 := mbTrans124.WriteString(arg123)
    if err125 != nil {
      Usage()
      return
    }
    factory126 := thrift.NewTJSONProtocolFactory()
    jsProt127 := factory126.GetProtocol(mbTrans124)
    argvalue2 := rpc.NewISource()
    err128 := argvalue2.Read(context.Background(), jsProt127)
    if err128 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DriverScatter3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "enableMultithreading":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EnableMultithreading requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.EnableMultithreading(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Send requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err131 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err131 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err132 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err132 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err133 := (strconv.Atoi(flag.Arg(4)))
    if err133 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.Send(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "recv":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Recv requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err135 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err135 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err136 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err136 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err137 := (strconv.Atoi(flag.Arg(4)))
    if err137 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.Recv(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
