// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package executor

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = rpc.GoUnusedProtection__
type IGeneralActionModule interface {
  // Parameters:
  //  - Src
  Execute(ctx context.Context, src *rpc.ISource) (_err error)
  // Parameters:
  //  - Src
  Reduce(ctx context.Context, src *rpc.ISource) (_err error)
  // Parameters:
  //  - Src
  TreeReduce(ctx context.Context, src *rpc.ISource) (_err error)
  Collect(ctx context.Context) (_err error)
  // Parameters:
  //  - Zero
  //  - SeqOp
  //  - CombOp
  Aggregate(ctx context.Context, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource) (_err error)
  // Parameters:
  //  - Zero
  //  - SeqOp
  //  - CombOp
  TreeAggregate(ctx context.Context, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource) (_err error)
  // Parameters:
  //  - Zero
  //  - Src
  Fold(ctx context.Context, zero *rpc.ISource, src *rpc.ISource) (_err error)
  // Parameters:
  //  - Zero
  //  - Src
  TreeFold(ctx context.Context, zero *rpc.ISource, src *rpc.ISource) (_err error)
  // Parameters:
  //  - Num
  Take(ctx context.Context, num int64) (_err error)
  // Parameters:
  //  - Src
  Foreach_(ctx context.Context, src *rpc.ISource) (_err error)
  // Parameters:
  //  - Src
  ForeachPartition(ctx context.Context, src *rpc.ISource) (_err error)
  // Parameters:
  //  - Src
  ForeachExecutor(ctx context.Context, src *rpc.ISource) (_err error)
  // Parameters:
  //  - Num
  Top(ctx context.Context, num int64) (_err error)
  // Parameters:
  //  - Num
  //  - Cmp
  Top2(ctx context.Context, num int64, cmp *rpc.ISource) (_err error)
  // Parameters:
  //  - Num
  TakeOrdered(ctx context.Context, num int64) (_err error)
  // Parameters:
  //  - Num
  //  - Cmp
  TakeOrdered2(ctx context.Context, num int64, cmp *rpc.ISource) (_err error)
  Keys(ctx context.Context) (_err error)
  Values(ctx context.Context) (_err error)
}

type IGeneralActionModuleClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewIGeneralActionModuleClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IGeneralActionModuleClient {
  return &IGeneralActionModuleClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIGeneralActionModuleClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IGeneralActionModuleClient {
  return &IGeneralActionModuleClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIGeneralActionModuleClient(c thrift.TClient) *IGeneralActionModuleClient {
  return &IGeneralActionModuleClient{
    c: c,
  }
}

func (p *IGeneralActionModuleClient) Client_() thrift.TClient {
  return p.c
}

func (p *IGeneralActionModuleClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *IGeneralActionModuleClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Src
func (p *IGeneralActionModuleClient) Execute(ctx context.Context, src *rpc.ISource) (_err error) {
  var _args0 IGeneralActionModuleExecuteArgs
  _args0.Src = src
  var _result2 IGeneralActionModuleExecuteResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "execute", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  switch {
  case _result2.Ex!= nil:
    return _result2.Ex
  }

  return nil
}

// Parameters:
//  - Src
func (p *IGeneralActionModuleClient) Reduce(ctx context.Context, src *rpc.ISource) (_err error) {
  var _args3 IGeneralActionModuleReduceArgs
  _args3.Src = src
  var _result5 IGeneralActionModuleReduceResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "reduce", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  switch {
  case _result5.Ex!= nil:
    return _result5.Ex
  }

  return nil
}

// Parameters:
//  - Src
func (p *IGeneralActionModuleClient) TreeReduce(ctx context.Context, src *rpc.ISource) (_err error) {
  var _args6 IGeneralActionModuleTreeReduceArgs
  _args6.Src = src
  var _result8 IGeneralActionModuleTreeReduceResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "treeReduce", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.Ex!= nil:
    return _result8.Ex
  }

  return nil
}

func (p *IGeneralActionModuleClient) Collect(ctx context.Context) (_err error) {
  var _args9 IGeneralActionModuleCollectArgs
  var _result11 IGeneralActionModuleCollectResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "collect", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  switch {
  case _result11.Ex!= nil:
    return _result11.Ex
  }

  return nil
}

// Parameters:
//  - Zero
//  - SeqOp
//  - CombOp
func (p *IGeneralActionModuleClient) Aggregate(ctx context.Context, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource) (_err error) {
  var _args12 IGeneralActionModuleAggregateArgs
  _args12.Zero = zero
  _args12.SeqOp = seqOp
  _args12.CombOp = combOp
  var _result14 IGeneralActionModuleAggregateResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "aggregate", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  switch {
  case _result14.Ex!= nil:
    return _result14.Ex
  }

  return nil
}

// Parameters:
//  - Zero
//  - SeqOp
//  - CombOp
func (p *IGeneralActionModuleClient) TreeAggregate(ctx context.Context, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource) (_err error) {
  var _args15 IGeneralActionModuleTreeAggregateArgs
  _args15.Zero = zero
  _args15.SeqOp = seqOp
  _args15.CombOp = combOp
  var _result17 IGeneralActionModuleTreeAggregateResult
  var _meta16 thrift.ResponseMeta
  _meta16, _err = p.Client_().Call(ctx, "treeAggregate", &_args15, &_result17)
  p.SetLastResponseMeta_(_meta16)
  if _err != nil {
    return
  }
  switch {
  case _result17.Ex!= nil:
    return _result17.Ex
  }

  return nil
}

// Parameters:
//  - Zero
//  - Src
func (p *IGeneralActionModuleClient) Fold(ctx context.Context, zero *rpc.ISource, src *rpc.ISource) (_err error) {
  var _args18 IGeneralActionModuleFoldArgs
  _args18.Zero = zero
  _args18.Src = src
  var _result20 IGeneralActionModuleFoldResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "fold", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  switch {
  case _result20.Ex!= nil:
    return _result20.Ex
  }

  return nil
}

// Parameters:
//  - Zero
//  - Src
func (p *IGeneralActionModuleClient) TreeFold(ctx context.Context, zero *rpc.ISource, src *rpc.ISource) (_err error) {
  var _args21 IGeneralActionModuleTreeFoldArgs
  _args21.Zero = zero
  _args21.Src = src
  var _result23 IGeneralActionModuleTreeFoldResult
  var _meta22 thrift.ResponseMeta
  _meta22, _err = p.Client_().Call(ctx, "treeFold", &_args21, &_result23)
  p.SetLastResponseMeta_(_meta22)
  if _err != nil {
    return
  }
  switch {
  case _result23.Ex!= nil:
    return _result23.Ex
  }

  return nil
}

// Parameters:
//  - Num
func (p *IGeneralActionModuleClient) Take(ctx context.Context, num int64) (_err error) {
  var _args24 IGeneralActionModuleTakeArgs
  _args24.Num = num
  var _result26 IGeneralActionModuleTakeResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "take", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  switch {
  case _result26.Ex!= nil:
    return _result26.Ex
  }

  return nil
}

// Parameters:
//  - Src
func (p *IGeneralActionModuleClient) Foreach_(ctx context.Context, src *rpc.ISource) (_err error) {
  var _args27 IGeneralActionModuleForeach_Args
  _args27.Src = src
  var _result29 IGeneralActionModuleForeach_Result
  var _meta28 thrift.ResponseMeta
  _meta28, _err = p.Client_().Call(ctx, "foreach_", &_args27, &_result29)
  p.SetLastResponseMeta_(_meta28)
  if _err != nil {
    return
  }
  switch {
  case _result29.Ex!= nil:
    return _result29.Ex
  }

  return nil
}

// Parameters:
//  - Src
func (p *IGeneralActionModuleClient) ForeachPartition(ctx context.Context, src *rpc.ISource) (_err error) {
  var _args30 IGeneralActionModuleForeachPartitionArgs
  _args30.Src = src
  var _result32 IGeneralActionModuleForeachPartitionResult
  var _meta31 thrift.ResponseMeta
  _meta31, _err = p.Client_().Call(ctx, "foreachPartition", &_args30, &_result32)
  p.SetLastResponseMeta_(_meta31)
  if _err != nil {
    return
  }
  switch {
  case _result32.Ex!= nil:
    return _result32.Ex
  }

  return nil
}

// Parameters:
//  - Src
func (p *IGeneralActionModuleClient) ForeachExecutor(ctx context.Context, src *rpc.ISource) (_err error) {
  var _args33 IGeneralActionModuleForeachExecutorArgs
  _args33.Src = src
  var _result35 IGeneralActionModuleForeachExecutorResult
  var _meta34 thrift.ResponseMeta
  _meta34, _err = p.Client_().Call(ctx, "foreachExecutor", &_args33, &_result35)
  p.SetLastResponseMeta_(_meta34)
  if _err != nil {
    return
  }
  switch {
  case _result35.Ex!= nil:
    return _result35.Ex
  }

  return nil
}

// Parameters:
//  - Num
func (p *IGeneralActionModuleClient) Top(ctx context.Context, num int64) (_err error) {
  var _args36 IGeneralActionModuleTopArgs
  _args36.Num = num
  var _result38 IGeneralActionModuleTopResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "top", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  switch {
  case _result38.Ex!= nil:
    return _result38.Ex
  }

  return nil
}

// Parameters:
//  - Num
//  - Cmp
func (p *IGeneralActionModuleClient) Top2(ctx context.Context, num int64, cmp *rpc.ISource) (_err error) {
  var _args39 IGeneralActionModuleTop2Args
  _args39.Num = num
  _args39.Cmp = cmp
  var _result41 IGeneralActionModuleTop2Result
  var _meta40 thrift.ResponseMeta
  _meta40, _err = p.Client_().Call(ctx, "top2", &_args39, &_result41)
  p.SetLastResponseMeta_(_meta40)
  if _err != nil {
    return
  }
  switch {
  case _result41.Ex!= nil:
    return _result41.Ex
  }

  return nil
}

// Parameters:
//  - Num
func (p *IGeneralActionModuleClient) TakeOrdered(ctx context.Context, num int64) (_err error) {
  var _args42 IGeneralActionModuleTakeOrderedArgs
  _args42.Num = num
  var _result44 IGeneralActionModuleTakeOrderedResult
  var _meta43 thrift.ResponseMeta
  _meta43, _err = p.Client_().Call(ctx, "takeOrdered", &_args42, &_result44)
  p.SetLastResponseMeta_(_meta43)
  if _err != nil {
    return
  }
  switch {
  case _result44.Ex!= nil:
    return _result44.Ex
  }

  return nil
}

// Parameters:
//  - Num
//  - Cmp
func (p *IGeneralActionModuleClient) TakeOrdered2(ctx context.Context, num int64, cmp *rpc.ISource) (_err error) {
  var _args45 IGeneralActionModuleTakeOrdered2Args
  _args45.Num = num
  _args45.Cmp = cmp
  var _result47 IGeneralActionModuleTakeOrdered2Result
  var _meta46 thrift.ResponseMeta
  _meta46, _err = p.Client_().Call(ctx, "takeOrdered2", &_args45, &_result47)
  p.SetLastResponseMeta_(_meta46)
  if _err != nil {
    return
  }
  switch {
  case _result47.Ex!= nil:
    return _result47.Ex
  }

  return nil
}

func (p *IGeneralActionModuleClient) Keys(ctx context.Context) (_err error) {
  var _args48 IGeneralActionModuleKeysArgs
  var _result50 IGeneralActionModuleKeysResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "keys", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  switch {
  case _result50.Ex!= nil:
    return _result50.Ex
  }

  return nil
}

func (p *IGeneralActionModuleClient) Values(ctx context.Context) (_err error) {
  var _args51 IGeneralActionModuleValuesArgs
  var _result53 IGeneralActionModuleValuesResult
  var _meta52 thrift.ResponseMeta
  _meta52, _err = p.Client_().Call(ctx, "values", &_args51, &_result53)
  p.SetLastResponseMeta_(_meta52)
  if _err != nil {
    return
  }
  switch {
  case _result53.Ex!= nil:
    return _result53.Ex
  }

  return nil
}

type IGeneralActionModuleProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IGeneralActionModule
}

func (p *IGeneralActionModuleProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IGeneralActionModuleProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IGeneralActionModuleProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIGeneralActionModuleProcessor(handler IGeneralActionModule) *IGeneralActionModuleProcessor {

  self54 := &IGeneralActionModuleProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self54.processorMap["execute"] = &iGeneralActionModuleProcessorExecute{handler:handler}
  self54.processorMap["reduce"] = &iGeneralActionModuleProcessorReduce{handler:handler}
  self54.processorMap["treeReduce"] = &iGeneralActionModuleProcessorTreeReduce{handler:handler}
  self54.processorMap["collect"] = &iGeneralActionModuleProcessorCollect{handler:handler}
  self54.processorMap["aggregate"] = &iGeneralActionModuleProcessorAggregate{handler:handler}
  self54.processorMap["treeAggregate"] = &iGeneralActionModuleProcessorTreeAggregate{handler:handler}
  self54.processorMap["fold"] = &iGeneralActionModuleProcessorFold{handler:handler}
  self54.processorMap["treeFold"] = &iGeneralActionModuleProcessorTreeFold{handler:handler}
  self54.processorMap["take"] = &iGeneralActionModuleProcessorTake{handler:handler}
  self54.processorMap["foreach_"] = &iGeneralActionModuleProcessorForeach_{handler:handler}
  self54.processorMap["foreachPartition"] = &iGeneralActionModuleProcessorForeachPartition{handler:handler}
  self54.processorMap["foreachExecutor"] = &iGeneralActionModuleProcessorForeachExecutor{handler:handler}
  self54.processorMap["top"] = &iGeneralActionModuleProcessorTop{handler:handler}
  self54.processorMap["top2"] = &iGeneralActionModuleProcessorTop2{handler:handler}
  self54.processorMap["takeOrdered"] = &iGeneralActionModuleProcessorTakeOrdered{handler:handler}
  self54.processorMap["takeOrdered2"] = &iGeneralActionModuleProcessorTakeOrdered2{handler:handler}
  self54.processorMap["keys"] = &iGeneralActionModuleProcessorKeys{handler:handler}
  self54.processorMap["values"] = &iGeneralActionModuleProcessorValues{handler:handler}
return self54
}

func (p *IGeneralActionModuleProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x55 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x55.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x55

}

type iGeneralActionModuleProcessorExecute struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorExecute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleExecuteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleExecuteResult{}
  if err2 = p.handler.Execute(ctx, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "execute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorReduce struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorReduce) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleReduceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleReduceResult{}
  if err2 = p.handler.Reduce(ctx, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reduce: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reduce", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTreeReduce struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTreeReduce) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTreeReduceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "treeReduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTreeReduceResult{}
  if err2 = p.handler.TreeReduce(ctx, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing treeReduce: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "treeReduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "treeReduce", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorCollect struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorCollect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleCollectArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "collect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleCollectResult{}
  if err2 = p.handler.Collect(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing collect: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "collect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "collect", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorAggregate struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorAggregate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleAggregateArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleAggregateResult{}
  if err2 = p.handler.Aggregate(ctx, args.Zero, args.SeqOp, args.CombOp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aggregate: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "aggregate", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTreeAggregate struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTreeAggregate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTreeAggregateArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "treeAggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTreeAggregateResult{}
  if err2 = p.handler.TreeAggregate(ctx, args.Zero, args.SeqOp, args.CombOp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing treeAggregate: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "treeAggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "treeAggregate", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorFold struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorFold) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleFoldArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleFoldResult{}
  if err2 = p.handler.Fold(ctx, args.Zero, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fold: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fold", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTreeFold struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTreeFold) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTreeFoldArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "treeFold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTreeFoldResult{}
  if err2 = p.handler.TreeFold(ctx, args.Zero, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing treeFold: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "treeFold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "treeFold", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTake struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTake) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTakeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "take", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTakeResult{}
  if err2 = p.handler.Take(ctx, args.Num); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing take: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "take", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "take", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorForeach_ struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorForeach_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleForeach_Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foreach_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleForeach_Result{}
  if err2 = p.handler.Foreach_(ctx, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foreach_: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foreach_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foreach_", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorForeachPartition struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorForeachPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleForeachPartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachPartition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleForeachPartitionResult{}
  if err2 = p.handler.ForeachPartition(ctx, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foreachPartition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachPartition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foreachPartition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorForeachExecutor struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorForeachExecutor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleForeachExecutorArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachExecutor", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleForeachExecutorResult{}
  if err2 = p.handler.ForeachExecutor(ctx, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foreachExecutor: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachExecutor", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foreachExecutor", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTop struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTopArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "top", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTopResult{}
  if err2 = p.handler.Top(ctx, args.Num); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing top: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "top", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "top", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTop2 struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTop2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTop2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "top2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTop2Result{}
  if err2 = p.handler.Top2(ctx, args.Num, args.Cmp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing top2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "top2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "top2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTakeOrdered struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTakeOrdered) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTakeOrderedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTakeOrderedResult{}
  if err2 = p.handler.TakeOrdered(ctx, args.Num); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing takeOrdered: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "takeOrdered", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorTakeOrdered2 struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorTakeOrdered2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleTakeOrdered2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleTakeOrdered2Result{}
  if err2 = p.handler.TakeOrdered2(ctx, args.Num, args.Cmp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing takeOrdered2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "takeOrdered2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorKeys struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleKeysResult{}
  if err2 = p.handler.Keys(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing keys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "keys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iGeneralActionModuleProcessorValues struct {
  handler IGeneralActionModule
}

func (p *iGeneralActionModuleProcessorValues) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IGeneralActionModuleValuesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "values", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IGeneralActionModuleValuesResult{}
  if err2 = p.handler.Values(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *rpc.IExecutorException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing values: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "values", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "values", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Src
type IGeneralActionModuleExecuteArgs struct {
  Src *rpc.ISource `thrift:"src,1" db:"src" json:"src"`
}

func NewIGeneralActionModuleExecuteArgs() *IGeneralActionModuleExecuteArgs {
  return &IGeneralActionModuleExecuteArgs{}
}

var IGeneralActionModuleExecuteArgs_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleExecuteArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleExecuteArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleExecuteArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleExecuteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleExecuteArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleExecuteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleExecuteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleExecuteResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleExecuteResult() *IGeneralActionModuleExecuteResult {
  return &IGeneralActionModuleExecuteResult{}
}

var IGeneralActionModuleExecuteResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleExecuteResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleExecuteResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleExecuteResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleExecuteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleExecuteResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleExecuteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleExecuteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleExecuteResult(%+v)", *p)
}

// Attributes:
//  - Src
type IGeneralActionModuleReduceArgs struct {
  Src *rpc.ISource `thrift:"src,1" db:"src" json:"src"`
}

func NewIGeneralActionModuleReduceArgs() *IGeneralActionModuleReduceArgs {
  return &IGeneralActionModuleReduceArgs{}
}

var IGeneralActionModuleReduceArgs_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleReduceArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleReduceArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleReduceArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleReduceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleReduceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleReduceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduce_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleReduceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleReduceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleReduceArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleReduceResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleReduceResult() *IGeneralActionModuleReduceResult {
  return &IGeneralActionModuleReduceResult{}
}

var IGeneralActionModuleReduceResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleReduceResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleReduceResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleReduceResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleReduceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleReduceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleReduceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduce_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleReduceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleReduceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleReduceResult(%+v)", *p)
}

// Attributes:
//  - Src
type IGeneralActionModuleTreeReduceArgs struct {
  Src *rpc.ISource `thrift:"src,1" db:"src" json:"src"`
}

func NewIGeneralActionModuleTreeReduceArgs() *IGeneralActionModuleTreeReduceArgs {
  return &IGeneralActionModuleTreeReduceArgs{}
}

var IGeneralActionModuleTreeReduceArgs_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTreeReduceArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleTreeReduceArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleTreeReduceArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleTreeReduceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeReduceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeReduceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeReduce_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTreeReduceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTreeReduceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTreeReduceArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTreeReduceResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTreeReduceResult() *IGeneralActionModuleTreeReduceResult {
  return &IGeneralActionModuleTreeReduceResult{}
}

var IGeneralActionModuleTreeReduceResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTreeReduceResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTreeReduceResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTreeReduceResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTreeReduceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeReduceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeReduceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeReduce_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTreeReduceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTreeReduceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTreeReduceResult(%+v)", *p)
}

type IGeneralActionModuleCollectArgs struct {
}

func NewIGeneralActionModuleCollectArgs() *IGeneralActionModuleCollectArgs {
  return &IGeneralActionModuleCollectArgs{}
}

func (p *IGeneralActionModuleCollectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleCollectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "collect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleCollectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleCollectArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleCollectResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleCollectResult() *IGeneralActionModuleCollectResult {
  return &IGeneralActionModuleCollectResult{}
}

var IGeneralActionModuleCollectResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleCollectResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleCollectResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleCollectResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleCollectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleCollectResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleCollectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "collect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleCollectResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleCollectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleCollectResult(%+v)", *p)
}

// Attributes:
//  - Zero
//  - SeqOp
//  - CombOp
type IGeneralActionModuleAggregateArgs struct {
  Zero *rpc.ISource `thrift:"zero,1" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,2" db:"seqOp" json:"seqOp"`
  CombOp *rpc.ISource `thrift:"combOp,3" db:"combOp" json:"combOp"`
}

func NewIGeneralActionModuleAggregateArgs() *IGeneralActionModuleAggregateArgs {
  return &IGeneralActionModuleAggregateArgs{}
}

var IGeneralActionModuleAggregateArgs_Zero_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleAggregateArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IGeneralActionModuleAggregateArgs_Zero_DEFAULT
  }
return p.Zero
}
var IGeneralActionModuleAggregateArgs_SeqOp_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleAggregateArgs) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IGeneralActionModuleAggregateArgs_SeqOp_DEFAULT
  }
return p.SeqOp
}
var IGeneralActionModuleAggregateArgs_CombOp_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleAggregateArgs) GetCombOp() *rpc.ISource {
  if !p.IsSetCombOp() {
    return IGeneralActionModuleAggregateArgs_CombOp_DEFAULT
  }
return p.CombOp
}
func (p *IGeneralActionModuleAggregateArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IGeneralActionModuleAggregateArgs) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IGeneralActionModuleAggregateArgs) IsSetCombOp() bool {
  return p.CombOp != nil
}

func (p *IGeneralActionModuleAggregateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleAggregateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IGeneralActionModuleAggregateArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IGeneralActionModuleAggregateArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.CombOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.CombOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CombOp), err)
  }
  return nil
}

func (p *IGeneralActionModuleAggregateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleAggregateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zero: ", p), err) }
  return err
}

func (p *IGeneralActionModuleAggregateArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:seqOp: ", p), err) }
  return err
}

func (p *IGeneralActionModuleAggregateArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "combOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:combOp: ", p), err) }
  if err := p.CombOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CombOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:combOp: ", p), err) }
  return err
}

func (p *IGeneralActionModuleAggregateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleAggregateArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleAggregateResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleAggregateResult() *IGeneralActionModuleAggregateResult {
  return &IGeneralActionModuleAggregateResult{}
}

var IGeneralActionModuleAggregateResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleAggregateResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleAggregateResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleAggregateResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleAggregateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleAggregateResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleAggregateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleAggregateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleAggregateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleAggregateResult(%+v)", *p)
}

// Attributes:
//  - Zero
//  - SeqOp
//  - CombOp
type IGeneralActionModuleTreeAggregateArgs struct {
  Zero *rpc.ISource `thrift:"zero,1" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,2" db:"seqOp" json:"seqOp"`
  CombOp *rpc.ISource `thrift:"combOp,3" db:"combOp" json:"combOp"`
}

func NewIGeneralActionModuleTreeAggregateArgs() *IGeneralActionModuleTreeAggregateArgs {
  return &IGeneralActionModuleTreeAggregateArgs{}
}

var IGeneralActionModuleTreeAggregateArgs_Zero_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTreeAggregateArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IGeneralActionModuleTreeAggregateArgs_Zero_DEFAULT
  }
return p.Zero
}
var IGeneralActionModuleTreeAggregateArgs_SeqOp_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTreeAggregateArgs) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IGeneralActionModuleTreeAggregateArgs_SeqOp_DEFAULT
  }
return p.SeqOp
}
var IGeneralActionModuleTreeAggregateArgs_CombOp_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTreeAggregateArgs) GetCombOp() *rpc.ISource {
  if !p.IsSetCombOp() {
    return IGeneralActionModuleTreeAggregateArgs_CombOp_DEFAULT
  }
return p.CombOp
}
func (p *IGeneralActionModuleTreeAggregateArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IGeneralActionModuleTreeAggregateArgs) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IGeneralActionModuleTreeAggregateArgs) IsSetCombOp() bool {
  return p.CombOp != nil
}

func (p *IGeneralActionModuleTreeAggregateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.CombOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.CombOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CombOp), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeAggregate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zero: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTreeAggregateArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:seqOp: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTreeAggregateArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "combOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:combOp: ", p), err) }
  if err := p.CombOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CombOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:combOp: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTreeAggregateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTreeAggregateArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTreeAggregateResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTreeAggregateResult() *IGeneralActionModuleTreeAggregateResult {
  return &IGeneralActionModuleTreeAggregateResult{}
}

var IGeneralActionModuleTreeAggregateResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTreeAggregateResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTreeAggregateResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTreeAggregateResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTreeAggregateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeAggregate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTreeAggregateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTreeAggregateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTreeAggregateResult(%+v)", *p)
}

// Attributes:
//  - Zero
//  - Src
type IGeneralActionModuleFoldArgs struct {
  Zero *rpc.ISource `thrift:"zero,1" db:"zero" json:"zero"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIGeneralActionModuleFoldArgs() *IGeneralActionModuleFoldArgs {
  return &IGeneralActionModuleFoldArgs{}
}

var IGeneralActionModuleFoldArgs_Zero_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleFoldArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IGeneralActionModuleFoldArgs_Zero_DEFAULT
  }
return p.Zero
}
var IGeneralActionModuleFoldArgs_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleFoldArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleFoldArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleFoldArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IGeneralActionModuleFoldArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleFoldArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleFoldArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IGeneralActionModuleFoldArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleFoldArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fold_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleFoldArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zero: ", p), err) }
  return err
}

func (p *IGeneralActionModuleFoldArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleFoldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleFoldArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleFoldResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleFoldResult() *IGeneralActionModuleFoldResult {
  return &IGeneralActionModuleFoldResult{}
}

var IGeneralActionModuleFoldResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleFoldResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleFoldResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleFoldResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleFoldResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleFoldResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleFoldResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fold_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleFoldResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleFoldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleFoldResult(%+v)", *p)
}

// Attributes:
//  - Zero
//  - Src
type IGeneralActionModuleTreeFoldArgs struct {
  Zero *rpc.ISource `thrift:"zero,1" db:"zero" json:"zero"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIGeneralActionModuleTreeFoldArgs() *IGeneralActionModuleTreeFoldArgs {
  return &IGeneralActionModuleTreeFoldArgs{}
}

var IGeneralActionModuleTreeFoldArgs_Zero_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTreeFoldArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IGeneralActionModuleTreeFoldArgs_Zero_DEFAULT
  }
return p.Zero
}
var IGeneralActionModuleTreeFoldArgs_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTreeFoldArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleTreeFoldArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleTreeFoldArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IGeneralActionModuleTreeFoldArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleTreeFoldArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeFoldArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeFoldArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeFoldArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeFold_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTreeFoldArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zero: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTreeFoldArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTreeFoldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTreeFoldArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTreeFoldResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTreeFoldResult() *IGeneralActionModuleTreeFoldResult {
  return &IGeneralActionModuleTreeFoldResult{}
}

var IGeneralActionModuleTreeFoldResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTreeFoldResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTreeFoldResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTreeFoldResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTreeFoldResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeFoldResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTreeFoldResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeFold_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTreeFoldResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTreeFoldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTreeFoldResult(%+v)", *p)
}

// Attributes:
//  - Num
type IGeneralActionModuleTakeArgs struct {
  Num int64 `thrift:"num,1" db:"num" json:"num"`
}

func NewIGeneralActionModuleTakeArgs() *IGeneralActionModuleTakeArgs {
  return &IGeneralActionModuleTakeArgs{}
}


func (p *IGeneralActionModuleTakeArgs) GetNum() int64 {
  return p.Num
}
func (p *IGeneralActionModuleTakeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IGeneralActionModuleTakeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "take_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTakeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTakeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTakeArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTakeResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTakeResult() *IGeneralActionModuleTakeResult {
  return &IGeneralActionModuleTakeResult{}
}

var IGeneralActionModuleTakeResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTakeResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTakeResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTakeResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTakeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "take_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTakeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTakeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTakeResult(%+v)", *p)
}

// Attributes:
//  - Src
type IGeneralActionModuleForeach_Args struct {
  Src *rpc.ISource `thrift:"src,1" db:"src" json:"src"`
}

func NewIGeneralActionModuleForeach_Args() *IGeneralActionModuleForeach_Args {
  return &IGeneralActionModuleForeach_Args{}
}

var IGeneralActionModuleForeach_Args_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleForeach_Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleForeach_Args_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleForeach_Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleForeach_Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeach_Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeach_Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreach__args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleForeach_Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleForeach_Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleForeach_Args(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleForeach_Result struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleForeach_Result() *IGeneralActionModuleForeach_Result {
  return &IGeneralActionModuleForeach_Result{}
}

var IGeneralActionModuleForeach_Result_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleForeach_Result) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleForeach_Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleForeach_Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleForeach_Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeach_Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeach_Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreach__result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleForeach_Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleForeach_Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleForeach_Result(%+v)", *p)
}

// Attributes:
//  - Src
type IGeneralActionModuleForeachPartitionArgs struct {
  Src *rpc.ISource `thrift:"src,1" db:"src" json:"src"`
}

func NewIGeneralActionModuleForeachPartitionArgs() *IGeneralActionModuleForeachPartitionArgs {
  return &IGeneralActionModuleForeachPartitionArgs{}
}

var IGeneralActionModuleForeachPartitionArgs_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleForeachPartitionArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleForeachPartitionArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleForeachPartitionArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleForeachPartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachPartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachPartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachPartition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleForeachPartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleForeachPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleForeachPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleForeachPartitionResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleForeachPartitionResult() *IGeneralActionModuleForeachPartitionResult {
  return &IGeneralActionModuleForeachPartitionResult{}
}

var IGeneralActionModuleForeachPartitionResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleForeachPartitionResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleForeachPartitionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleForeachPartitionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleForeachPartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachPartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachPartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachPartition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleForeachPartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleForeachPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleForeachPartitionResult(%+v)", *p)
}

// Attributes:
//  - Src
type IGeneralActionModuleForeachExecutorArgs struct {
  Src *rpc.ISource `thrift:"src,1" db:"src" json:"src"`
}

func NewIGeneralActionModuleForeachExecutorArgs() *IGeneralActionModuleForeachExecutorArgs {
  return &IGeneralActionModuleForeachExecutorArgs{}
}

var IGeneralActionModuleForeachExecutorArgs_Src_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleForeachExecutorArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IGeneralActionModuleForeachExecutorArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IGeneralActionModuleForeachExecutorArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IGeneralActionModuleForeachExecutorArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachExecutorArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachExecutorArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachExecutor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleForeachExecutorArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *IGeneralActionModuleForeachExecutorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleForeachExecutorArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleForeachExecutorResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleForeachExecutorResult() *IGeneralActionModuleForeachExecutorResult {
  return &IGeneralActionModuleForeachExecutorResult{}
}

var IGeneralActionModuleForeachExecutorResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleForeachExecutorResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleForeachExecutorResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleForeachExecutorResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleForeachExecutorResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachExecutorResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleForeachExecutorResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachExecutor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleForeachExecutorResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleForeachExecutorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleForeachExecutorResult(%+v)", *p)
}

// Attributes:
//  - Num
type IGeneralActionModuleTopArgs struct {
  Num int64 `thrift:"num,1" db:"num" json:"num"`
}

func NewIGeneralActionModuleTopArgs() *IGeneralActionModuleTopArgs {
  return &IGeneralActionModuleTopArgs{}
}


func (p *IGeneralActionModuleTopArgs) GetNum() int64 {
  return p.Num
}
func (p *IGeneralActionModuleTopArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTopArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IGeneralActionModuleTopArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTopArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTopArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTopResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTopResult() *IGeneralActionModuleTopResult {
  return &IGeneralActionModuleTopResult{}
}

var IGeneralActionModuleTopResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTopResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTopResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTopResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTopResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTopResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTopResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTopResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTopResult(%+v)", *p)
}

// Attributes:
//  - Num
//  - Cmp
type IGeneralActionModuleTop2Args struct {
  Num int64 `thrift:"num,1" db:"num" json:"num"`
  Cmp *rpc.ISource `thrift:"cmp,2" db:"cmp" json:"cmp"`
}

func NewIGeneralActionModuleTop2Args() *IGeneralActionModuleTop2Args {
  return &IGeneralActionModuleTop2Args{}
}


func (p *IGeneralActionModuleTop2Args) GetNum() int64 {
  return p.Num
}
var IGeneralActionModuleTop2Args_Cmp_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTop2Args) GetCmp() *rpc.ISource {
  if !p.IsSetCmp() {
    return IGeneralActionModuleTop2Args_Cmp_DEFAULT
  }
return p.Cmp
}
func (p *IGeneralActionModuleTop2Args) IsSetCmp() bool {
  return p.Cmp != nil
}

func (p *IGeneralActionModuleTop2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTop2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IGeneralActionModuleTop2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cmp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Cmp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cmp), err)
  }
  return nil
}

func (p *IGeneralActionModuleTop2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTop2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTop2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cmp: ", p), err) }
  if err := p.Cmp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cmp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cmp: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTop2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTop2Args(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTop2Result struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTop2Result() *IGeneralActionModuleTop2Result {
  return &IGeneralActionModuleTop2Result{}
}

var IGeneralActionModuleTop2Result_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTop2Result) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTop2Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTop2Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTop2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTop2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTop2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTop2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTop2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTop2Result(%+v)", *p)
}

// Attributes:
//  - Num
type IGeneralActionModuleTakeOrderedArgs struct {
  Num int64 `thrift:"num,1" db:"num" json:"num"`
}

func NewIGeneralActionModuleTakeOrderedArgs() *IGeneralActionModuleTakeOrderedArgs {
  return &IGeneralActionModuleTakeOrderedArgs{}
}


func (p *IGeneralActionModuleTakeOrderedArgs) GetNum() int64 {
  return p.Num
}
func (p *IGeneralActionModuleTakeOrderedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeOrderedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IGeneralActionModuleTakeOrderedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTakeOrderedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTakeOrderedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTakeOrderedArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTakeOrderedResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTakeOrderedResult() *IGeneralActionModuleTakeOrderedResult {
  return &IGeneralActionModuleTakeOrderedResult{}
}

var IGeneralActionModuleTakeOrderedResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTakeOrderedResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTakeOrderedResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTakeOrderedResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTakeOrderedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeOrderedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeOrderedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTakeOrderedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTakeOrderedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTakeOrderedResult(%+v)", *p)
}

// Attributes:
//  - Num
//  - Cmp
type IGeneralActionModuleTakeOrdered2Args struct {
  Num int64 `thrift:"num,1" db:"num" json:"num"`
  Cmp *rpc.ISource `thrift:"cmp,2" db:"cmp" json:"cmp"`
}

func NewIGeneralActionModuleTakeOrdered2Args() *IGeneralActionModuleTakeOrdered2Args {
  return &IGeneralActionModuleTakeOrdered2Args{}
}


func (p *IGeneralActionModuleTakeOrdered2Args) GetNum() int64 {
  return p.Num
}
var IGeneralActionModuleTakeOrdered2Args_Cmp_DEFAULT *rpc.ISource
func (p *IGeneralActionModuleTakeOrdered2Args) GetCmp() *rpc.ISource {
  if !p.IsSetCmp() {
    return IGeneralActionModuleTakeOrdered2Args_Cmp_DEFAULT
  }
return p.Cmp
}
func (p *IGeneralActionModuleTakeOrdered2Args) IsSetCmp() bool {
  return p.Cmp != nil
}

func (p *IGeneralActionModuleTakeOrdered2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeOrdered2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IGeneralActionModuleTakeOrdered2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cmp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Cmp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cmp), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeOrdered2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTakeOrdered2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTakeOrdered2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cmp: ", p), err) }
  if err := p.Cmp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cmp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cmp: ", p), err) }
  return err
}

func (p *IGeneralActionModuleTakeOrdered2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTakeOrdered2Args(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleTakeOrdered2Result struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleTakeOrdered2Result() *IGeneralActionModuleTakeOrdered2Result {
  return &IGeneralActionModuleTakeOrdered2Result{}
}

var IGeneralActionModuleTakeOrdered2Result_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleTakeOrdered2Result) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleTakeOrdered2Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleTakeOrdered2Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleTakeOrdered2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeOrdered2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleTakeOrdered2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleTakeOrdered2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleTakeOrdered2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleTakeOrdered2Result(%+v)", *p)
}

type IGeneralActionModuleKeysArgs struct {
}

func NewIGeneralActionModuleKeysArgs() *IGeneralActionModuleKeysArgs {
  return &IGeneralActionModuleKeysArgs{}
}

func (p *IGeneralActionModuleKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "keys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleKeysArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleKeysResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleKeysResult() *IGeneralActionModuleKeysResult {
  return &IGeneralActionModuleKeysResult{}
}

var IGeneralActionModuleKeysResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleKeysResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleKeysResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleKeysResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleKeysResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "keys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleKeysResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleKeysResult(%+v)", *p)
}

type IGeneralActionModuleValuesArgs struct {
}

func NewIGeneralActionModuleValuesArgs() *IGeneralActionModuleValuesArgs {
  return &IGeneralActionModuleValuesArgs{}
}

func (p *IGeneralActionModuleValuesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleValuesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "values_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleValuesArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IGeneralActionModuleValuesResult struct {
  Ex *rpc.IExecutorException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIGeneralActionModuleValuesResult() *IGeneralActionModuleValuesResult {
  return &IGeneralActionModuleValuesResult{}
}

var IGeneralActionModuleValuesResult_Ex_DEFAULT *rpc.IExecutorException
func (p *IGeneralActionModuleValuesResult) GetEx() *rpc.IExecutorException {
  if !p.IsSetEx() {
    return IGeneralActionModuleValuesResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IGeneralActionModuleValuesResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IGeneralActionModuleValuesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IGeneralActionModuleValuesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &rpc.IExecutorException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IGeneralActionModuleValuesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "values_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IGeneralActionModuleValuesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IGeneralActionModuleValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IGeneralActionModuleValuesResult(%+v)", *p)
}


