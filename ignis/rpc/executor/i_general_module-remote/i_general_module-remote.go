// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/executor"
)

var _ = rpc.GoUnusedProtection__
var _ = executor.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void executeTo(ISource src)")
  fmt.Fprintln(os.Stderr, "  void map_(ISource src)")
  fmt.Fprintln(os.Stderr, "  void filter(ISource src)")
  fmt.Fprintln(os.Stderr, "  void flatmap(ISource src)")
  fmt.Fprintln(os.Stderr, "  void keyBy(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapPartitions(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapPartitionsWithIndex(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapExecutor(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapExecutorTo(ISource src)")
  fmt.Fprintln(os.Stderr, "  void groupBy(ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sort(bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sort2(bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sortBy(ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortBy3(ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void union_(string other, bool preserveOrder)")
  fmt.Fprintln(os.Stderr, "  void union2(string other, bool preserveOrder, ISource src)")
  fmt.Fprintln(os.Stderr, "  void join(string other, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void join3(string other, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void distinct(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void distinct2(i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void repartition(i64 numPartitions, bool preserveOrdering, bool global_)")
  fmt.Fprintln(os.Stderr, "  void partitionByRandom(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void partitionByHash(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void partitionBy(ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void flatMapValues(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapValues(ISource src)")
  fmt.Fprintln(os.Stderr, "  void groupByKey(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void groupByKey2(i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void reduceByKey(ISource src, i64 numPartitions, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  void aggregateByKey(ISource zero, ISource seqOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void aggregateByKey4(ISource zero, ISource seqOp, ISource combOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void foldByKey(ISource zero, ISource src, i64 numPartitions, bool localFold)")
  fmt.Fprintln(os.Stderr, "  void sortByKey(bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortByKey2a(bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sortByKey2b(ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortByKey3(ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := executor.NewIGeneralModuleClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "executeTo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteTo requires 1 args")
      flag.Usage()
    }
    arg110 := flag.Arg(1)
    mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
    defer mbTrans111.Close()
    _, err112 := mbTrans111.WriteString(arg110)
    if err112 != nil {
      Usage()
      return
    }
    factory113 := thrift.NewTJSONProtocolFactory()
    jsProt114 := factory113.GetProtocol(mbTrans111)
    argvalue0 := rpc.NewISource()
    err115 := argvalue0.Read(context.Background(), jsProt114)
    if err115 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteTo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "map_":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Map_ requires 1 args")
      flag.Usage()
    }
    arg116 := flag.Arg(1)
    mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
    defer mbTrans117.Close()
    _, err118 := mbTrans117.WriteString(arg116)
    if err118 != nil {
      Usage()
      return
    }
    factory119 := thrift.NewTJSONProtocolFactory()
    jsProt120 := factory119.GetProtocol(mbTrans117)
    argvalue0 := rpc.NewISource()
    err121 := argvalue0.Read(context.Background(), jsProt120)
    if err121 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Map_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "filter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Filter requires 1 args")
      flag.Usage()
    }
    arg122 := flag.Arg(1)
    mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
    defer mbTrans123.Close()
    _, err124 := mbTrans123.WriteString(arg122)
    if err124 != nil {
      Usage()
      return
    }
    factory125 := thrift.NewTJSONProtocolFactory()
    jsProt126 := factory125.GetProtocol(mbTrans123)
    argvalue0 := rpc.NewISource()
    err127 := argvalue0.Read(context.Background(), jsProt126)
    if err127 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Filter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "flatmap":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Flatmap requires 1 args")
      flag.Usage()
    }
    arg128 := flag.Arg(1)
    mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
    defer mbTrans129.Close()
    _, err130 := mbTrans129.WriteString(arg128)
    if err130 != nil {
      Usage()
      return
    }
    factory131 := thrift.NewTJSONProtocolFactory()
    jsProt132 := factory131.GetProtocol(mbTrans129)
    argvalue0 := rpc.NewISource()
    err133 := argvalue0.Read(context.Background(), jsProt132)
    if err133 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Flatmap(context.Background(), value0))
    fmt.Print("\n")
    break
  case "keyBy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "KeyBy requires 1 args")
      flag.Usage()
    }
    arg134 := flag.Arg(1)
    mbTrans135 := thrift.NewTMemoryBufferLen(len(arg134))
    defer mbTrans135.Close()
    _, err136 := mbTrans135.WriteString(arg134)
    if err136 != nil {
      Usage()
      return
    }
    factory137 := thrift.NewTJSONProtocolFactory()
    jsProt138 := factory137.GetProtocol(mbTrans135)
    argvalue0 := rpc.NewISource()
    err139 := argvalue0.Read(context.Background(), jsProt138)
    if err139 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.KeyBy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapPartitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapPartitions requires 1 args")
      flag.Usage()
    }
    arg140 := flag.Arg(1)
    mbTrans141 := thrift.NewTMemoryBufferLen(len(arg140))
    defer mbTrans141.Close()
    _, err142 := mbTrans141.WriteString(arg140)
    if err142 != nil {
      Usage()
      return
    }
    factory143 := thrift.NewTJSONProtocolFactory()
    jsProt144 := factory143.GetProtocol(mbTrans141)
    argvalue0 := rpc.NewISource()
    err145 := argvalue0.Read(context.Background(), jsProt144)
    if err145 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapPartitionsWithIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapPartitionsWithIndex requires 1 args")
      flag.Usage()
    }
    arg146 := flag.Arg(1)
    mbTrans147 := thrift.NewTMemoryBufferLen(len(arg146))
    defer mbTrans147.Close()
    _, err148 := mbTrans147.WriteString(arg146)
    if err148 != nil {
      Usage()
      return
    }
    factory149 := thrift.NewTJSONProtocolFactory()
    jsProt150 := factory149.GetProtocol(mbTrans147)
    argvalue0 := rpc.NewISource()
    err151 := argvalue0.Read(context.Background(), jsProt150)
    if err151 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapPartitionsWithIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapExecutor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapExecutor requires 1 args")
      flag.Usage()
    }
    arg152 := flag.Arg(1)
    mbTrans153 := thrift.NewTMemoryBufferLen(len(arg152))
    defer mbTrans153.Close()
    _, err154 := mbTrans153.WriteString(arg152)
    if err154 != nil {
      Usage()
      return
    }
    factory155 := thrift.NewTJSONProtocolFactory()
    jsProt156 := factory155.GetProtocol(mbTrans153)
    argvalue0 := rpc.NewISource()
    err157 := argvalue0.Read(context.Background(), jsProt156)
    if err157 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapExecutor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapExecutorTo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapExecutorTo requires 1 args")
      flag.Usage()
    }
    arg158 := flag.Arg(1)
    mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
    defer mbTrans159.Close()
    _, err160 := mbTrans159.WriteString(arg158)
    if err160 != nil {
      Usage()
      return
    }
    factory161 := thrift.NewTJSONProtocolFactory()
    jsProt162 := factory161.GetProtocol(mbTrans159)
    argvalue0 := rpc.NewISource()
    err163 := argvalue0.Read(context.Background(), jsProt162)
    if err163 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapExecutorTo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupBy requires 2 args")
      flag.Usage()
    }
    arg164 := flag.Arg(1)
    mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
    defer mbTrans165.Close()
    _, err166 := mbTrans165.WriteString(arg164)
    if err166 != nil {
      Usage()
      return
    }
    factory167 := thrift.NewTJSONProtocolFactory()
    jsProt168 := factory167.GetProtocol(mbTrans165)
    argvalue0 := rpc.NewISource()
    err169 := argvalue0.Read(context.Background(), jsProt168)
    if err169 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err170 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err170 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sort requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.Sort(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sort2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sort2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1, err173 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err173 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Sort2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortBy requires 2 args")
      flag.Usage()
    }
    arg174 := flag.Arg(1)
    mbTrans175 := thrift.NewTMemoryBufferLen(len(arg174))
    defer mbTrans175.Close()
    _, err176 := mbTrans175.WriteString(arg174)
    if err176 != nil {
      Usage()
      return
    }
    factory177 := thrift.NewTJSONProtocolFactory()
    jsProt178 := factory177.GetProtocol(mbTrans175)
    argvalue0 := rpc.NewISource()
    err179 := argvalue0.Read(context.Background(), jsProt178)
    if err179 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortBy3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortBy3 requires 3 args")
      flag.Usage()
    }
    arg181 := flag.Arg(1)
    mbTrans182 := thrift.NewTMemoryBufferLen(len(arg181))
    defer mbTrans182.Close()
    _, err183 := mbTrans182.WriteString(arg181)
    if err183 != nil {
      Usage()
      return
    }
    factory184 := thrift.NewTJSONProtocolFactory()
    jsProt185 := factory184.GetProtocol(mbTrans182)
    argvalue0 := rpc.NewISource()
    err186 := argvalue0.Read(context.Background(), jsProt185)
    if err186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err188 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err188 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortBy3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "union_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Union_ requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.Union_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "union2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Union2 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    arg193 := flag.Arg(3)
    mbTrans194 := thrift.NewTMemoryBufferLen(len(arg193))
    defer mbTrans194.Close()
    _, err195 := mbTrans194.WriteString(arg193)
    if err195 != nil {
      Usage()
      return
    }
    factory196 := thrift.NewTJSONProtocolFactory()
    jsProt197 := factory196.GetProtocol(mbTrans194)
    argvalue2 := rpc.NewISource()
    err198 := argvalue2.Read(context.Background(), jsProt197)
    if err198 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Union2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Join requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err200 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err200 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Join(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "join3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err202 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err202 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg203 := flag.Arg(3)
    mbTrans204 := thrift.NewTMemoryBufferLen(len(arg203))
    defer mbTrans204.Close()
    _, err205 := mbTrans204.WriteString(arg203)
    if err205 != nil {
      Usage()
      return
    }
    factory206 := thrift.NewTJSONProtocolFactory()
    jsProt207 := factory206.GetProtocol(mbTrans204)
    argvalue2 := rpc.NewISource()
    err208 := argvalue2.Read(context.Background(), jsProt207)
    if err208 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "distinct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Distinct requires 1 args")
      flag.Usage()
    }
    argvalue0, err209 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err209 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Distinct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "distinct2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2 requires 2 args")
      flag.Usage()
    }
    argvalue0, err210 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err210 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg211 := flag.Arg(2)
    mbTrans212 := thrift.NewTMemoryBufferLen(len(arg211))
    defer mbTrans212.Close()
    _, err213 := mbTrans212.WriteString(arg211)
    if err213 != nil {
      Usage()
      return
    }
    factory214 := thrift.NewTJSONProtocolFactory()
    jsProt215 := factory214.GetProtocol(mbTrans212)
    argvalue1 := rpc.NewISource()
    err216 := argvalue1.Read(context.Background(), jsProt215)
    if err216 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "repartition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Repartition requires 3 args")
      flag.Usage()
    }
    argvalue0, err217 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err217 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.Repartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionByRandom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionByRandom requires 1 args")
      flag.Usage()
    }
    argvalue0, err220 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err220 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PartitionByRandom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitionByHash":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionByHash requires 1 args")
      flag.Usage()
    }
    argvalue0, err221 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PartitionByHash(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitionBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionBy requires 2 args")
      flag.Usage()
    }
    arg222 := flag.Arg(1)
    mbTrans223 := thrift.NewTMemoryBufferLen(len(arg222))
    defer mbTrans223.Close()
    _, err224 := mbTrans223.WriteString(arg222)
    if err224 != nil {
      Usage()
      return
    }
    factory225 := thrift.NewTJSONProtocolFactory()
    jsProt226 := factory225.GetProtocol(mbTrans223)
    argvalue0 := rpc.NewISource()
    err227 := argvalue0.Read(context.Background(), jsProt226)
    if err227 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err228 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err228 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "flatMapValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FlatMapValues requires 1 args")
      flag.Usage()
    }
    arg229 := flag.Arg(1)
    mbTrans230 := thrift.NewTMemoryBufferLen(len(arg229))
    defer mbTrans230.Close()
    _, err231 := mbTrans230.WriteString(arg229)
    if err231 != nil {
      Usage()
      return
    }
    factory232 := thrift.NewTJSONProtocolFactory()
    jsProt233 := factory232.GetProtocol(mbTrans230)
    argvalue0 := rpc.NewISource()
    err234 := argvalue0.Read(context.Background(), jsProt233)
    if err234 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FlatMapValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapValues requires 1 args")
      flag.Usage()
    }
    arg235 := flag.Arg(1)
    mbTrans236 := thrift.NewTMemoryBufferLen(len(arg235))
    defer mbTrans236.Close()
    _, err237 := mbTrans236.WriteString(arg235)
    if err237 != nil {
      Usage()
      return
    }
    factory238 := thrift.NewTJSONProtocolFactory()
    jsProt239 := factory238.GetProtocol(mbTrans236)
    argvalue0 := rpc.NewISource()
    err240 := argvalue0.Read(context.Background(), jsProt239)
    if err240 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GroupByKey requires 1 args")
      flag.Usage()
    }
    argvalue0, err241 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err241 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GroupByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2 requires 2 args")
      flag.Usage()
    }
    argvalue0, err242 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err242 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg243 := flag.Arg(2)
    mbTrans244 := thrift.NewTMemoryBufferLen(len(arg243))
    defer mbTrans244.Close()
    _, err245 := mbTrans244.WriteString(arg243)
    if err245 != nil {
      Usage()
      return
    }
    factory246 := thrift.NewTJSONProtocolFactory()
    jsProt247 := factory246.GetProtocol(mbTrans244)
    argvalue1 := rpc.NewISource()
    err248 := argvalue1.Read(context.Background(), jsProt247)
    if err248 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reduceByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReduceByKey requires 3 args")
      flag.Usage()
    }
    arg249 := flag.Arg(1)
    mbTrans250 := thrift.NewTMemoryBufferLen(len(arg249))
    defer mbTrans250.Close()
    _, err251 := mbTrans250.WriteString(arg249)
    if err251 != nil {
      Usage()
      return
    }
    factory252 := thrift.NewTJSONProtocolFactory()
    jsProt253 := factory252.GetProtocol(mbTrans250)
    argvalue0 := rpc.NewISource()
    err254 := argvalue0.Read(context.Background(), jsProt253)
    if err254 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err255 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err255 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.ReduceByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AggregateByKey requires 3 args")
      flag.Usage()
    }
    arg257 := flag.Arg(1)
    mbTrans258 := thrift.NewTMemoryBufferLen(len(arg257))
    defer mbTrans258.Close()
    _, err259 := mbTrans258.WriteString(arg257)
    if err259 != nil {
      Usage()
      return
    }
    factory260 := thrift.NewTJSONProtocolFactory()
    jsProt261 := factory260.GetProtocol(mbTrans258)
    argvalue0 := rpc.NewISource()
    err262 := argvalue0.Read(context.Background(), jsProt261)
    if err262 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg263 := flag.Arg(2)
    mbTrans264 := thrift.NewTMemoryBufferLen(len(arg263))
    defer mbTrans264.Close()
    _, err265 := mbTrans264.WriteString(arg263)
    if err265 != nil {
      Usage()
      return
    }
    factory266 := thrift.NewTJSONProtocolFactory()
    jsProt267 := factory266.GetProtocol(mbTrans264)
    argvalue1 := rpc.NewISource()
    err268 := argvalue1.Read(context.Background(), jsProt267)
    if err268 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err269 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err269 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AggregateByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4 requires 4 args")
      flag.Usage()
    }
    arg270 := flag.Arg(1)
    mbTrans271 := thrift.NewTMemoryBufferLen(len(arg270))
    defer mbTrans271.Close()
    _, err272 := mbTrans271.WriteString(arg270)
    if err272 != nil {
      Usage()
      return
    }
    factory273 := thrift.NewTJSONProtocolFactory()
    jsProt274 := factory273.GetProtocol(mbTrans271)
    argvalue0 := rpc.NewISource()
    err275 := argvalue0.Read(context.Background(), jsProt274)
    if err275 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg276 := flag.Arg(2)
    mbTrans277 := thrift.NewTMemoryBufferLen(len(arg276))
    defer mbTrans277.Close()
    _, err278 := mbTrans277.WriteString(arg276)
    if err278 != nil {
      Usage()
      return
    }
    factory279 := thrift.NewTJSONProtocolFactory()
    jsProt280 := factory279.GetProtocol(mbTrans277)
    argvalue1 := rpc.NewISource()
    err281 := argvalue1.Read(context.Background(), jsProt280)
    if err281 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg282 := flag.Arg(3)
    mbTrans283 := thrift.NewTMemoryBufferLen(len(arg282))
    defer mbTrans283.Close()
    _, err284 := mbTrans283.WriteString(arg282)
    if err284 != nil {
      Usage()
      return
    }
    factory285 := thrift.NewTJSONProtocolFactory()
    jsProt286 := factory285.GetProtocol(mbTrans283)
    argvalue2 := rpc.NewISource()
    err287 := argvalue2.Read(context.Background(), jsProt286)
    if err287 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err288 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err288 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "foldByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FoldByKey requires 4 args")
      flag.Usage()
    }
    arg289 := flag.Arg(1)
    mbTrans290 := thrift.NewTMemoryBufferLen(len(arg289))
    defer mbTrans290.Close()
    _, err291 := mbTrans290.WriteString(arg289)
    if err291 != nil {
      Usage()
      return
    }
    factory292 := thrift.NewTJSONProtocolFactory()
    jsProt293 := factory292.GetProtocol(mbTrans290)
    argvalue0 := rpc.NewISource()
    err294 := argvalue0.Read(context.Background(), jsProt293)
    if err294 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg295 := flag.Arg(2)
    mbTrans296 := thrift.NewTMemoryBufferLen(len(arg295))
    defer mbTrans296.Close()
    _, err297 := mbTrans296.WriteString(arg295)
    if err297 != nil {
      Usage()
      return
    }
    factory298 := thrift.NewTJSONProtocolFactory()
    jsProt299 := factory298.GetProtocol(mbTrans296)
    argvalue1 := rpc.NewISource()
    err300 := argvalue1.Read(context.Background(), jsProt299)
    if err300 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err301 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err301 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.FoldByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sortByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SortByKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.SortByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sortByKey2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey2a requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1, err305 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err305 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SortByKey2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey2b requires 2 args")
      flag.Usage()
    }
    arg306 := flag.Arg(1)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil {
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    argvalue0 := rpc.NewISource()
    err311 := argvalue0.Read(context.Background(), jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortByKey2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3 requires 3 args")
      flag.Usage()
    }
    arg313 := flag.Arg(1)
    mbTrans314 := thrift.NewTMemoryBufferLen(len(arg313))
    defer mbTrans314.Close()
    _, err315 := mbTrans314.WriteString(arg313)
    if err315 != nil {
      Usage()
      return
    }
    factory316 := thrift.NewTJSONProtocolFactory()
    jsProt317 := factory316.GetProtocol(mbTrans314)
    argvalue0 := rpc.NewISource()
    err318 := argvalue0.Read(context.Background(), jsProt317)
    if err318 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err320 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err320 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortByKey3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
