// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/executor"
)

var _ = rpc.GoUnusedProtection__
var _ = executor.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void executeTo(ISource src)")
  fmt.Fprintln(os.Stderr, "  void map_(ISource src)")
  fmt.Fprintln(os.Stderr, "  void filter(ISource src)")
  fmt.Fprintln(os.Stderr, "  void flatmap(ISource src)")
  fmt.Fprintln(os.Stderr, "  void keyBy(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapPartitions(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapPartitionsWithIndex(ISource src, bool preservesPartitioning)")
  fmt.Fprintln(os.Stderr, "  void mapExecutor(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapExecutorTo(ISource src)")
  fmt.Fprintln(os.Stderr, "  void groupBy(ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sort(bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sort2(bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sortBy(ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortBy3(ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void union_(string other, bool preserveOrder)")
  fmt.Fprintln(os.Stderr, "  void union2(string other, bool preserveOrder, ISource src)")
  fmt.Fprintln(os.Stderr, "  void join(string other, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void join3(string other, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void distinct(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void distinct2(i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void repartition(i64 numPartitions, bool preserveOrdering, bool global_)")
  fmt.Fprintln(os.Stderr, "  void partitionByRandom(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void partitionByHash(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void partitionBy(ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void flatMapValues(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapValues(ISource src)")
  fmt.Fprintln(os.Stderr, "  void groupByKey(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void groupByKey2(i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void reduceByKey(ISource src, i64 numPartitions, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  void aggregateByKey(ISource zero, ISource seqOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void aggregateByKey4(ISource zero, ISource seqOp, ISource combOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void foldByKey(ISource zero, ISource src, i64 numPartitions, bool localFold)")
  fmt.Fprintln(os.Stderr, "  void sortByKey(bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortByKey2a(bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sortByKey2b(ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortByKey3(ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := executor.NewIGeneralModuleClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "executeTo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteTo requires 1 args")
      flag.Usage()
    }
    arg110 := flag.Arg(1)
    mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
    defer mbTrans111.Close()
    _, err112 := mbTrans111.WriteString(arg110)
    if err112 != nil {
      Usage()
      return
    }
    factory113 := thrift.NewTJSONProtocolFactory()
    jsProt114 := factory113.GetProtocol(mbTrans111)
    argvalue0 := rpc.NewISource()
    err115 := argvalue0.Read(context.Background(), jsProt114)
    if err115 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteTo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "map_":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Map_ requires 1 args")
      flag.Usage()
    }
    arg116 := flag.Arg(1)
    mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
    defer mbTrans117.Close()
    _, err118 := mbTrans117.WriteString(arg116)
    if err118 != nil {
      Usage()
      return
    }
    factory119 := thrift.NewTJSONProtocolFactory()
    jsProt120 := factory119.GetProtocol(mbTrans117)
    argvalue0 := rpc.NewISource()
    err121 := argvalue0.Read(context.Background(), jsProt120)
    if err121 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Map_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "filter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Filter requires 1 args")
      flag.Usage()
    }
    arg122 := flag.Arg(1)
    mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
    defer mbTrans123.Close()
    _, err124 := mbTrans123.WriteString(arg122)
    if err124 != nil {
      Usage()
      return
    }
    factory125 := thrift.NewTJSONProtocolFactory()
    jsProt126 := factory125.GetProtocol(mbTrans123)
    argvalue0 := rpc.NewISource()
    err127 := argvalue0.Read(context.Background(), jsProt126)
    if err127 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Filter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "flatmap":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Flatmap requires 1 args")
      flag.Usage()
    }
    arg128 := flag.Arg(1)
    mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
    defer mbTrans129.Close()
    _, err130 := mbTrans129.WriteString(arg128)
    if err130 != nil {
      Usage()
      return
    }
    factory131 := thrift.NewTJSONProtocolFactory()
    jsProt132 := factory131.GetProtocol(mbTrans129)
    argvalue0 := rpc.NewISource()
    err133 := argvalue0.Read(context.Background(), jsProt132)
    if err133 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Flatmap(context.Background(), value0))
    fmt.Print("\n")
    break
  case "keyBy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "KeyBy requires 1 args")
      flag.Usage()
    }
    arg134 := flag.Arg(1)
    mbTrans135 := thrift.NewTMemoryBufferLen(len(arg134))
    defer mbTrans135.Close()
    _, err136 := mbTrans135.WriteString(arg134)
    if err136 != nil {
      Usage()
      return
    }
    factory137 := thrift.NewTJSONProtocolFactory()
    jsProt138 := factory137.GetProtocol(mbTrans135)
    argvalue0 := rpc.NewISource()
    err139 := argvalue0.Read(context.Background(), jsProt138)
    if err139 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.KeyBy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapPartitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapPartitions requires 1 args")
      flag.Usage()
    }
    arg140 := flag.Arg(1)
    mbTrans141 := thrift.NewTMemoryBufferLen(len(arg140))
    defer mbTrans141.Close()
    _, err142 := mbTrans141.WriteString(arg140)
    if err142 != nil {
      Usage()
      return
    }
    factory143 := thrift.NewTJSONProtocolFactory()
    jsProt144 := factory143.GetProtocol(mbTrans141)
    argvalue0 := rpc.NewISource()
    err145 := argvalue0.Read(context.Background(), jsProt144)
    if err145 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapPartitionsWithIndex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapPartitionsWithIndex requires 2 args")
      flag.Usage()
    }
    arg146 := flag.Arg(1)
    mbTrans147 := thrift.NewTMemoryBufferLen(len(arg146))
    defer mbTrans147.Close()
    _, err148 := mbTrans147.WriteString(arg146)
    if err148 != nil {
      Usage()
      return
    }
    factory149 := thrift.NewTJSONProtocolFactory()
    jsProt150 := factory149.GetProtocol(mbTrans147)
    argvalue0 := rpc.NewISource()
    err151 := argvalue0.Read(context.Background(), jsProt150)
    if err151 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.MapPartitionsWithIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapExecutor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapExecutor requires 1 args")
      flag.Usage()
    }
    arg153 := flag.Arg(1)
    mbTrans154 := thrift.NewTMemoryBufferLen(len(arg153))
    defer mbTrans154.Close()
    _, err155 := mbTrans154.WriteString(arg153)
    if err155 != nil {
      Usage()
      return
    }
    factory156 := thrift.NewTJSONProtocolFactory()
    jsProt157 := factory156.GetProtocol(mbTrans154)
    argvalue0 := rpc.NewISource()
    err158 := argvalue0.Read(context.Background(), jsProt157)
    if err158 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapExecutor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapExecutorTo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapExecutorTo requires 1 args")
      flag.Usage()
    }
    arg159 := flag.Arg(1)
    mbTrans160 := thrift.NewTMemoryBufferLen(len(arg159))
    defer mbTrans160.Close()
    _, err161 := mbTrans160.WriteString(arg159)
    if err161 != nil {
      Usage()
      return
    }
    factory162 := thrift.NewTJSONProtocolFactory()
    jsProt163 := factory162.GetProtocol(mbTrans160)
    argvalue0 := rpc.NewISource()
    err164 := argvalue0.Read(context.Background(), jsProt163)
    if err164 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapExecutorTo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupBy requires 2 args")
      flag.Usage()
    }
    arg165 := flag.Arg(1)
    mbTrans166 := thrift.NewTMemoryBufferLen(len(arg165))
    defer mbTrans166.Close()
    _, err167 := mbTrans166.WriteString(arg165)
    if err167 != nil {
      Usage()
      return
    }
    factory168 := thrift.NewTJSONProtocolFactory()
    jsProt169 := factory168.GetProtocol(mbTrans166)
    argvalue0 := rpc.NewISource()
    err170 := argvalue0.Read(context.Background(), jsProt169)
    if err170 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err171 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err171 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sort requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.Sort(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sort2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sort2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1, err174 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err174 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Sort2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortBy requires 2 args")
      flag.Usage()
    }
    arg175 := flag.Arg(1)
    mbTrans176 := thrift.NewTMemoryBufferLen(len(arg175))
    defer mbTrans176.Close()
    _, err177 := mbTrans176.WriteString(arg175)
    if err177 != nil {
      Usage()
      return
    }
    factory178 := thrift.NewTJSONProtocolFactory()
    jsProt179 := factory178.GetProtocol(mbTrans176)
    argvalue0 := rpc.NewISource()
    err180 := argvalue0.Read(context.Background(), jsProt179)
    if err180 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortBy3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortBy3 requires 3 args")
      flag.Usage()
    }
    arg182 := flag.Arg(1)
    mbTrans183 := thrift.NewTMemoryBufferLen(len(arg182))
    defer mbTrans183.Close()
    _, err184 := mbTrans183.WriteString(arg182)
    if err184 != nil {
      Usage()
      return
    }
    factory185 := thrift.NewTJSONProtocolFactory()
    jsProt186 := factory185.GetProtocol(mbTrans183)
    argvalue0 := rpc.NewISource()
    err187 := argvalue0.Read(context.Background(), jsProt186)
    if err187 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err189 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err189 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortBy3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "union_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Union_ requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.Union_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "union2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Union2 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    arg194 := flag.Arg(3)
    mbTrans195 := thrift.NewTMemoryBufferLen(len(arg194))
    defer mbTrans195.Close()
    _, err196 := mbTrans195.WriteString(arg194)
    if err196 != nil {
      Usage()
      return
    }
    factory197 := thrift.NewTJSONProtocolFactory()
    jsProt198 := factory197.GetProtocol(mbTrans195)
    argvalue2 := rpc.NewISource()
    err199 := argvalue2.Read(context.Background(), jsProt198)
    if err199 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Union2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Join requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err201 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err201 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Join(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "join3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err203 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err203 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg204 := flag.Arg(3)
    mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
    defer mbTrans205.Close()
    _, err206 := mbTrans205.WriteString(arg204)
    if err206 != nil {
      Usage()
      return
    }
    factory207 := thrift.NewTJSONProtocolFactory()
    jsProt208 := factory207.GetProtocol(mbTrans205)
    argvalue2 := rpc.NewISource()
    err209 := argvalue2.Read(context.Background(), jsProt208)
    if err209 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "distinct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Distinct requires 1 args")
      flag.Usage()
    }
    argvalue0, err210 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err210 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Distinct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "distinct2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2 requires 2 args")
      flag.Usage()
    }
    argvalue0, err211 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err211 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg212 := flag.Arg(2)
    mbTrans213 := thrift.NewTMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewTJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue1 := rpc.NewISource()
    err217 := argvalue1.Read(context.Background(), jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "repartition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Repartition requires 3 args")
      flag.Usage()
    }
    argvalue0, err218 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err218 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.Repartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionByRandom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionByRandom requires 1 args")
      flag.Usage()
    }
    argvalue0, err221 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PartitionByRandom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitionByHash":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionByHash requires 1 args")
      flag.Usage()
    }
    argvalue0, err222 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err222 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PartitionByHash(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitionBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionBy requires 2 args")
      flag.Usage()
    }
    arg223 := flag.Arg(1)
    mbTrans224 := thrift.NewTMemoryBufferLen(len(arg223))
    defer mbTrans224.Close()
    _, err225 := mbTrans224.WriteString(arg223)
    if err225 != nil {
      Usage()
      return
    }
    factory226 := thrift.NewTJSONProtocolFactory()
    jsProt227 := factory226.GetProtocol(mbTrans224)
    argvalue0 := rpc.NewISource()
    err228 := argvalue0.Read(context.Background(), jsProt227)
    if err228 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err229 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err229 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "flatMapValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FlatMapValues requires 1 args")
      flag.Usage()
    }
    arg230 := flag.Arg(1)
    mbTrans231 := thrift.NewTMemoryBufferLen(len(arg230))
    defer mbTrans231.Close()
    _, err232 := mbTrans231.WriteString(arg230)
    if err232 != nil {
      Usage()
      return
    }
    factory233 := thrift.NewTJSONProtocolFactory()
    jsProt234 := factory233.GetProtocol(mbTrans231)
    argvalue0 := rpc.NewISource()
    err235 := argvalue0.Read(context.Background(), jsProt234)
    if err235 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FlatMapValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapValues requires 1 args")
      flag.Usage()
    }
    arg236 := flag.Arg(1)
    mbTrans237 := thrift.NewTMemoryBufferLen(len(arg236))
    defer mbTrans237.Close()
    _, err238 := mbTrans237.WriteString(arg236)
    if err238 != nil {
      Usage()
      return
    }
    factory239 := thrift.NewTJSONProtocolFactory()
    jsProt240 := factory239.GetProtocol(mbTrans237)
    argvalue0 := rpc.NewISource()
    err241 := argvalue0.Read(context.Background(), jsProt240)
    if err241 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GroupByKey requires 1 args")
      flag.Usage()
    }
    argvalue0, err242 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err242 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GroupByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2 requires 2 args")
      flag.Usage()
    }
    argvalue0, err243 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err243 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg244 := flag.Arg(2)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil {
      Usage()
      return
    }
    factory247 := thrift.NewTJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    argvalue1 := rpc.NewISource()
    err249 := argvalue1.Read(context.Background(), jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reduceByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReduceByKey requires 3 args")
      flag.Usage()
    }
    arg250 := flag.Arg(1)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil {
      Usage()
      return
    }
    factory253 := thrift.NewTJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    argvalue0 := rpc.NewISource()
    err255 := argvalue0.Read(context.Background(), jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err256 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err256 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.ReduceByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AggregateByKey requires 3 args")
      flag.Usage()
    }
    arg258 := flag.Arg(1)
    mbTrans259 := thrift.NewTMemoryBufferLen(len(arg258))
    defer mbTrans259.Close()
    _, err260 := mbTrans259.WriteString(arg258)
    if err260 != nil {
      Usage()
      return
    }
    factory261 := thrift.NewTJSONProtocolFactory()
    jsProt262 := factory261.GetProtocol(mbTrans259)
    argvalue0 := rpc.NewISource()
    err263 := argvalue0.Read(context.Background(), jsProt262)
    if err263 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg264 := flag.Arg(2)
    mbTrans265 := thrift.NewTMemoryBufferLen(len(arg264))
    defer mbTrans265.Close()
    _, err266 := mbTrans265.WriteString(arg264)
    if err266 != nil {
      Usage()
      return
    }
    factory267 := thrift.NewTJSONProtocolFactory()
    jsProt268 := factory267.GetProtocol(mbTrans265)
    argvalue1 := rpc.NewISource()
    err269 := argvalue1.Read(context.Background(), jsProt268)
    if err269 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err270 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err270 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AggregateByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4 requires 4 args")
      flag.Usage()
    }
    arg271 := flag.Arg(1)
    mbTrans272 := thrift.NewTMemoryBufferLen(len(arg271))
    defer mbTrans272.Close()
    _, err273 := mbTrans272.WriteString(arg271)
    if err273 != nil {
      Usage()
      return
    }
    factory274 := thrift.NewTJSONProtocolFactory()
    jsProt275 := factory274.GetProtocol(mbTrans272)
    argvalue0 := rpc.NewISource()
    err276 := argvalue0.Read(context.Background(), jsProt275)
    if err276 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg277 := flag.Arg(2)
    mbTrans278 := thrift.NewTMemoryBufferLen(len(arg277))
    defer mbTrans278.Close()
    _, err279 := mbTrans278.WriteString(arg277)
    if err279 != nil {
      Usage()
      return
    }
    factory280 := thrift.NewTJSONProtocolFactory()
    jsProt281 := factory280.GetProtocol(mbTrans278)
    argvalue1 := rpc.NewISource()
    err282 := argvalue1.Read(context.Background(), jsProt281)
    if err282 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg283 := flag.Arg(3)
    mbTrans284 := thrift.NewTMemoryBufferLen(len(arg283))
    defer mbTrans284.Close()
    _, err285 := mbTrans284.WriteString(arg283)
    if err285 != nil {
      Usage()
      return
    }
    factory286 := thrift.NewTJSONProtocolFactory()
    jsProt287 := factory286.GetProtocol(mbTrans284)
    argvalue2 := rpc.NewISource()
    err288 := argvalue2.Read(context.Background(), jsProt287)
    if err288 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err289 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err289 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "foldByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FoldByKey requires 4 args")
      flag.Usage()
    }
    arg290 := flag.Arg(1)
    mbTrans291 := thrift.NewTMemoryBufferLen(len(arg290))
    defer mbTrans291.Close()
    _, err292 := mbTrans291.WriteString(arg290)
    if err292 != nil {
      Usage()
      return
    }
    factory293 := thrift.NewTJSONProtocolFactory()
    jsProt294 := factory293.GetProtocol(mbTrans291)
    argvalue0 := rpc.NewISource()
    err295 := argvalue0.Read(context.Background(), jsProt294)
    if err295 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg296 := flag.Arg(2)
    mbTrans297 := thrift.NewTMemoryBufferLen(len(arg296))
    defer mbTrans297.Close()
    _, err298 := mbTrans297.WriteString(arg296)
    if err298 != nil {
      Usage()
      return
    }
    factory299 := thrift.NewTJSONProtocolFactory()
    jsProt300 := factory299.GetProtocol(mbTrans297)
    argvalue1 := rpc.NewISource()
    err301 := argvalue1.Read(context.Background(), jsProt300)
    if err301 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err302 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err302 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.FoldByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sortByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SortByKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.SortByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sortByKey2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey2a requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1, err306 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err306 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SortByKey2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey2b requires 2 args")
      flag.Usage()
    }
    arg307 := flag.Arg(1)
    mbTrans308 := thrift.NewTMemoryBufferLen(len(arg307))
    defer mbTrans308.Close()
    _, err309 := mbTrans308.WriteString(arg307)
    if err309 != nil {
      Usage()
      return
    }
    factory310 := thrift.NewTJSONProtocolFactory()
    jsProt311 := factory310.GetProtocol(mbTrans308)
    argvalue0 := rpc.NewISource()
    err312 := argvalue0.Read(context.Background(), jsProt311)
    if err312 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortByKey2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3 requires 3 args")
      flag.Usage()
    }
    arg314 := flag.Arg(1)
    mbTrans315 := thrift.NewTMemoryBufferLen(len(arg314))
    defer mbTrans315.Close()
    _, err316 := mbTrans315.WriteString(arg314)
    if err316 != nil {
      Usage()
      return
    }
    factory317 := thrift.NewTJSONProtocolFactory()
    jsProt318 := factory317.GetProtocol(mbTrans315)
    argvalue0 := rpc.NewISource()
    err319 := argvalue0.Read(context.Background(), jsProt318)
    if err319 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err321 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err321 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortByKey3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
