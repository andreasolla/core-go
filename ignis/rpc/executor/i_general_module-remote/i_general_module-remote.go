// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/executor"
)

var _ = rpc.GoUnusedProtection__
var _ = executor.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void executeTo(ISource src)")
  fmt.Fprintln(os.Stderr, "  void map_(ISource src)")
  fmt.Fprintln(os.Stderr, "  void filter(ISource src)")
  fmt.Fprintln(os.Stderr, "  void flatmap(ISource src)")
  fmt.Fprintln(os.Stderr, "  void keyBy(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapWithIndex(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapPartitions(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapPartitionsWithIndex(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapExecutor(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapExecutorTo(ISource src)")
  fmt.Fprintln(os.Stderr, "  void groupBy(ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sort(bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sort2(bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sortBy(ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortBy3(ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void union_(string other, bool preserveOrder)")
  fmt.Fprintln(os.Stderr, "  void union2(string other, bool preserveOrder, ISource src)")
  fmt.Fprintln(os.Stderr, "  void join(string other, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void join3(string other, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void distinct(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void distinct2(i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void repartition(i64 numPartitions, bool preserveOrdering, bool global_)")
  fmt.Fprintln(os.Stderr, "  void partitionByRandom(i64 numPartitions, i32 seed)")
  fmt.Fprintln(os.Stderr, "  void partitionByHash(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void partitionBy(ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void flatMapValues(ISource src)")
  fmt.Fprintln(os.Stderr, "  void mapValues(ISource src)")
  fmt.Fprintln(os.Stderr, "  void groupByKey(i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void groupByKey2(i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  void reduceByKey(ISource src, i64 numPartitions, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  void aggregateByKey(ISource zero, ISource seqOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void aggregateByKey4(ISource zero, ISource seqOp, ISource combOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void foldByKey(ISource zero, ISource src, i64 numPartitions, bool localFold)")
  fmt.Fprintln(os.Stderr, "  void sortByKey(bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortByKey2a(bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  void sortByKey2b(ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  void sortByKey3(ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := executor.NewIGeneralModuleClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "executeTo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteTo requires 1 args")
      flag.Usage()
    }
    arg113 := flag.Arg(1)
    mbTrans114 := thrift.NewTMemoryBufferLen(len(arg113))
    defer mbTrans114.Close()
    _, err115 := mbTrans114.WriteString(arg113)
    if err115 != nil {
      Usage()
      return
    }
    factory116 := thrift.NewTJSONProtocolFactory()
    jsProt117 := factory116.GetProtocol(mbTrans114)
    argvalue0 := rpc.NewISource()
    err118 := argvalue0.Read(context.Background(), jsProt117)
    if err118 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteTo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "map_":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Map_ requires 1 args")
      flag.Usage()
    }
    arg119 := flag.Arg(1)
    mbTrans120 := thrift.NewTMemoryBufferLen(len(arg119))
    defer mbTrans120.Close()
    _, err121 := mbTrans120.WriteString(arg119)
    if err121 != nil {
      Usage()
      return
    }
    factory122 := thrift.NewTJSONProtocolFactory()
    jsProt123 := factory122.GetProtocol(mbTrans120)
    argvalue0 := rpc.NewISource()
    err124 := argvalue0.Read(context.Background(), jsProt123)
    if err124 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Map_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "filter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Filter requires 1 args")
      flag.Usage()
    }
    arg125 := flag.Arg(1)
    mbTrans126 := thrift.NewTMemoryBufferLen(len(arg125))
    defer mbTrans126.Close()
    _, err127 := mbTrans126.WriteString(arg125)
    if err127 != nil {
      Usage()
      return
    }
    factory128 := thrift.NewTJSONProtocolFactory()
    jsProt129 := factory128.GetProtocol(mbTrans126)
    argvalue0 := rpc.NewISource()
    err130 := argvalue0.Read(context.Background(), jsProt129)
    if err130 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Filter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "flatmap":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Flatmap requires 1 args")
      flag.Usage()
    }
    arg131 := flag.Arg(1)
    mbTrans132 := thrift.NewTMemoryBufferLen(len(arg131))
    defer mbTrans132.Close()
    _, err133 := mbTrans132.WriteString(arg131)
    if err133 != nil {
      Usage()
      return
    }
    factory134 := thrift.NewTJSONProtocolFactory()
    jsProt135 := factory134.GetProtocol(mbTrans132)
    argvalue0 := rpc.NewISource()
    err136 := argvalue0.Read(context.Background(), jsProt135)
    if err136 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Flatmap(context.Background(), value0))
    fmt.Print("\n")
    break
  case "keyBy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "KeyBy requires 1 args")
      flag.Usage()
    }
    arg137 := flag.Arg(1)
    mbTrans138 := thrift.NewTMemoryBufferLen(len(arg137))
    defer mbTrans138.Close()
    _, err139 := mbTrans138.WriteString(arg137)
    if err139 != nil {
      Usage()
      return
    }
    factory140 := thrift.NewTJSONProtocolFactory()
    jsProt141 := factory140.GetProtocol(mbTrans138)
    argvalue0 := rpc.NewISource()
    err142 := argvalue0.Read(context.Background(), jsProt141)
    if err142 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.KeyBy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapWithIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapWithIndex requires 1 args")
      flag.Usage()
    }
    arg143 := flag.Arg(1)
    mbTrans144 := thrift.NewTMemoryBufferLen(len(arg143))
    defer mbTrans144.Close()
    _, err145 := mbTrans144.WriteString(arg143)
    if err145 != nil {
      Usage()
      return
    }
    factory146 := thrift.NewTJSONProtocolFactory()
    jsProt147 := factory146.GetProtocol(mbTrans144)
    argvalue0 := rpc.NewISource()
    err148 := argvalue0.Read(context.Background(), jsProt147)
    if err148 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapWithIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapPartitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapPartitions requires 1 args")
      flag.Usage()
    }
    arg149 := flag.Arg(1)
    mbTrans150 := thrift.NewTMemoryBufferLen(len(arg149))
    defer mbTrans150.Close()
    _, err151 := mbTrans150.WriteString(arg149)
    if err151 != nil {
      Usage()
      return
    }
    factory152 := thrift.NewTJSONProtocolFactory()
    jsProt153 := factory152.GetProtocol(mbTrans150)
    argvalue0 := rpc.NewISource()
    err154 := argvalue0.Read(context.Background(), jsProt153)
    if err154 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapPartitionsWithIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapPartitionsWithIndex requires 1 args")
      flag.Usage()
    }
    arg155 := flag.Arg(1)
    mbTrans156 := thrift.NewTMemoryBufferLen(len(arg155))
    defer mbTrans156.Close()
    _, err157 := mbTrans156.WriteString(arg155)
    if err157 != nil {
      Usage()
      return
    }
    factory158 := thrift.NewTJSONProtocolFactory()
    jsProt159 := factory158.GetProtocol(mbTrans156)
    argvalue0 := rpc.NewISource()
    err160 := argvalue0.Read(context.Background(), jsProt159)
    if err160 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapPartitionsWithIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapExecutor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapExecutor requires 1 args")
      flag.Usage()
    }
    arg161 := flag.Arg(1)
    mbTrans162 := thrift.NewTMemoryBufferLen(len(arg161))
    defer mbTrans162.Close()
    _, err163 := mbTrans162.WriteString(arg161)
    if err163 != nil {
      Usage()
      return
    }
    factory164 := thrift.NewTJSONProtocolFactory()
    jsProt165 := factory164.GetProtocol(mbTrans162)
    argvalue0 := rpc.NewISource()
    err166 := argvalue0.Read(context.Background(), jsProt165)
    if err166 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapExecutor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapExecutorTo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapExecutorTo requires 1 args")
      flag.Usage()
    }
    arg167 := flag.Arg(1)
    mbTrans168 := thrift.NewTMemoryBufferLen(len(arg167))
    defer mbTrans168.Close()
    _, err169 := mbTrans168.WriteString(arg167)
    if err169 != nil {
      Usage()
      return
    }
    factory170 := thrift.NewTJSONProtocolFactory()
    jsProt171 := factory170.GetProtocol(mbTrans168)
    argvalue0 := rpc.NewISource()
    err172 := argvalue0.Read(context.Background(), jsProt171)
    if err172 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapExecutorTo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupBy requires 2 args")
      flag.Usage()
    }
    arg173 := flag.Arg(1)
    mbTrans174 := thrift.NewTMemoryBufferLen(len(arg173))
    defer mbTrans174.Close()
    _, err175 := mbTrans174.WriteString(arg173)
    if err175 != nil {
      Usage()
      return
    }
    factory176 := thrift.NewTJSONProtocolFactory()
    jsProt177 := factory176.GetProtocol(mbTrans174)
    argvalue0 := rpc.NewISource()
    err178 := argvalue0.Read(context.Background(), jsProt177)
    if err178 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err179 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err179 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sort":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sort requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.Sort(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sort2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sort2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1, err182 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err182 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Sort2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortBy requires 2 args")
      flag.Usage()
    }
    arg183 := flag.Arg(1)
    mbTrans184 := thrift.NewTMemoryBufferLen(len(arg183))
    defer mbTrans184.Close()
    _, err185 := mbTrans184.WriteString(arg183)
    if err185 != nil {
      Usage()
      return
    }
    factory186 := thrift.NewTJSONProtocolFactory()
    jsProt187 := factory186.GetProtocol(mbTrans184)
    argvalue0 := rpc.NewISource()
    err188 := argvalue0.Read(context.Background(), jsProt187)
    if err188 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortBy3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortBy3 requires 3 args")
      flag.Usage()
    }
    arg190 := flag.Arg(1)
    mbTrans191 := thrift.NewTMemoryBufferLen(len(arg190))
    defer mbTrans191.Close()
    _, err192 := mbTrans191.WriteString(arg190)
    if err192 != nil {
      Usage()
      return
    }
    factory193 := thrift.NewTJSONProtocolFactory()
    jsProt194 := factory193.GetProtocol(mbTrans191)
    argvalue0 := rpc.NewISource()
    err195 := argvalue0.Read(context.Background(), jsProt194)
    if err195 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err197 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err197 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortBy3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "union_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Union_ requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.Union_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "union2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Union2 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    arg202 := flag.Arg(3)
    mbTrans203 := thrift.NewTMemoryBufferLen(len(arg202))
    defer mbTrans203.Close()
    _, err204 := mbTrans203.WriteString(arg202)
    if err204 != nil {
      Usage()
      return
    }
    factory205 := thrift.NewTJSONProtocolFactory()
    jsProt206 := factory205.GetProtocol(mbTrans203)
    argvalue2 := rpc.NewISource()
    err207 := argvalue2.Read(context.Background(), jsProt206)
    if err207 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Union2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Join requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err209 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err209 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Join(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "join3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err211 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err211 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg212 := flag.Arg(3)
    mbTrans213 := thrift.NewTMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewTJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue2 := rpc.NewISource()
    err217 := argvalue2.Read(context.Background(), jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "distinct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Distinct requires 1 args")
      flag.Usage()
    }
    argvalue0, err218 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err218 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Distinct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "distinct2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2 requires 2 args")
      flag.Usage()
    }
    argvalue0, err219 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err219 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg220 := flag.Arg(2)
    mbTrans221 := thrift.NewTMemoryBufferLen(len(arg220))
    defer mbTrans221.Close()
    _, err222 := mbTrans221.WriteString(arg220)
    if err222 != nil {
      Usage()
      return
    }
    factory223 := thrift.NewTJSONProtocolFactory()
    jsProt224 := factory223.GetProtocol(mbTrans221)
    argvalue1 := rpc.NewISource()
    err225 := argvalue1.Read(context.Background(), jsProt224)
    if err225 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "repartition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Repartition requires 3 args")
      flag.Usage()
    }
    argvalue0, err226 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err226 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.Repartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionByRandom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionByRandom requires 2 args")
      flag.Usage()
    }
    argvalue0, err229 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err229 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err230 := (strconv.Atoi(flag.Arg(2)))
    if err230 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.PartitionByRandom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionByHash":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionByHash requires 1 args")
      flag.Usage()
    }
    argvalue0, err231 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err231 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PartitionByHash(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitionBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionBy requires 2 args")
      flag.Usage()
    }
    arg232 := flag.Arg(1)
    mbTrans233 := thrift.NewTMemoryBufferLen(len(arg232))
    defer mbTrans233.Close()
    _, err234 := mbTrans233.WriteString(arg232)
    if err234 != nil {
      Usage()
      return
    }
    factory235 := thrift.NewTJSONProtocolFactory()
    jsProt236 := factory235.GetProtocol(mbTrans233)
    argvalue0 := rpc.NewISource()
    err237 := argvalue0.Read(context.Background(), jsProt236)
    if err237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err238 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err238 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "flatMapValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FlatMapValues requires 1 args")
      flag.Usage()
    }
    arg239 := flag.Arg(1)
    mbTrans240 := thrift.NewTMemoryBufferLen(len(arg239))
    defer mbTrans240.Close()
    _, err241 := mbTrans240.WriteString(arg239)
    if err241 != nil {
      Usage()
      return
    }
    factory242 := thrift.NewTJSONProtocolFactory()
    jsProt243 := factory242.GetProtocol(mbTrans240)
    argvalue0 := rpc.NewISource()
    err244 := argvalue0.Read(context.Background(), jsProt243)
    if err244 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FlatMapValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mapValues":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapValues requires 1 args")
      flag.Usage()
    }
    arg245 := flag.Arg(1)
    mbTrans246 := thrift.NewTMemoryBufferLen(len(arg245))
    defer mbTrans246.Close()
    _, err247 := mbTrans246.WriteString(arg245)
    if err247 != nil {
      Usage()
      return
    }
    factory248 := thrift.NewTJSONProtocolFactory()
    jsProt249 := factory248.GetProtocol(mbTrans246)
    argvalue0 := rpc.NewISource()
    err250 := argvalue0.Read(context.Background(), jsProt249)
    if err250 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GroupByKey requires 1 args")
      flag.Usage()
    }
    argvalue0, err251 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err251 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GroupByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2 requires 2 args")
      flag.Usage()
    }
    argvalue0, err252 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err252 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg253 := flag.Arg(2)
    mbTrans254 := thrift.NewTMemoryBufferLen(len(arg253))
    defer mbTrans254.Close()
    _, err255 := mbTrans254.WriteString(arg253)
    if err255 != nil {
      Usage()
      return
    }
    factory256 := thrift.NewTJSONProtocolFactory()
    jsProt257 := factory256.GetProtocol(mbTrans254)
    argvalue1 := rpc.NewISource()
    err258 := argvalue1.Read(context.Background(), jsProt257)
    if err258 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reduceByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReduceByKey requires 3 args")
      flag.Usage()
    }
    arg259 := flag.Arg(1)
    mbTrans260 := thrift.NewTMemoryBufferLen(len(arg259))
    defer mbTrans260.Close()
    _, err261 := mbTrans260.WriteString(arg259)
    if err261 != nil {
      Usage()
      return
    }
    factory262 := thrift.NewTJSONProtocolFactory()
    jsProt263 := factory262.GetProtocol(mbTrans260)
    argvalue0 := rpc.NewISource()
    err264 := argvalue0.Read(context.Background(), jsProt263)
    if err264 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err265 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err265 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.ReduceByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AggregateByKey requires 3 args")
      flag.Usage()
    }
    arg267 := flag.Arg(1)
    mbTrans268 := thrift.NewTMemoryBufferLen(len(arg267))
    defer mbTrans268.Close()
    _, err269 := mbTrans268.WriteString(arg267)
    if err269 != nil {
      Usage()
      return
    }
    factory270 := thrift.NewTJSONProtocolFactory()
    jsProt271 := factory270.GetProtocol(mbTrans268)
    argvalue0 := rpc.NewISource()
    err272 := argvalue0.Read(context.Background(), jsProt271)
    if err272 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg273 := flag.Arg(2)
    mbTrans274 := thrift.NewTMemoryBufferLen(len(arg273))
    defer mbTrans274.Close()
    _, err275 := mbTrans274.WriteString(arg273)
    if err275 != nil {
      Usage()
      return
    }
    factory276 := thrift.NewTJSONProtocolFactory()
    jsProt277 := factory276.GetProtocol(mbTrans274)
    argvalue1 := rpc.NewISource()
    err278 := argvalue1.Read(context.Background(), jsProt277)
    if err278 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err279 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err279 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AggregateByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4 requires 4 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := rpc.NewISource()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg286 := flag.Arg(2)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue1 := rpc.NewISource()
    err291 := argvalue1.Read(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg292 := flag.Arg(3)
    mbTrans293 := thrift.NewTMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil {
      Usage()
      return
    }
    factory295 := thrift.NewTJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    argvalue2 := rpc.NewISource()
    err297 := argvalue2.Read(context.Background(), jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err298 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err298 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "foldByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FoldByKey requires 4 args")
      flag.Usage()
    }
    arg299 := flag.Arg(1)
    mbTrans300 := thrift.NewTMemoryBufferLen(len(arg299))
    defer mbTrans300.Close()
    _, err301 := mbTrans300.WriteString(arg299)
    if err301 != nil {
      Usage()
      return
    }
    factory302 := thrift.NewTJSONProtocolFactory()
    jsProt303 := factory302.GetProtocol(mbTrans300)
    argvalue0 := rpc.NewISource()
    err304 := argvalue0.Read(context.Background(), jsProt303)
    if err304 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg305 := flag.Arg(2)
    mbTrans306 := thrift.NewTMemoryBufferLen(len(arg305))
    defer mbTrans306.Close()
    _, err307 := mbTrans306.WriteString(arg305)
    if err307 != nil {
      Usage()
      return
    }
    factory308 := thrift.NewTJSONProtocolFactory()
    jsProt309 := factory308.GetProtocol(mbTrans306)
    argvalue1 := rpc.NewISource()
    err310 := argvalue1.Read(context.Background(), jsProt309)
    if err310 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err311 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err311 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.FoldByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sortByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SortByKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.SortByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sortByKey2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey2a requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1, err315 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err315 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SortByKey2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey2b requires 2 args")
      flag.Usage()
    }
    arg316 := flag.Arg(1)
    mbTrans317 := thrift.NewTMemoryBufferLen(len(arg316))
    defer mbTrans317.Close()
    _, err318 := mbTrans317.WriteString(arg316)
    if err318 != nil {
      Usage()
      return
    }
    factory319 := thrift.NewTJSONProtocolFactory()
    jsProt320 := factory319.GetProtocol(mbTrans317)
    argvalue0 := rpc.NewISource()
    err321 := argvalue0.Read(context.Background(), jsProt320)
    if err321 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortByKey2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3 requires 3 args")
      flag.Usage()
    }
    arg323 := flag.Arg(1)
    mbTrans324 := thrift.NewTMemoryBufferLen(len(arg323))
    defer mbTrans324.Close()
    _, err325 := mbTrans324.WriteString(arg323)
    if err325 != nil {
      Usage()
      return
    }
    factory326 := thrift.NewTJSONProtocolFactory()
    jsProt327 := factory326.GetProtocol(mbTrans324)
    argvalue0 := rpc.NewISource()
    err328 := argvalue0.Read(context.Background(), jsProt327)
    if err328 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err330 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err330 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortByKey3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
