// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/driver"
)

var _ = rpc.GoUnusedProtection__
var _ = driver.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void start(IWorkerId id)")
  fmt.Fprintln(os.Stderr, "  void destroy(IWorkerId id)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance(i64 id, string type)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance3a(i64 id, string name, string type)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance3b(i64 id, string type, i32 cores)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance4(i64 id, string name, string type, i32 cores)")
  fmt.Fprintln(os.Stderr, "  void setName(IWorkerId id, string name)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId parallelize(IWorkerId id, i64 dataId, i64 partitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId parallelize4(IWorkerId id, i64 dataId, i64 partitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame(IWorkerId id, IDataFrameId data)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame3a(IWorkerId id, IDataFrameId data, i64 partitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame3b(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame4(IWorkerId id, IDataFrameId data, i64 partitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId textFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId textFile3(IWorkerId id, string path, i64 minPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionObjectFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionObjectFile3(IWorkerId id, string path, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionTextFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionJsonFile3a(IWorkerId id, string path, bool objectMapping)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionJsonFile3b(IWorkerId id, string path, ISource src)")
  fmt.Fprintln(os.Stderr, "  void loadLibrary(IWorkerId id, string lib)")
  fmt.Fprintln(os.Stderr, "  void execute(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId executeTo(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void voidCall(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void voidCall3(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId call(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId call3(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := driver.NewIWorkerServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "start":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Start requires 1 args")
      flag.Usage()
    }
    arg83 := flag.Arg(1)
    mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
    defer mbTrans84.Close()
    _, err85 := mbTrans84.WriteString(arg83)
    if err85 != nil {
      Usage()
      return
    }
    factory86 := thrift.NewTJSONProtocolFactory()
    jsProt87 := factory86.GetProtocol(mbTrans84)
    argvalue0 := driver.NewIWorkerId()
    err88 := argvalue0.Read(context.Background(), jsProt87)
    if err88 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Start(context.Background(), value0))
    fmt.Print("\n")
    break
  case "destroy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Destroy requires 1 args")
      flag.Usage()
    }
    arg89 := flag.Arg(1)
    mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
    defer mbTrans90.Close()
    _, err91 := mbTrans90.WriteString(arg89)
    if err91 != nil {
      Usage()
      return
    }
    factory92 := thrift.NewTJSONProtocolFactory()
    jsProt93 := factory92.GetProtocol(mbTrans90)
    argvalue0 := driver.NewIWorkerId()
    err94 := argvalue0.Read(context.Background(), jsProt93)
    if err94 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Destroy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "newInstance":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NewInstance_ requires 2 args")
      flag.Usage()
    }
    argvalue0, err95 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err95 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NewInstance_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "newInstance3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "NewInstance3a_ requires 3 args")
      flag.Usage()
    }
    argvalue0, err97 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err97 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.NewInstance3a_(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "newInstance3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "NewInstance3b_ requires 3 args")
      flag.Usage()
    }
    argvalue0, err100 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err100 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err102 := (strconv.Atoi(flag.Arg(3)))
    if err102 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.NewInstance3b_(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "newInstance4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NewInstance4_ requires 4 args")
      flag.Usage()
    }
    argvalue0, err103 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err103 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err106 := (strconv.Atoi(flag.Arg(4)))
    if err106 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.NewInstance4_(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "setName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetName requires 2 args")
      flag.Usage()
    }
    arg107 := flag.Arg(1)
    mbTrans108 := thrift.NewTMemoryBufferLen(len(arg107))
    defer mbTrans108.Close()
    _, err109 := mbTrans108.WriteString(arg107)
    if err109 != nil {
      Usage()
      return
    }
    factory110 := thrift.NewTJSONProtocolFactory()
    jsProt111 := factory110.GetProtocol(mbTrans108)
    argvalue0 := driver.NewIWorkerId()
    err112 := argvalue0.Read(context.Background(), jsProt111)
    if err112 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "parallelize":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Parallelize requires 3 args")
      flag.Usage()
    }
    arg114 := flag.Arg(1)
    mbTrans115 := thrift.NewTMemoryBufferLen(len(arg114))
    defer mbTrans115.Close()
    _, err116 := mbTrans115.WriteString(arg114)
    if err116 != nil {
      Usage()
      return
    }
    factory117 := thrift.NewTJSONProtocolFactory()
    jsProt118 := factory117.GetProtocol(mbTrans115)
    argvalue0 := driver.NewIWorkerId()
    err119 := argvalue0.Read(context.Background(), jsProt118)
    if err119 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err120 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err120 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err121 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err121 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Parallelize(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "parallelize4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Parallelize4 requires 4 args")
      flag.Usage()
    }
    arg122 := flag.Arg(1)
    mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
    defer mbTrans123.Close()
    _, err124 := mbTrans123.WriteString(arg122)
    if err124 != nil {
      Usage()
      return
    }
    factory125 := thrift.NewTJSONProtocolFactory()
    jsProt126 := factory125.GetProtocol(mbTrans123)
    argvalue0 := driver.NewIWorkerId()
    err127 := argvalue0.Read(context.Background(), jsProt126)
    if err127 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err128 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err128 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err129 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err129 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg130 := flag.Arg(4)
    mbTrans131 := thrift.NewTMemoryBufferLen(len(arg130))
    defer mbTrans131.Close()
    _, err132 := mbTrans131.WriteString(arg130)
    if err132 != nil {
      Usage()
      return
    }
    factory133 := thrift.NewTJSONProtocolFactory()
    jsProt134 := factory133.GetProtocol(mbTrans131)
    argvalue3 := rpc.NewISource()
    err135 := argvalue3.Read(context.Background(), jsProt134)
    if err135 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Parallelize4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "importDataFrame":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame requires 2 args")
      flag.Usage()
    }
    arg136 := flag.Arg(1)
    mbTrans137 := thrift.NewTMemoryBufferLen(len(arg136))
    defer mbTrans137.Close()
    _, err138 := mbTrans137.WriteString(arg136)
    if err138 != nil {
      Usage()
      return
    }
    factory139 := thrift.NewTJSONProtocolFactory()
    jsProt140 := factory139.GetProtocol(mbTrans137)
    argvalue0 := driver.NewIWorkerId()
    err141 := argvalue0.Read(context.Background(), jsProt140)
    if err141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg142 := flag.Arg(2)
    mbTrans143 := thrift.NewTMemoryBufferLen(len(arg142))
    defer mbTrans143.Close()
    _, err144 := mbTrans143.WriteString(arg142)
    if err144 != nil {
      Usage()
      return
    }
    factory145 := thrift.NewTJSONProtocolFactory()
    jsProt146 := factory145.GetProtocol(mbTrans143)
    argvalue1 := driver.NewIDataFrameId()
    err147 := argvalue1.Read(context.Background(), jsProt146)
    if err147 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ImportDataFrame(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "importDataFrame3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame3a requires 3 args")
      flag.Usage()
    }
    arg148 := flag.Arg(1)
    mbTrans149 := thrift.NewTMemoryBufferLen(len(arg148))
    defer mbTrans149.Close()
    _, err150 := mbTrans149.WriteString(arg148)
    if err150 != nil {
      Usage()
      return
    }
    factory151 := thrift.NewTJSONProtocolFactory()
    jsProt152 := factory151.GetProtocol(mbTrans149)
    argvalue0 := driver.NewIWorkerId()
    err153 := argvalue0.Read(context.Background(), jsProt152)
    if err153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg154 := flag.Arg(2)
    mbTrans155 := thrift.NewTMemoryBufferLen(len(arg154))
    defer mbTrans155.Close()
    _, err156 := mbTrans155.WriteString(arg154)
    if err156 != nil {
      Usage()
      return
    }
    factory157 := thrift.NewTJSONProtocolFactory()
    jsProt158 := factory157.GetProtocol(mbTrans155)
    argvalue1 := driver.NewIDataFrameId()
    err159 := argvalue1.Read(context.Background(), jsProt158)
    if err159 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err160 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err160 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ImportDataFrame3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "importDataFrame3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame3b requires 3 args")
      flag.Usage()
    }
    arg161 := flag.Arg(1)
    mbTrans162 := thrift.NewTMemoryBufferLen(len(arg161))
    defer mbTrans162.Close()
    _, err163 := mbTrans162.WriteString(arg161)
    if err163 != nil {
      Usage()
      return
    }
    factory164 := thrift.NewTJSONProtocolFactory()
    jsProt165 := factory164.GetProtocol(mbTrans162)
    argvalue0 := driver.NewIWorkerId()
    err166 := argvalue0.Read(context.Background(), jsProt165)
    if err166 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg167 := flag.Arg(2)
    mbTrans168 := thrift.NewTMemoryBufferLen(len(arg167))
    defer mbTrans168.Close()
    _, err169 := mbTrans168.WriteString(arg167)
    if err169 != nil {
      Usage()
      return
    }
    factory170 := thrift.NewTJSONProtocolFactory()
    jsProt171 := factory170.GetProtocol(mbTrans168)
    argvalue1 := driver.NewIDataFrameId()
    err172 := argvalue1.Read(context.Background(), jsProt171)
    if err172 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg173 := flag.Arg(3)
    mbTrans174 := thrift.NewTMemoryBufferLen(len(arg173))
    defer mbTrans174.Close()
    _, err175 := mbTrans174.WriteString(arg173)
    if err175 != nil {
      Usage()
      return
    }
    factory176 := thrift.NewTJSONProtocolFactory()
    jsProt177 := factory176.GetProtocol(mbTrans174)
    argvalue2 := rpc.NewISource()
    err178 := argvalue2.Read(context.Background(), jsProt177)
    if err178 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ImportDataFrame3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "importDataFrame4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame4 requires 4 args")
      flag.Usage()
    }
    arg179 := flag.Arg(1)
    mbTrans180 := thrift.NewTMemoryBufferLen(len(arg179))
    defer mbTrans180.Close()
    _, err181 := mbTrans180.WriteString(arg179)
    if err181 != nil {
      Usage()
      return
    }
    factory182 := thrift.NewTJSONProtocolFactory()
    jsProt183 := factory182.GetProtocol(mbTrans180)
    argvalue0 := driver.NewIWorkerId()
    err184 := argvalue0.Read(context.Background(), jsProt183)
    if err184 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg185 := flag.Arg(2)
    mbTrans186 := thrift.NewTMemoryBufferLen(len(arg185))
    defer mbTrans186.Close()
    _, err187 := mbTrans186.WriteString(arg185)
    if err187 != nil {
      Usage()
      return
    }
    factory188 := thrift.NewTJSONProtocolFactory()
    jsProt189 := factory188.GetProtocol(mbTrans186)
    argvalue1 := driver.NewIDataFrameId()
    err190 := argvalue1.Read(context.Background(), jsProt189)
    if err190 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err191 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err191 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg192 := flag.Arg(4)
    mbTrans193 := thrift.NewTMemoryBufferLen(len(arg192))
    defer mbTrans193.Close()
    _, err194 := mbTrans193.WriteString(arg192)
    if err194 != nil {
      Usage()
      return
    }
    factory195 := thrift.NewTJSONProtocolFactory()
    jsProt196 := factory195.GetProtocol(mbTrans193)
    argvalue3 := rpc.NewISource()
    err197 := argvalue3.Read(context.Background(), jsProt196)
    if err197 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.ImportDataFrame4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "textFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TextFile requires 2 args")
      flag.Usage()
    }
    arg198 := flag.Arg(1)
    mbTrans199 := thrift.NewTMemoryBufferLen(len(arg198))
    defer mbTrans199.Close()
    _, err200 := mbTrans199.WriteString(arg198)
    if err200 != nil {
      Usage()
      return
    }
    factory201 := thrift.NewTJSONProtocolFactory()
    jsProt202 := factory201.GetProtocol(mbTrans199)
    argvalue0 := driver.NewIWorkerId()
    err203 := argvalue0.Read(context.Background(), jsProt202)
    if err203 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.TextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "textFile3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TextFile3 requires 3 args")
      flag.Usage()
    }
    arg205 := flag.Arg(1)
    mbTrans206 := thrift.NewTMemoryBufferLen(len(arg205))
    defer mbTrans206.Close()
    _, err207 := mbTrans206.WriteString(arg205)
    if err207 != nil {
      Usage()
      return
    }
    factory208 := thrift.NewTJSONProtocolFactory()
    jsProt209 := factory208.GetProtocol(mbTrans206)
    argvalue0 := driver.NewIWorkerId()
    err210 := argvalue0.Read(context.Background(), jsProt209)
    if err210 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err212 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err212 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TextFile3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionObjectFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionObjectFile requires 2 args")
      flag.Usage()
    }
    arg213 := flag.Arg(1)
    mbTrans214 := thrift.NewTMemoryBufferLen(len(arg213))
    defer mbTrans214.Close()
    _, err215 := mbTrans214.WriteString(arg213)
    if err215 != nil {
      Usage()
      return
    }
    factory216 := thrift.NewTJSONProtocolFactory()
    jsProt217 := factory216.GetProtocol(mbTrans214)
    argvalue0 := driver.NewIWorkerId()
    err218 := argvalue0.Read(context.Background(), jsProt217)
    if err218 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PartitionObjectFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionObjectFile3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionObjectFile3 requires 3 args")
      flag.Usage()
    }
    arg220 := flag.Arg(1)
    mbTrans221 := thrift.NewTMemoryBufferLen(len(arg220))
    defer mbTrans221.Close()
    _, err222 := mbTrans221.WriteString(arg220)
    if err222 != nil {
      Usage()
      return
    }
    factory223 := thrift.NewTJSONProtocolFactory()
    jsProt224 := factory223.GetProtocol(mbTrans221)
    argvalue0 := driver.NewIWorkerId()
    err225 := argvalue0.Read(context.Background(), jsProt224)
    if err225 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg227 := flag.Arg(3)
    mbTrans228 := thrift.NewTMemoryBufferLen(len(arg227))
    defer mbTrans228.Close()
    _, err229 := mbTrans228.WriteString(arg227)
    if err229 != nil {
      Usage()
      return
    }
    factory230 := thrift.NewTJSONProtocolFactory()
    jsProt231 := factory230.GetProtocol(mbTrans228)
    argvalue2 := rpc.NewISource()
    err232 := argvalue2.Read(context.Background(), jsProt231)
    if err232 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionObjectFile3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionTextFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionTextFile requires 2 args")
      flag.Usage()
    }
    arg233 := flag.Arg(1)
    mbTrans234 := thrift.NewTMemoryBufferLen(len(arg233))
    defer mbTrans234.Close()
    _, err235 := mbTrans234.WriteString(arg233)
    if err235 != nil {
      Usage()
      return
    }
    factory236 := thrift.NewTJSONProtocolFactory()
    jsProt237 := factory236.GetProtocol(mbTrans234)
    argvalue0 := driver.NewIWorkerId()
    err238 := argvalue0.Read(context.Background(), jsProt237)
    if err238 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PartitionTextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionJsonFile3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionJsonFile3a requires 3 args")
      flag.Usage()
    }
    arg240 := flag.Arg(1)
    mbTrans241 := thrift.NewTMemoryBufferLen(len(arg240))
    defer mbTrans241.Close()
    _, err242 := mbTrans241.WriteString(arg240)
    if err242 != nil {
      Usage()
      return
    }
    factory243 := thrift.NewTJSONProtocolFactory()
    jsProt244 := factory243.GetProtocol(mbTrans241)
    argvalue0 := driver.NewIWorkerId()
    err245 := argvalue0.Read(context.Background(), jsProt244)
    if err245 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.PartitionJsonFile3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionJsonFile3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionJsonFile3b requires 3 args")
      flag.Usage()
    }
    arg248 := flag.Arg(1)
    mbTrans249 := thrift.NewTMemoryBufferLen(len(arg248))
    defer mbTrans249.Close()
    _, err250 := mbTrans249.WriteString(arg248)
    if err250 != nil {
      Usage()
      return
    }
    factory251 := thrift.NewTJSONProtocolFactory()
    jsProt252 := factory251.GetProtocol(mbTrans249)
    argvalue0 := driver.NewIWorkerId()
    err253 := argvalue0.Read(context.Background(), jsProt252)
    if err253 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg255 := flag.Arg(3)
    mbTrans256 := thrift.NewTMemoryBufferLen(len(arg255))
    defer mbTrans256.Close()
    _, err257 := mbTrans256.WriteString(arg255)
    if err257 != nil {
      Usage()
      return
    }
    factory258 := thrift.NewTJSONProtocolFactory()
    jsProt259 := factory258.GetProtocol(mbTrans256)
    argvalue2 := rpc.NewISource()
    err260 := argvalue2.Read(context.Background(), jsProt259)
    if err260 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionJsonFile3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "loadLibrary":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LoadLibrary requires 2 args")
      flag.Usage()
    }
    arg261 := flag.Arg(1)
    mbTrans262 := thrift.NewTMemoryBufferLen(len(arg261))
    defer mbTrans262.Close()
    _, err263 := mbTrans262.WriteString(arg261)
    if err263 != nil {
      Usage()
      return
    }
    factory264 := thrift.NewTJSONProtocolFactory()
    jsProt265 := factory264.GetProtocol(mbTrans262)
    argvalue0 := driver.NewIWorkerId()
    err266 := argvalue0.Read(context.Background(), jsProt265)
    if err266 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LoadLibrary(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "execute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Execute requires 2 args")
      flag.Usage()
    }
    arg268 := flag.Arg(1)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue0 := driver.NewIWorkerId()
    err273 := argvalue0.Read(context.Background(), jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg274 := flag.Arg(2)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil {
      Usage()
      return
    }
    factory277 := thrift.NewTJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    argvalue1 := rpc.NewISource()
    err279 := argvalue1.Read(context.Background(), jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Execute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "executeTo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteTo requires 2 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := driver.NewIWorkerId()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg286 := flag.Arg(2)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue1 := rpc.NewISource()
    err291 := argvalue1.Read(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteTo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "voidCall":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VoidCall requires 2 args")
      flag.Usage()
    }
    arg292 := flag.Arg(1)
    mbTrans293 := thrift.NewTMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil {
      Usage()
      return
    }
    factory295 := thrift.NewTJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    argvalue0 := driver.NewIWorkerId()
    err297 := argvalue0.Read(context.Background(), jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg298 := flag.Arg(2)
    mbTrans299 := thrift.NewTMemoryBufferLen(len(arg298))
    defer mbTrans299.Close()
    _, err300 := mbTrans299.WriteString(arg298)
    if err300 != nil {
      Usage()
      return
    }
    factory301 := thrift.NewTJSONProtocolFactory()
    jsProt302 := factory301.GetProtocol(mbTrans299)
    argvalue1 := rpc.NewISource()
    err303 := argvalue1.Read(context.Background(), jsProt302)
    if err303 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.VoidCall(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "voidCall3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VoidCall3 requires 3 args")
      flag.Usage()
    }
    arg304 := flag.Arg(1)
    mbTrans305 := thrift.NewTMemoryBufferLen(len(arg304))
    defer mbTrans305.Close()
    _, err306 := mbTrans305.WriteString(arg304)
    if err306 != nil {
      Usage()
      return
    }
    factory307 := thrift.NewTJSONProtocolFactory()
    jsProt308 := factory307.GetProtocol(mbTrans305)
    argvalue0 := driver.NewIWorkerId()
    err309 := argvalue0.Read(context.Background(), jsProt308)
    if err309 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg310 := flag.Arg(2)
    mbTrans311 := thrift.NewTMemoryBufferLen(len(arg310))
    defer mbTrans311.Close()
    _, err312 := mbTrans311.WriteString(arg310)
    if err312 != nil {
      Usage()
      return
    }
    factory313 := thrift.NewTJSONProtocolFactory()
    jsProt314 := factory313.GetProtocol(mbTrans311)
    argvalue1 := driver.NewIDataFrameId()
    err315 := argvalue1.Read(context.Background(), jsProt314)
    if err315 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg316 := flag.Arg(3)
    mbTrans317 := thrift.NewTMemoryBufferLen(len(arg316))
    defer mbTrans317.Close()
    _, err318 := mbTrans317.WriteString(arg316)
    if err318 != nil {
      Usage()
      return
    }
    factory319 := thrift.NewTJSONProtocolFactory()
    jsProt320 := factory319.GetProtocol(mbTrans317)
    argvalue2 := rpc.NewISource()
    err321 := argvalue2.Read(context.Background(), jsProt320)
    if err321 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.VoidCall3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "call":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Call requires 2 args")
      flag.Usage()
    }
    arg322 := flag.Arg(1)
    mbTrans323 := thrift.NewTMemoryBufferLen(len(arg322))
    defer mbTrans323.Close()
    _, err324 := mbTrans323.WriteString(arg322)
    if err324 != nil {
      Usage()
      return
    }
    factory325 := thrift.NewTJSONProtocolFactory()
    jsProt326 := factory325.GetProtocol(mbTrans323)
    argvalue0 := driver.NewIWorkerId()
    err327 := argvalue0.Read(context.Background(), jsProt326)
    if err327 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg328 := flag.Arg(2)
    mbTrans329 := thrift.NewTMemoryBufferLen(len(arg328))
    defer mbTrans329.Close()
    _, err330 := mbTrans329.WriteString(arg328)
    if err330 != nil {
      Usage()
      return
    }
    factory331 := thrift.NewTJSONProtocolFactory()
    jsProt332 := factory331.GetProtocol(mbTrans329)
    argvalue1 := rpc.NewISource()
    err333 := argvalue1.Read(context.Background(), jsProt332)
    if err333 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Call(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "call3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Call3 requires 3 args")
      flag.Usage()
    }
    arg334 := flag.Arg(1)
    mbTrans335 := thrift.NewTMemoryBufferLen(len(arg334))
    defer mbTrans335.Close()
    _, err336 := mbTrans335.WriteString(arg334)
    if err336 != nil {
      Usage()
      return
    }
    factory337 := thrift.NewTJSONProtocolFactory()
    jsProt338 := factory337.GetProtocol(mbTrans335)
    argvalue0 := driver.NewIWorkerId()
    err339 := argvalue0.Read(context.Background(), jsProt338)
    if err339 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg340 := flag.Arg(2)
    mbTrans341 := thrift.NewTMemoryBufferLen(len(arg340))
    defer mbTrans341.Close()
    _, err342 := mbTrans341.WriteString(arg340)
    if err342 != nil {
      Usage()
      return
    }
    factory343 := thrift.NewTJSONProtocolFactory()
    jsProt344 := factory343.GetProtocol(mbTrans341)
    argvalue1 := driver.NewIDataFrameId()
    err345 := argvalue1.Read(context.Background(), jsProt344)
    if err345 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg346 := flag.Arg(3)
    mbTrans347 := thrift.NewTMemoryBufferLen(len(arg346))
    defer mbTrans347.Close()
    _, err348 := mbTrans347.WriteString(arg346)
    if err348 != nil {
      Usage()
      return
    }
    factory349 := thrift.NewTJSONProtocolFactory()
    jsProt350 := factory349.GetProtocol(mbTrans347)
    argvalue2 := rpc.NewISource()
    err351 := argvalue2.Read(context.Background(), jsProt350)
    if err351 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Call3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
