// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/driver"
)

var _ = rpc.GoUnusedProtection__
var _ = driver.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void start(IWorkerId id)")
  fmt.Fprintln(os.Stderr, "  void destroy(IWorkerId id)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance(i64 id, string type)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance3(i64 id, string name, string type)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance4(i64 id, string type, i32 cores, i32 instances)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance5(i64 id, string name, string type, i32 cores, i32 instances)")
  fmt.Fprintln(os.Stderr, "  void setName(IWorkerId id, string name)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId parallelize(IWorkerId id, i64 dataId, i64 partitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId parallelize4(IWorkerId id, i64 dataId, i64 partitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame(IWorkerId id, IDataFrameId data)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame3(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId textFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId textFile3(IWorkerId id, string path, i64 minPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionObjectFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionObjectFile3(IWorkerId id, string path, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionTextFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionJsonFile3a(IWorkerId id, string path, bool objectMapping)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionJsonFile3b(IWorkerId id, string path, ISource src)")
  fmt.Fprintln(os.Stderr, "  void loadLibrary(IWorkerId id, string lib)")
  fmt.Fprintln(os.Stderr, "  void execute(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId executeTo(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void voidCall(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void voidCall3(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId call(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId call3(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := driver.NewIWorkerServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "start":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Start requires 1 args")
      flag.Usage()
    }
    arg77 := flag.Arg(1)
    mbTrans78 := thrift.NewTMemoryBufferLen(len(arg77))
    defer mbTrans78.Close()
    _, err79 := mbTrans78.WriteString(arg77)
    if err79 != nil {
      Usage()
      return
    }
    factory80 := thrift.NewTJSONProtocolFactory()
    jsProt81 := factory80.GetProtocol(mbTrans78)
    argvalue0 := driver.NewIWorkerId()
    err82 := argvalue0.Read(context.Background(), jsProt81)
    if err82 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Start(context.Background(), value0))
    fmt.Print("\n")
    break
  case "destroy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Destroy requires 1 args")
      flag.Usage()
    }
    arg83 := flag.Arg(1)
    mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
    defer mbTrans84.Close()
    _, err85 := mbTrans84.WriteString(arg83)
    if err85 != nil {
      Usage()
      return
    }
    factory86 := thrift.NewTJSONProtocolFactory()
    jsProt87 := factory86.GetProtocol(mbTrans84)
    argvalue0 := driver.NewIWorkerId()
    err88 := argvalue0.Read(context.Background(), jsProt87)
    if err88 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Destroy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "newInstance":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NewInstance_ requires 2 args")
      flag.Usage()
    }
    argvalue0, err89 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err89 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NewInstance_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "newInstance3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "NewInstance3_ requires 3 args")
      flag.Usage()
    }
    argvalue0, err91 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err91 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.NewInstance3_(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "newInstance4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NewInstance4_ requires 4 args")
      flag.Usage()
    }
    argvalue0, err94 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err94 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err96 := (strconv.Atoi(flag.Arg(3)))
    if err96 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err97 := (strconv.Atoi(flag.Arg(4)))
    if err97 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.NewInstance4_(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "newInstance5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "NewInstance5_ requires 5 args")
      flag.Usage()
    }
    argvalue0, err98 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err98 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err101 := (strconv.Atoi(flag.Arg(4)))
    if err101 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err102 := (strconv.Atoi(flag.Arg(5)))
    if err102 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    fmt.Print(client.NewInstance5_(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "setName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetName requires 2 args")
      flag.Usage()
    }
    arg103 := flag.Arg(1)
    mbTrans104 := thrift.NewTMemoryBufferLen(len(arg103))
    defer mbTrans104.Close()
    _, err105 := mbTrans104.WriteString(arg103)
    if err105 != nil {
      Usage()
      return
    }
    factory106 := thrift.NewTJSONProtocolFactory()
    jsProt107 := factory106.GetProtocol(mbTrans104)
    argvalue0 := driver.NewIWorkerId()
    err108 := argvalue0.Read(context.Background(), jsProt107)
    if err108 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "parallelize":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Parallelize requires 3 args")
      flag.Usage()
    }
    arg110 := flag.Arg(1)
    mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
    defer mbTrans111.Close()
    _, err112 := mbTrans111.WriteString(arg110)
    if err112 != nil {
      Usage()
      return
    }
    factory113 := thrift.NewTJSONProtocolFactory()
    jsProt114 := factory113.GetProtocol(mbTrans111)
    argvalue0 := driver.NewIWorkerId()
    err115 := argvalue0.Read(context.Background(), jsProt114)
    if err115 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err116 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err116 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err117 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err117 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Parallelize(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "parallelize4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Parallelize4 requires 4 args")
      flag.Usage()
    }
    arg118 := flag.Arg(1)
    mbTrans119 := thrift.NewTMemoryBufferLen(len(arg118))
    defer mbTrans119.Close()
    _, err120 := mbTrans119.WriteString(arg118)
    if err120 != nil {
      Usage()
      return
    }
    factory121 := thrift.NewTJSONProtocolFactory()
    jsProt122 := factory121.GetProtocol(mbTrans119)
    argvalue0 := driver.NewIWorkerId()
    err123 := argvalue0.Read(context.Background(), jsProt122)
    if err123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err124 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err124 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err125 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err125 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg126 := flag.Arg(4)
    mbTrans127 := thrift.NewTMemoryBufferLen(len(arg126))
    defer mbTrans127.Close()
    _, err128 := mbTrans127.WriteString(arg126)
    if err128 != nil {
      Usage()
      return
    }
    factory129 := thrift.NewTJSONProtocolFactory()
    jsProt130 := factory129.GetProtocol(mbTrans127)
    argvalue3 := rpc.NewISource()
    err131 := argvalue3.Read(context.Background(), jsProt130)
    if err131 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Parallelize4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "importDataFrame":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame requires 2 args")
      flag.Usage()
    }
    arg132 := flag.Arg(1)
    mbTrans133 := thrift.NewTMemoryBufferLen(len(arg132))
    defer mbTrans133.Close()
    _, err134 := mbTrans133.WriteString(arg132)
    if err134 != nil {
      Usage()
      return
    }
    factory135 := thrift.NewTJSONProtocolFactory()
    jsProt136 := factory135.GetProtocol(mbTrans133)
    argvalue0 := driver.NewIWorkerId()
    err137 := argvalue0.Read(context.Background(), jsProt136)
    if err137 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg138 := flag.Arg(2)
    mbTrans139 := thrift.NewTMemoryBufferLen(len(arg138))
    defer mbTrans139.Close()
    _, err140 := mbTrans139.WriteString(arg138)
    if err140 != nil {
      Usage()
      return
    }
    factory141 := thrift.NewTJSONProtocolFactory()
    jsProt142 := factory141.GetProtocol(mbTrans139)
    argvalue1 := driver.NewIDataFrameId()
    err143 := argvalue1.Read(context.Background(), jsProt142)
    if err143 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ImportDataFrame(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "importDataFrame3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame3 requires 3 args")
      flag.Usage()
    }
    arg144 := flag.Arg(1)
    mbTrans145 := thrift.NewTMemoryBufferLen(len(arg144))
    defer mbTrans145.Close()
    _, err146 := mbTrans145.WriteString(arg144)
    if err146 != nil {
      Usage()
      return
    }
    factory147 := thrift.NewTJSONProtocolFactory()
    jsProt148 := factory147.GetProtocol(mbTrans145)
    argvalue0 := driver.NewIWorkerId()
    err149 := argvalue0.Read(context.Background(), jsProt148)
    if err149 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg150 := flag.Arg(2)
    mbTrans151 := thrift.NewTMemoryBufferLen(len(arg150))
    defer mbTrans151.Close()
    _, err152 := mbTrans151.WriteString(arg150)
    if err152 != nil {
      Usage()
      return
    }
    factory153 := thrift.NewTJSONProtocolFactory()
    jsProt154 := factory153.GetProtocol(mbTrans151)
    argvalue1 := driver.NewIDataFrameId()
    err155 := argvalue1.Read(context.Background(), jsProt154)
    if err155 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg156 := flag.Arg(3)
    mbTrans157 := thrift.NewTMemoryBufferLen(len(arg156))
    defer mbTrans157.Close()
    _, err158 := mbTrans157.WriteString(arg156)
    if err158 != nil {
      Usage()
      return
    }
    factory159 := thrift.NewTJSONProtocolFactory()
    jsProt160 := factory159.GetProtocol(mbTrans157)
    argvalue2 := rpc.NewISource()
    err161 := argvalue2.Read(context.Background(), jsProt160)
    if err161 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ImportDataFrame3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "textFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TextFile requires 2 args")
      flag.Usage()
    }
    arg162 := flag.Arg(1)
    mbTrans163 := thrift.NewTMemoryBufferLen(len(arg162))
    defer mbTrans163.Close()
    _, err164 := mbTrans163.WriteString(arg162)
    if err164 != nil {
      Usage()
      return
    }
    factory165 := thrift.NewTJSONProtocolFactory()
    jsProt166 := factory165.GetProtocol(mbTrans163)
    argvalue0 := driver.NewIWorkerId()
    err167 := argvalue0.Read(context.Background(), jsProt166)
    if err167 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.TextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "textFile3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TextFile3 requires 3 args")
      flag.Usage()
    }
    arg169 := flag.Arg(1)
    mbTrans170 := thrift.NewTMemoryBufferLen(len(arg169))
    defer mbTrans170.Close()
    _, err171 := mbTrans170.WriteString(arg169)
    if err171 != nil {
      Usage()
      return
    }
    factory172 := thrift.NewTJSONProtocolFactory()
    jsProt173 := factory172.GetProtocol(mbTrans170)
    argvalue0 := driver.NewIWorkerId()
    err174 := argvalue0.Read(context.Background(), jsProt173)
    if err174 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err176 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err176 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TextFile3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionObjectFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionObjectFile requires 2 args")
      flag.Usage()
    }
    arg177 := flag.Arg(1)
    mbTrans178 := thrift.NewTMemoryBufferLen(len(arg177))
    defer mbTrans178.Close()
    _, err179 := mbTrans178.WriteString(arg177)
    if err179 != nil {
      Usage()
      return
    }
    factory180 := thrift.NewTJSONProtocolFactory()
    jsProt181 := factory180.GetProtocol(mbTrans178)
    argvalue0 := driver.NewIWorkerId()
    err182 := argvalue0.Read(context.Background(), jsProt181)
    if err182 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PartitionObjectFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionObjectFile3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionObjectFile3 requires 3 args")
      flag.Usage()
    }
    arg184 := flag.Arg(1)
    mbTrans185 := thrift.NewTMemoryBufferLen(len(arg184))
    defer mbTrans185.Close()
    _, err186 := mbTrans185.WriteString(arg184)
    if err186 != nil {
      Usage()
      return
    }
    factory187 := thrift.NewTJSONProtocolFactory()
    jsProt188 := factory187.GetProtocol(mbTrans185)
    argvalue0 := driver.NewIWorkerId()
    err189 := argvalue0.Read(context.Background(), jsProt188)
    if err189 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg191 := flag.Arg(3)
    mbTrans192 := thrift.NewTMemoryBufferLen(len(arg191))
    defer mbTrans192.Close()
    _, err193 := mbTrans192.WriteString(arg191)
    if err193 != nil {
      Usage()
      return
    }
    factory194 := thrift.NewTJSONProtocolFactory()
    jsProt195 := factory194.GetProtocol(mbTrans192)
    argvalue2 := rpc.NewISource()
    err196 := argvalue2.Read(context.Background(), jsProt195)
    if err196 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionObjectFile3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionTextFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionTextFile requires 2 args")
      flag.Usage()
    }
    arg197 := flag.Arg(1)
    mbTrans198 := thrift.NewTMemoryBufferLen(len(arg197))
    defer mbTrans198.Close()
    _, err199 := mbTrans198.WriteString(arg197)
    if err199 != nil {
      Usage()
      return
    }
    factory200 := thrift.NewTJSONProtocolFactory()
    jsProt201 := factory200.GetProtocol(mbTrans198)
    argvalue0 := driver.NewIWorkerId()
    err202 := argvalue0.Read(context.Background(), jsProt201)
    if err202 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PartitionTextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionJsonFile3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionJsonFile3a requires 3 args")
      flag.Usage()
    }
    arg204 := flag.Arg(1)
    mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
    defer mbTrans205.Close()
    _, err206 := mbTrans205.WriteString(arg204)
    if err206 != nil {
      Usage()
      return
    }
    factory207 := thrift.NewTJSONProtocolFactory()
    jsProt208 := factory207.GetProtocol(mbTrans205)
    argvalue0 := driver.NewIWorkerId()
    err209 := argvalue0.Read(context.Background(), jsProt208)
    if err209 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.PartitionJsonFile3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionJsonFile3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionJsonFile3b requires 3 args")
      flag.Usage()
    }
    arg212 := flag.Arg(1)
    mbTrans213 := thrift.NewTMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewTJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue0 := driver.NewIWorkerId()
    err217 := argvalue0.Read(context.Background(), jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg219 := flag.Arg(3)
    mbTrans220 := thrift.NewTMemoryBufferLen(len(arg219))
    defer mbTrans220.Close()
    _, err221 := mbTrans220.WriteString(arg219)
    if err221 != nil {
      Usage()
      return
    }
    factory222 := thrift.NewTJSONProtocolFactory()
    jsProt223 := factory222.GetProtocol(mbTrans220)
    argvalue2 := rpc.NewISource()
    err224 := argvalue2.Read(context.Background(), jsProt223)
    if err224 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionJsonFile3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "loadLibrary":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LoadLibrary requires 2 args")
      flag.Usage()
    }
    arg225 := flag.Arg(1)
    mbTrans226 := thrift.NewTMemoryBufferLen(len(arg225))
    defer mbTrans226.Close()
    _, err227 := mbTrans226.WriteString(arg225)
    if err227 != nil {
      Usage()
      return
    }
    factory228 := thrift.NewTJSONProtocolFactory()
    jsProt229 := factory228.GetProtocol(mbTrans226)
    argvalue0 := driver.NewIWorkerId()
    err230 := argvalue0.Read(context.Background(), jsProt229)
    if err230 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LoadLibrary(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "execute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Execute requires 2 args")
      flag.Usage()
    }
    arg232 := flag.Arg(1)
    mbTrans233 := thrift.NewTMemoryBufferLen(len(arg232))
    defer mbTrans233.Close()
    _, err234 := mbTrans233.WriteString(arg232)
    if err234 != nil {
      Usage()
      return
    }
    factory235 := thrift.NewTJSONProtocolFactory()
    jsProt236 := factory235.GetProtocol(mbTrans233)
    argvalue0 := driver.NewIWorkerId()
    err237 := argvalue0.Read(context.Background(), jsProt236)
    if err237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg238 := flag.Arg(2)
    mbTrans239 := thrift.NewTMemoryBufferLen(len(arg238))
    defer mbTrans239.Close()
    _, err240 := mbTrans239.WriteString(arg238)
    if err240 != nil {
      Usage()
      return
    }
    factory241 := thrift.NewTJSONProtocolFactory()
    jsProt242 := factory241.GetProtocol(mbTrans239)
    argvalue1 := rpc.NewISource()
    err243 := argvalue1.Read(context.Background(), jsProt242)
    if err243 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Execute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "executeTo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteTo requires 2 args")
      flag.Usage()
    }
    arg244 := flag.Arg(1)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil {
      Usage()
      return
    }
    factory247 := thrift.NewTJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    argvalue0 := driver.NewIWorkerId()
    err249 := argvalue0.Read(context.Background(), jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg250 := flag.Arg(2)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil {
      Usage()
      return
    }
    factory253 := thrift.NewTJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    argvalue1 := rpc.NewISource()
    err255 := argvalue1.Read(context.Background(), jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteTo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "voidCall":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VoidCall requires 2 args")
      flag.Usage()
    }
    arg256 := flag.Arg(1)
    mbTrans257 := thrift.NewTMemoryBufferLen(len(arg256))
    defer mbTrans257.Close()
    _, err258 := mbTrans257.WriteString(arg256)
    if err258 != nil {
      Usage()
      return
    }
    factory259 := thrift.NewTJSONProtocolFactory()
    jsProt260 := factory259.GetProtocol(mbTrans257)
    argvalue0 := driver.NewIWorkerId()
    err261 := argvalue0.Read(context.Background(), jsProt260)
    if err261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg262 := flag.Arg(2)
    mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
    defer mbTrans263.Close()
    _, err264 := mbTrans263.WriteString(arg262)
    if err264 != nil {
      Usage()
      return
    }
    factory265 := thrift.NewTJSONProtocolFactory()
    jsProt266 := factory265.GetProtocol(mbTrans263)
    argvalue1 := rpc.NewISource()
    err267 := argvalue1.Read(context.Background(), jsProt266)
    if err267 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.VoidCall(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "voidCall3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VoidCall3 requires 3 args")
      flag.Usage()
    }
    arg268 := flag.Arg(1)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue0 := driver.NewIWorkerId()
    err273 := argvalue0.Read(context.Background(), jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg274 := flag.Arg(2)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil {
      Usage()
      return
    }
    factory277 := thrift.NewTJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    argvalue1 := driver.NewIDataFrameId()
    err279 := argvalue1.Read(context.Background(), jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg280 := flag.Arg(3)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue2 := rpc.NewISource()
    err285 := argvalue2.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.VoidCall3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "call":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Call requires 2 args")
      flag.Usage()
    }
    arg286 := flag.Arg(1)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue0 := driver.NewIWorkerId()
    err291 := argvalue0.Read(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg292 := flag.Arg(2)
    mbTrans293 := thrift.NewTMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil {
      Usage()
      return
    }
    factory295 := thrift.NewTJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    argvalue1 := rpc.NewISource()
    err297 := argvalue1.Read(context.Background(), jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Call(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "call3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Call3 requires 3 args")
      flag.Usage()
    }
    arg298 := flag.Arg(1)
    mbTrans299 := thrift.NewTMemoryBufferLen(len(arg298))
    defer mbTrans299.Close()
    _, err300 := mbTrans299.WriteString(arg298)
    if err300 != nil {
      Usage()
      return
    }
    factory301 := thrift.NewTJSONProtocolFactory()
    jsProt302 := factory301.GetProtocol(mbTrans299)
    argvalue0 := driver.NewIWorkerId()
    err303 := argvalue0.Read(context.Background(), jsProt302)
    if err303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg304 := flag.Arg(2)
    mbTrans305 := thrift.NewTMemoryBufferLen(len(arg304))
    defer mbTrans305.Close()
    _, err306 := mbTrans305.WriteString(arg304)
    if err306 != nil {
      Usage()
      return
    }
    factory307 := thrift.NewTJSONProtocolFactory()
    jsProt308 := factory307.GetProtocol(mbTrans305)
    argvalue1 := driver.NewIDataFrameId()
    err309 := argvalue1.Read(context.Background(), jsProt308)
    if err309 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg310 := flag.Arg(3)
    mbTrans311 := thrift.NewTMemoryBufferLen(len(arg310))
    defer mbTrans311.Close()
    _, err312 := mbTrans311.WriteString(arg310)
    if err312 != nil {
      Usage()
      return
    }
    factory313 := thrift.NewTJSONProtocolFactory()
    jsProt314 := factory313.GetProtocol(mbTrans311)
    argvalue2 := rpc.NewISource()
    err315 := argvalue2.Read(context.Background(), jsProt314)
    if err315 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Call3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
