// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/driver"
)

var _ = rpc.GoUnusedProtection__
var _ = driver.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void start(IWorkerId id)")
  fmt.Fprintln(os.Stderr, "  void destroy(IWorkerId id)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance(i64 id, string type)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance3(i64 id, string name, string type)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance4(i64 id, string type, i32 cores, i32 instances)")
  fmt.Fprintln(os.Stderr, "  IWorkerId newInstance5(i64 id, string name, string type, i32 cores, i32 instances)")
  fmt.Fprintln(os.Stderr, "  void setName(IWorkerId id, string name)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId parallelize(IWorkerId id, i64 dataId, i64 partitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId parallelize4(IWorkerId id, i64 dataId, i64 partitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame(IWorkerId id, IDataFrameId data)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame3a(IWorkerId id, IDataFrameId data, i64 partitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame3b(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId importDataFrame4(IWorkerId id, IDataFrameId data, i64 partitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId textFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId textFile3(IWorkerId id, string path, i64 minPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionObjectFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionObjectFile3(IWorkerId id, string path, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionTextFile(IWorkerId id, string path)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionJsonFile3a(IWorkerId id, string path, bool objectMapping)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionJsonFile3b(IWorkerId id, string path, ISource src)")
  fmt.Fprintln(os.Stderr, "  void loadLibrary(IWorkerId id, string lib)")
  fmt.Fprintln(os.Stderr, "  void execute(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId executeTo(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void voidCall(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void voidCall3(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId call(IWorkerId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId call3(IWorkerId id, IDataFrameId data, ISource src)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := driver.NewIWorkerServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "start":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Start requires 1 args")
      flag.Usage()
    }
    arg83 := flag.Arg(1)
    mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
    defer mbTrans84.Close()
    _, err85 := mbTrans84.WriteString(arg83)
    if err85 != nil {
      Usage()
      return
    }
    factory86 := thrift.NewTJSONProtocolFactory()
    jsProt87 := factory86.GetProtocol(mbTrans84)
    argvalue0 := driver.NewIWorkerId()
    err88 := argvalue0.Read(context.Background(), jsProt87)
    if err88 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Start(context.Background(), value0))
    fmt.Print("\n")
    break
  case "destroy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Destroy requires 1 args")
      flag.Usage()
    }
    arg89 := flag.Arg(1)
    mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
    defer mbTrans90.Close()
    _, err91 := mbTrans90.WriteString(arg89)
    if err91 != nil {
      Usage()
      return
    }
    factory92 := thrift.NewTJSONProtocolFactory()
    jsProt93 := factory92.GetProtocol(mbTrans90)
    argvalue0 := driver.NewIWorkerId()
    err94 := argvalue0.Read(context.Background(), jsProt93)
    if err94 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Destroy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "newInstance":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NewInstance_ requires 2 args")
      flag.Usage()
    }
    argvalue0, err95 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err95 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NewInstance_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "newInstance3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "NewInstance3_ requires 3 args")
      flag.Usage()
    }
    argvalue0, err97 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err97 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.NewInstance3_(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "newInstance4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NewInstance4_ requires 4 args")
      flag.Usage()
    }
    argvalue0, err100 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err100 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err102 := (strconv.Atoi(flag.Arg(3)))
    if err102 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err103 := (strconv.Atoi(flag.Arg(4)))
    if err103 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.NewInstance4_(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "newInstance5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "NewInstance5_ requires 5 args")
      flag.Usage()
    }
    argvalue0, err104 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err104 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err107 := (strconv.Atoi(flag.Arg(4)))
    if err107 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err108 := (strconv.Atoi(flag.Arg(5)))
    if err108 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    fmt.Print(client.NewInstance5_(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "setName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetName requires 2 args")
      flag.Usage()
    }
    arg109 := flag.Arg(1)
    mbTrans110 := thrift.NewTMemoryBufferLen(len(arg109))
    defer mbTrans110.Close()
    _, err111 := mbTrans110.WriteString(arg109)
    if err111 != nil {
      Usage()
      return
    }
    factory112 := thrift.NewTJSONProtocolFactory()
    jsProt113 := factory112.GetProtocol(mbTrans110)
    argvalue0 := driver.NewIWorkerId()
    err114 := argvalue0.Read(context.Background(), jsProt113)
    if err114 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "parallelize":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Parallelize requires 3 args")
      flag.Usage()
    }
    arg116 := flag.Arg(1)
    mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
    defer mbTrans117.Close()
    _, err118 := mbTrans117.WriteString(arg116)
    if err118 != nil {
      Usage()
      return
    }
    factory119 := thrift.NewTJSONProtocolFactory()
    jsProt120 := factory119.GetProtocol(mbTrans117)
    argvalue0 := driver.NewIWorkerId()
    err121 := argvalue0.Read(context.Background(), jsProt120)
    if err121 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err122 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err122 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err123 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err123 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Parallelize(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "parallelize4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Parallelize4 requires 4 args")
      flag.Usage()
    }
    arg124 := flag.Arg(1)
    mbTrans125 := thrift.NewTMemoryBufferLen(len(arg124))
    defer mbTrans125.Close()
    _, err126 := mbTrans125.WriteString(arg124)
    if err126 != nil {
      Usage()
      return
    }
    factory127 := thrift.NewTJSONProtocolFactory()
    jsProt128 := factory127.GetProtocol(mbTrans125)
    argvalue0 := driver.NewIWorkerId()
    err129 := argvalue0.Read(context.Background(), jsProt128)
    if err129 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err130 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err130 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err131 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err131 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg132 := flag.Arg(4)
    mbTrans133 := thrift.NewTMemoryBufferLen(len(arg132))
    defer mbTrans133.Close()
    _, err134 := mbTrans133.WriteString(arg132)
    if err134 != nil {
      Usage()
      return
    }
    factory135 := thrift.NewTJSONProtocolFactory()
    jsProt136 := factory135.GetProtocol(mbTrans133)
    argvalue3 := rpc.NewISource()
    err137 := argvalue3.Read(context.Background(), jsProt136)
    if err137 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Parallelize4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "importDataFrame":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame requires 2 args")
      flag.Usage()
    }
    arg138 := flag.Arg(1)
    mbTrans139 := thrift.NewTMemoryBufferLen(len(arg138))
    defer mbTrans139.Close()
    _, err140 := mbTrans139.WriteString(arg138)
    if err140 != nil {
      Usage()
      return
    }
    factory141 := thrift.NewTJSONProtocolFactory()
    jsProt142 := factory141.GetProtocol(mbTrans139)
    argvalue0 := driver.NewIWorkerId()
    err143 := argvalue0.Read(context.Background(), jsProt142)
    if err143 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg144 := flag.Arg(2)
    mbTrans145 := thrift.NewTMemoryBufferLen(len(arg144))
    defer mbTrans145.Close()
    _, err146 := mbTrans145.WriteString(arg144)
    if err146 != nil {
      Usage()
      return
    }
    factory147 := thrift.NewTJSONProtocolFactory()
    jsProt148 := factory147.GetProtocol(mbTrans145)
    argvalue1 := driver.NewIDataFrameId()
    err149 := argvalue1.Read(context.Background(), jsProt148)
    if err149 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ImportDataFrame(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "importDataFrame3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame3a requires 3 args")
      flag.Usage()
    }
    arg150 := flag.Arg(1)
    mbTrans151 := thrift.NewTMemoryBufferLen(len(arg150))
    defer mbTrans151.Close()
    _, err152 := mbTrans151.WriteString(arg150)
    if err152 != nil {
      Usage()
      return
    }
    factory153 := thrift.NewTJSONProtocolFactory()
    jsProt154 := factory153.GetProtocol(mbTrans151)
    argvalue0 := driver.NewIWorkerId()
    err155 := argvalue0.Read(context.Background(), jsProt154)
    if err155 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg156 := flag.Arg(2)
    mbTrans157 := thrift.NewTMemoryBufferLen(len(arg156))
    defer mbTrans157.Close()
    _, err158 := mbTrans157.WriteString(arg156)
    if err158 != nil {
      Usage()
      return
    }
    factory159 := thrift.NewTJSONProtocolFactory()
    jsProt160 := factory159.GetProtocol(mbTrans157)
    argvalue1 := driver.NewIDataFrameId()
    err161 := argvalue1.Read(context.Background(), jsProt160)
    if err161 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err162 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err162 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ImportDataFrame3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "importDataFrame3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame3b requires 3 args")
      flag.Usage()
    }
    arg163 := flag.Arg(1)
    mbTrans164 := thrift.NewTMemoryBufferLen(len(arg163))
    defer mbTrans164.Close()
    _, err165 := mbTrans164.WriteString(arg163)
    if err165 != nil {
      Usage()
      return
    }
    factory166 := thrift.NewTJSONProtocolFactory()
    jsProt167 := factory166.GetProtocol(mbTrans164)
    argvalue0 := driver.NewIWorkerId()
    err168 := argvalue0.Read(context.Background(), jsProt167)
    if err168 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg169 := flag.Arg(2)
    mbTrans170 := thrift.NewTMemoryBufferLen(len(arg169))
    defer mbTrans170.Close()
    _, err171 := mbTrans170.WriteString(arg169)
    if err171 != nil {
      Usage()
      return
    }
    factory172 := thrift.NewTJSONProtocolFactory()
    jsProt173 := factory172.GetProtocol(mbTrans170)
    argvalue1 := driver.NewIDataFrameId()
    err174 := argvalue1.Read(context.Background(), jsProt173)
    if err174 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg175 := flag.Arg(3)
    mbTrans176 := thrift.NewTMemoryBufferLen(len(arg175))
    defer mbTrans176.Close()
    _, err177 := mbTrans176.WriteString(arg175)
    if err177 != nil {
      Usage()
      return
    }
    factory178 := thrift.NewTJSONProtocolFactory()
    jsProt179 := factory178.GetProtocol(mbTrans176)
    argvalue2 := rpc.NewISource()
    err180 := argvalue2.Read(context.Background(), jsProt179)
    if err180 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ImportDataFrame3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "importDataFrame4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ImportDataFrame4 requires 4 args")
      flag.Usage()
    }
    arg181 := flag.Arg(1)
    mbTrans182 := thrift.NewTMemoryBufferLen(len(arg181))
    defer mbTrans182.Close()
    _, err183 := mbTrans182.WriteString(arg181)
    if err183 != nil {
      Usage()
      return
    }
    factory184 := thrift.NewTJSONProtocolFactory()
    jsProt185 := factory184.GetProtocol(mbTrans182)
    argvalue0 := driver.NewIWorkerId()
    err186 := argvalue0.Read(context.Background(), jsProt185)
    if err186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg187 := flag.Arg(2)
    mbTrans188 := thrift.NewTMemoryBufferLen(len(arg187))
    defer mbTrans188.Close()
    _, err189 := mbTrans188.WriteString(arg187)
    if err189 != nil {
      Usage()
      return
    }
    factory190 := thrift.NewTJSONProtocolFactory()
    jsProt191 := factory190.GetProtocol(mbTrans188)
    argvalue1 := driver.NewIDataFrameId()
    err192 := argvalue1.Read(context.Background(), jsProt191)
    if err192 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err193 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err193 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg194 := flag.Arg(4)
    mbTrans195 := thrift.NewTMemoryBufferLen(len(arg194))
    defer mbTrans195.Close()
    _, err196 := mbTrans195.WriteString(arg194)
    if err196 != nil {
      Usage()
      return
    }
    factory197 := thrift.NewTJSONProtocolFactory()
    jsProt198 := factory197.GetProtocol(mbTrans195)
    argvalue3 := rpc.NewISource()
    err199 := argvalue3.Read(context.Background(), jsProt198)
    if err199 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.ImportDataFrame4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "textFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TextFile requires 2 args")
      flag.Usage()
    }
    arg200 := flag.Arg(1)
    mbTrans201 := thrift.NewTMemoryBufferLen(len(arg200))
    defer mbTrans201.Close()
    _, err202 := mbTrans201.WriteString(arg200)
    if err202 != nil {
      Usage()
      return
    }
    factory203 := thrift.NewTJSONProtocolFactory()
    jsProt204 := factory203.GetProtocol(mbTrans201)
    argvalue0 := driver.NewIWorkerId()
    err205 := argvalue0.Read(context.Background(), jsProt204)
    if err205 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.TextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "textFile3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TextFile3 requires 3 args")
      flag.Usage()
    }
    arg207 := flag.Arg(1)
    mbTrans208 := thrift.NewTMemoryBufferLen(len(arg207))
    defer mbTrans208.Close()
    _, err209 := mbTrans208.WriteString(arg207)
    if err209 != nil {
      Usage()
      return
    }
    factory210 := thrift.NewTJSONProtocolFactory()
    jsProt211 := factory210.GetProtocol(mbTrans208)
    argvalue0 := driver.NewIWorkerId()
    err212 := argvalue0.Read(context.Background(), jsProt211)
    if err212 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err214 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err214 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TextFile3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionObjectFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionObjectFile requires 2 args")
      flag.Usage()
    }
    arg215 := flag.Arg(1)
    mbTrans216 := thrift.NewTMemoryBufferLen(len(arg215))
    defer mbTrans216.Close()
    _, err217 := mbTrans216.WriteString(arg215)
    if err217 != nil {
      Usage()
      return
    }
    factory218 := thrift.NewTJSONProtocolFactory()
    jsProt219 := factory218.GetProtocol(mbTrans216)
    argvalue0 := driver.NewIWorkerId()
    err220 := argvalue0.Read(context.Background(), jsProt219)
    if err220 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PartitionObjectFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionObjectFile3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionObjectFile3 requires 3 args")
      flag.Usage()
    }
    arg222 := flag.Arg(1)
    mbTrans223 := thrift.NewTMemoryBufferLen(len(arg222))
    defer mbTrans223.Close()
    _, err224 := mbTrans223.WriteString(arg222)
    if err224 != nil {
      Usage()
      return
    }
    factory225 := thrift.NewTJSONProtocolFactory()
    jsProt226 := factory225.GetProtocol(mbTrans223)
    argvalue0 := driver.NewIWorkerId()
    err227 := argvalue0.Read(context.Background(), jsProt226)
    if err227 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg229 := flag.Arg(3)
    mbTrans230 := thrift.NewTMemoryBufferLen(len(arg229))
    defer mbTrans230.Close()
    _, err231 := mbTrans230.WriteString(arg229)
    if err231 != nil {
      Usage()
      return
    }
    factory232 := thrift.NewTJSONProtocolFactory()
    jsProt233 := factory232.GetProtocol(mbTrans230)
    argvalue2 := rpc.NewISource()
    err234 := argvalue2.Read(context.Background(), jsProt233)
    if err234 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionObjectFile3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionTextFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionTextFile requires 2 args")
      flag.Usage()
    }
    arg235 := flag.Arg(1)
    mbTrans236 := thrift.NewTMemoryBufferLen(len(arg235))
    defer mbTrans236.Close()
    _, err237 := mbTrans236.WriteString(arg235)
    if err237 != nil {
      Usage()
      return
    }
    factory238 := thrift.NewTJSONProtocolFactory()
    jsProt239 := factory238.GetProtocol(mbTrans236)
    argvalue0 := driver.NewIWorkerId()
    err240 := argvalue0.Read(context.Background(), jsProt239)
    if err240 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PartitionTextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionJsonFile3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionJsonFile3a requires 3 args")
      flag.Usage()
    }
    arg242 := flag.Arg(1)
    mbTrans243 := thrift.NewTMemoryBufferLen(len(arg242))
    defer mbTrans243.Close()
    _, err244 := mbTrans243.WriteString(arg242)
    if err244 != nil {
      Usage()
      return
    }
    factory245 := thrift.NewTJSONProtocolFactory()
    jsProt246 := factory245.GetProtocol(mbTrans243)
    argvalue0 := driver.NewIWorkerId()
    err247 := argvalue0.Read(context.Background(), jsProt246)
    if err247 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.PartitionJsonFile3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionJsonFile3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionJsonFile3b requires 3 args")
      flag.Usage()
    }
    arg250 := flag.Arg(1)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil {
      Usage()
      return
    }
    factory253 := thrift.NewTJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    argvalue0 := driver.NewIWorkerId()
    err255 := argvalue0.Read(context.Background(), jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg257 := flag.Arg(3)
    mbTrans258 := thrift.NewTMemoryBufferLen(len(arg257))
    defer mbTrans258.Close()
    _, err259 := mbTrans258.WriteString(arg257)
    if err259 != nil {
      Usage()
      return
    }
    factory260 := thrift.NewTJSONProtocolFactory()
    jsProt261 := factory260.GetProtocol(mbTrans258)
    argvalue2 := rpc.NewISource()
    err262 := argvalue2.Read(context.Background(), jsProt261)
    if err262 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionJsonFile3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "loadLibrary":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LoadLibrary requires 2 args")
      flag.Usage()
    }
    arg263 := flag.Arg(1)
    mbTrans264 := thrift.NewTMemoryBufferLen(len(arg263))
    defer mbTrans264.Close()
    _, err265 := mbTrans264.WriteString(arg263)
    if err265 != nil {
      Usage()
      return
    }
    factory266 := thrift.NewTJSONProtocolFactory()
    jsProt267 := factory266.GetProtocol(mbTrans264)
    argvalue0 := driver.NewIWorkerId()
    err268 := argvalue0.Read(context.Background(), jsProt267)
    if err268 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LoadLibrary(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "execute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Execute requires 2 args")
      flag.Usage()
    }
    arg270 := flag.Arg(1)
    mbTrans271 := thrift.NewTMemoryBufferLen(len(arg270))
    defer mbTrans271.Close()
    _, err272 := mbTrans271.WriteString(arg270)
    if err272 != nil {
      Usage()
      return
    }
    factory273 := thrift.NewTJSONProtocolFactory()
    jsProt274 := factory273.GetProtocol(mbTrans271)
    argvalue0 := driver.NewIWorkerId()
    err275 := argvalue0.Read(context.Background(), jsProt274)
    if err275 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg276 := flag.Arg(2)
    mbTrans277 := thrift.NewTMemoryBufferLen(len(arg276))
    defer mbTrans277.Close()
    _, err278 := mbTrans277.WriteString(arg276)
    if err278 != nil {
      Usage()
      return
    }
    factory279 := thrift.NewTJSONProtocolFactory()
    jsProt280 := factory279.GetProtocol(mbTrans277)
    argvalue1 := rpc.NewISource()
    err281 := argvalue1.Read(context.Background(), jsProt280)
    if err281 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Execute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "executeTo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteTo requires 2 args")
      flag.Usage()
    }
    arg282 := flag.Arg(1)
    mbTrans283 := thrift.NewTMemoryBufferLen(len(arg282))
    defer mbTrans283.Close()
    _, err284 := mbTrans283.WriteString(arg282)
    if err284 != nil {
      Usage()
      return
    }
    factory285 := thrift.NewTJSONProtocolFactory()
    jsProt286 := factory285.GetProtocol(mbTrans283)
    argvalue0 := driver.NewIWorkerId()
    err287 := argvalue0.Read(context.Background(), jsProt286)
    if err287 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg288 := flag.Arg(2)
    mbTrans289 := thrift.NewTMemoryBufferLen(len(arg288))
    defer mbTrans289.Close()
    _, err290 := mbTrans289.WriteString(arg288)
    if err290 != nil {
      Usage()
      return
    }
    factory291 := thrift.NewTJSONProtocolFactory()
    jsProt292 := factory291.GetProtocol(mbTrans289)
    argvalue1 := rpc.NewISource()
    err293 := argvalue1.Read(context.Background(), jsProt292)
    if err293 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteTo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "voidCall":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VoidCall requires 2 args")
      flag.Usage()
    }
    arg294 := flag.Arg(1)
    mbTrans295 := thrift.NewTMemoryBufferLen(len(arg294))
    defer mbTrans295.Close()
    _, err296 := mbTrans295.WriteString(arg294)
    if err296 != nil {
      Usage()
      return
    }
    factory297 := thrift.NewTJSONProtocolFactory()
    jsProt298 := factory297.GetProtocol(mbTrans295)
    argvalue0 := driver.NewIWorkerId()
    err299 := argvalue0.Read(context.Background(), jsProt298)
    if err299 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg300 := flag.Arg(2)
    mbTrans301 := thrift.NewTMemoryBufferLen(len(arg300))
    defer mbTrans301.Close()
    _, err302 := mbTrans301.WriteString(arg300)
    if err302 != nil {
      Usage()
      return
    }
    factory303 := thrift.NewTJSONProtocolFactory()
    jsProt304 := factory303.GetProtocol(mbTrans301)
    argvalue1 := rpc.NewISource()
    err305 := argvalue1.Read(context.Background(), jsProt304)
    if err305 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.VoidCall(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "voidCall3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VoidCall3 requires 3 args")
      flag.Usage()
    }
    arg306 := flag.Arg(1)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil {
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    argvalue0 := driver.NewIWorkerId()
    err311 := argvalue0.Read(context.Background(), jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg312 := flag.Arg(2)
    mbTrans313 := thrift.NewTMemoryBufferLen(len(arg312))
    defer mbTrans313.Close()
    _, err314 := mbTrans313.WriteString(arg312)
    if err314 != nil {
      Usage()
      return
    }
    factory315 := thrift.NewTJSONProtocolFactory()
    jsProt316 := factory315.GetProtocol(mbTrans313)
    argvalue1 := driver.NewIDataFrameId()
    err317 := argvalue1.Read(context.Background(), jsProt316)
    if err317 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg318 := flag.Arg(3)
    mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
    defer mbTrans319.Close()
    _, err320 := mbTrans319.WriteString(arg318)
    if err320 != nil {
      Usage()
      return
    }
    factory321 := thrift.NewTJSONProtocolFactory()
    jsProt322 := factory321.GetProtocol(mbTrans319)
    argvalue2 := rpc.NewISource()
    err323 := argvalue2.Read(context.Background(), jsProt322)
    if err323 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.VoidCall3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "call":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Call requires 2 args")
      flag.Usage()
    }
    arg324 := flag.Arg(1)
    mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
    defer mbTrans325.Close()
    _, err326 := mbTrans325.WriteString(arg324)
    if err326 != nil {
      Usage()
      return
    }
    factory327 := thrift.NewTJSONProtocolFactory()
    jsProt328 := factory327.GetProtocol(mbTrans325)
    argvalue0 := driver.NewIWorkerId()
    err329 := argvalue0.Read(context.Background(), jsProt328)
    if err329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg330 := flag.Arg(2)
    mbTrans331 := thrift.NewTMemoryBufferLen(len(arg330))
    defer mbTrans331.Close()
    _, err332 := mbTrans331.WriteString(arg330)
    if err332 != nil {
      Usage()
      return
    }
    factory333 := thrift.NewTJSONProtocolFactory()
    jsProt334 := factory333.GetProtocol(mbTrans331)
    argvalue1 := rpc.NewISource()
    err335 := argvalue1.Read(context.Background(), jsProt334)
    if err335 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Call(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "call3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Call3 requires 3 args")
      flag.Usage()
    }
    arg336 := flag.Arg(1)
    mbTrans337 := thrift.NewTMemoryBufferLen(len(arg336))
    defer mbTrans337.Close()
    _, err338 := mbTrans337.WriteString(arg336)
    if err338 != nil {
      Usage()
      return
    }
    factory339 := thrift.NewTJSONProtocolFactory()
    jsProt340 := factory339.GetProtocol(mbTrans337)
    argvalue0 := driver.NewIWorkerId()
    err341 := argvalue0.Read(context.Background(), jsProt340)
    if err341 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg342 := flag.Arg(2)
    mbTrans343 := thrift.NewTMemoryBufferLen(len(arg342))
    defer mbTrans343.Close()
    _, err344 := mbTrans343.WriteString(arg342)
    if err344 != nil {
      Usage()
      return
    }
    factory345 := thrift.NewTJSONProtocolFactory()
    jsProt346 := factory345.GetProtocol(mbTrans343)
    argvalue1 := driver.NewIDataFrameId()
    err347 := argvalue1.Read(context.Background(), jsProt346)
    if err347 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg348 := flag.Arg(3)
    mbTrans349 := thrift.NewTMemoryBufferLen(len(arg348))
    defer mbTrans349.Close()
    _, err350 := mbTrans349.WriteString(arg348)
    if err350 != nil {
      Usage()
      return
    }
    factory351 := thrift.NewTJSONProtocolFactory()
    jsProt352 := factory351.GetProtocol(mbTrans349)
    argvalue2 := rpc.NewISource()
    err353 := argvalue2.Read(context.Background(), jsProt352)
    if err353 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Call3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
