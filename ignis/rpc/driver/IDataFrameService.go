// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package driver

import(
	"bytes"
	"context"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = rpc.GoUnusedProtection__
// Attributes:
//  - Cluster
//  - Worker
//  - DataFrame
type IDataFrameId struct {
  Cluster int64 `thrift:"cluster,1,required" db:"cluster" json:"cluster"`
  Worker int64 `thrift:"worker,2,required" db:"worker" json:"worker"`
  DataFrame int64 `thrift:"dataFrame,3,required" db:"dataFrame" json:"dataFrame"`
}

func NewIDataFrameId() *IDataFrameId {
  return &IDataFrameId{}
}


func (p *IDataFrameId) GetCluster() int64 {
  return p.Cluster
}

func (p *IDataFrameId) GetWorker() int64 {
  return p.Worker
}

func (p *IDataFrameId) GetDataFrame() int64 {
  return p.DataFrame
}
func (p *IDataFrameId) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCluster bool = false;
  var issetWorker bool = false;
  var issetDataFrame bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCluster = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetWorker = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetDataFrame = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCluster{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Cluster is not set"));
  }
  if !issetWorker{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Worker is not set"));
  }
  if !issetDataFrame{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataFrame is not set"));
  }
  return nil
}

func (p *IDataFrameId)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Cluster = v
}
  return nil
}

func (p *IDataFrameId)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Worker = v
}
  return nil
}

func (p *IDataFrameId)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DataFrame = v
}
  return nil
}

func (p *IDataFrameId) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IDataFrameId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cluster", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cluster: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Cluster)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cluster: ", p), err) }
  return err
}

func (p *IDataFrameId) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "worker", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:worker: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Worker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.worker (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:worker: ", p), err) }
  return err
}

func (p *IDataFrameId) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dataFrame", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataFrame: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DataFrame)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataFrame (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataFrame: ", p), err) }
  return err
}

func (p *IDataFrameId) Equals(other *IDataFrameId) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Cluster != other.Cluster { return false }
  if p.Worker != other.Worker { return false }
  if p.DataFrame != other.DataFrame { return false }
  return true
}

func (p *IDataFrameId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameId(%+v)", *p)
}

type IDataFrameService interface {
  // Parameters:
  //  - ID
  //  - Name
  SetName(ctx context.Context, id *IDataFrameId, name string) (_err error)
  // Parameters:
  //  - ID
  //  - Level
  Persist(ctx context.Context, id *IDataFrameId, level int8) (_err error)
  // Parameters:
  //  - ID
  Cache(ctx context.Context, id *IDataFrameId) (_err error)
  // Parameters:
  //  - ID
  Unpersist(ctx context.Context, id *IDataFrameId) (_err error)
  // Parameters:
  //  - ID
  Uncache(ctx context.Context, id *IDataFrameId) (_err error)
  // Parameters:
  //  - ID
  Partitions(ctx context.Context, id *IDataFrameId) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - Compression
  SaveAsObjectFile(ctx context.Context, id *IDataFrameId, path string, compression int8) (_err error)
  // Parameters:
  //  - ID
  //  - Path
  SaveAsTextFile(ctx context.Context, id *IDataFrameId, path string) (_err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - Pretty
  SaveAsJsonFile(ctx context.Context, id *IDataFrameId, path string, pretty bool) (_err error)
  // Parameters:
  //  - ID
  //  - NumPartitions
  //  - PreserveOrdering
  //  - Global_
  Repartition(ctx context.Context, id *IDataFrameId, numPartitions int64, preserveOrdering bool, global_ bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - NumPartitions
  PartitionByRandom(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - NumPartitions
  PartitionByHash(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - NumPartitions
  PartitionBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  Map_(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  Filter(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  Flatmap(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  KeyBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - PreservesPartitioning
  MapPartitions(ctx context.Context, id *IDataFrameId, src *rpc.ISource, preservesPartitioning bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - PreservesPartitioning
  MapPartitionsWithIndex(ctx context.Context, id *IDataFrameId, src *rpc.ISource, preservesPartitioning bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  MapExecutor(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  MapExecutorTo(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  GroupBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - NumPartitions
  GroupBy2(ctx context.Context, id *IDataFrameId, src *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Ascending
  Sort(ctx context.Context, id *IDataFrameId, ascending bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Ascending
  //  - NumPartitions
  Sort2(ctx context.Context, id *IDataFrameId, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - Ascending
  SortBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - Ascending
  //  - NumPartitions
  SortBy3(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Other
  //  - PreserveOrder
  Union_(ctx context.Context, id *IDataFrameId, other *IDataFrameId, preserveOrder bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Other
  //  - PreserveOrder
  //  - Src
  Union4(ctx context.Context, id *IDataFrameId, other *IDataFrameId, preserveOrder bool, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Other
  Join(ctx context.Context, id *IDataFrameId, other *IDataFrameId) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Other
  //  - NumPartitions
  Join3a(ctx context.Context, id *IDataFrameId, other *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Other
  //  - Src
  Join3b(ctx context.Context, id *IDataFrameId, other *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Other
  //  - NumPartitions
  //  - Src
  Join4(ctx context.Context, id *IDataFrameId, other *IDataFrameId, numPartitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  Distinct(ctx context.Context, id *IDataFrameId) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - NumPartitions
  Distinct2a(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  Distinct2b(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - NumPartitions
  //  - Src
  Distinct3(ctx context.Context, id *IDataFrameId, numPartitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - Tp
  Reduce(ctx context.Context, id *IDataFrameId, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - Tp
  TreeReduce(ctx context.Context, id *IDataFrameId, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Tp
  Collect(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - SeqOp
  //  - CombOp
  //  - Tp
  Aggregate(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - SeqOp
  //  - CombOp
  //  - Tp
  TreeAggregate(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - Src
  //  - Tp
  Fold(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - Src
  //  - Tp
  TreeFold(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Num
  //  - Tp
  Take(ctx context.Context, id *IDataFrameId, num int64, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Src
  Foreach_(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_err error)
  // Parameters:
  //  - ID
  //  - Src
  ForeachPartition(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_err error)
  // Parameters:
  //  - ID
  //  - Src
  ForeachExecutor(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_err error)
  // Parameters:
  //  - ID
  //  - Num
  //  - Tp
  Top(ctx context.Context, id *IDataFrameId, num int64, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Num
  //  - Cmp
  //  - Tp
  Top4(ctx context.Context, id *IDataFrameId, num int64, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Num
  //  - Tp
  TakeOrdered(ctx context.Context, id *IDataFrameId, num int64, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Num
  //  - Cmp
  //  - Tp
  TakeOrdered4(ctx context.Context, id *IDataFrameId, num int64, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - WithReplacement
  //  - Fraction
  //  - Seed
  Sample(ctx context.Context, id *IDataFrameId, withReplacement bool, fraction float64, seed int32) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - WithReplacement
  //  - Num
  //  - Seed
  //  - Tp
  TakeSample(ctx context.Context, id *IDataFrameId, withReplacement bool, num int64, seed int32, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  Count(ctx context.Context, id *IDataFrameId) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Tp
  Max(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Cmp
  //  - Tp
  Max3(ctx context.Context, id *IDataFrameId, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Tp
  Min(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Cmp
  //  - Tp
  Min3(ctx context.Context, id *IDataFrameId, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error)
  // *****************************************Key-Value******************************************
  // 
  // Parameters:
  //  - ID
  //  - Src
  FlatMapValues(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  MapValues(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  GroupByKey(ctx context.Context, id *IDataFrameId) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - NumPartitions
  GroupByKey2a(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  GroupByKey2b(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - NumPartitions
  //  - Src
  GroupByKey3(ctx context.Context, id *IDataFrameId, numPartitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - LocalReduce
  ReduceByKey(ctx context.Context, id *IDataFrameId, src *rpc.ISource, localReduce bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - NumPartitions
  //  - LocalReduce
  ReduceByKey4(ctx context.Context, id *IDataFrameId, src *rpc.ISource, numPartitions int64, localReduce bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - SeqOp
  AggregateByKey(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - SeqOp
  //  - NumPartitions
  AggregateByKey4a(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - SeqOp
  //  - CombOp
  AggregateByKey4b(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - SeqOp
  //  - CombOp
  //  - NumPartitions
  AggregateByKey5(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - Src
  //  - LocalFold
  FoldByKey(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, localFold bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Zero
  //  - Src
  //  - NumPartitions
  //  - LocalFold
  FoldByKey5(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, numPartitions int64, localFold bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Ascending
  SortByKey(ctx context.Context, id *IDataFrameId, ascending bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Ascending
  //  - NumPartitions
  SortByKey3a(ctx context.Context, id *IDataFrameId, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - Ascending
  SortByKey3b(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  //  - Ascending
  //  - NumPartitions
  SortByKey4(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Tp
  Keys(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Tp
  Values(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - WithReplacement
  //  - Fractions
  //  - Seed
  SampleByKey(ctx context.Context, id *IDataFrameId, withReplacement bool, fractions *rpc.ISource, seed int32) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Tp
  CountByKey(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error)
  // Parameters:
  //  - ID
  //  - Tp
  CountByValue(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error)
}

type IDataFrameServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewIDataFrameServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IDataFrameServiceClient {
  return &IDataFrameServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIDataFrameServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IDataFrameServiceClient {
  return &IDataFrameServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIDataFrameServiceClient(c thrift.TClient) *IDataFrameServiceClient {
  return &IDataFrameServiceClient{
    c: c,
  }
}

func (p *IDataFrameServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *IDataFrameServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *IDataFrameServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ID
//  - Name
func (p *IDataFrameServiceClient) SetName(ctx context.Context, id *IDataFrameId, name string) (_err error) {
  var _args0 IDataFrameServiceSetNameArgs
  _args0.ID = id
  _args0.Name = name
  var _result2 IDataFrameServiceSetNameResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "setName", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  switch {
  case _result2.Ex!= nil:
    return _result2.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Level
func (p *IDataFrameServiceClient) Persist(ctx context.Context, id *IDataFrameId, level int8) (_err error) {
  var _args3 IDataFrameServicePersistArgs
  _args3.ID = id
  _args3.Level = level
  var _result5 IDataFrameServicePersistResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "persist", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  switch {
  case _result5.Ex!= nil:
    return _result5.Ex
  }

  return nil
}

// Parameters:
//  - ID
func (p *IDataFrameServiceClient) Cache(ctx context.Context, id *IDataFrameId) (_err error) {
  var _args6 IDataFrameServiceCacheArgs
  _args6.ID = id
  var _result8 IDataFrameServiceCacheResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "cache", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.Ex!= nil:
    return _result8.Ex
  }

  return nil
}

// Parameters:
//  - ID
func (p *IDataFrameServiceClient) Unpersist(ctx context.Context, id *IDataFrameId) (_err error) {
  var _args9 IDataFrameServiceUnpersistArgs
  _args9.ID = id
  var _result11 IDataFrameServiceUnpersistResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "unpersist", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  switch {
  case _result11.Ex!= nil:
    return _result11.Ex
  }

  return nil
}

// Parameters:
//  - ID
func (p *IDataFrameServiceClient) Uncache(ctx context.Context, id *IDataFrameId) (_err error) {
  var _args12 IDataFrameServiceUncacheArgs
  _args12.ID = id
  var _result14 IDataFrameServiceUncacheResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "uncache", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  switch {
  case _result14.Ex!= nil:
    return _result14.Ex
  }

  return nil
}

// Parameters:
//  - ID
func (p *IDataFrameServiceClient) Partitions(ctx context.Context, id *IDataFrameId) (_r int64, _err error) {
  var _args15 IDataFrameServicePartitionsArgs
  _args15.ID = id
  var _result17 IDataFrameServicePartitionsResult
  var _meta16 thrift.ResponseMeta
  _meta16, _err = p.Client_().Call(ctx, "partitions", &_args15, &_result17)
  p.SetLastResponseMeta_(_meta16)
  if _err != nil {
    return
  }
  switch {
  case _result17.Ex!= nil:
    return _r, _result17.Ex
  }

  return _result17.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Path
//  - Compression
func (p *IDataFrameServiceClient) SaveAsObjectFile(ctx context.Context, id *IDataFrameId, path string, compression int8) (_err error) {
  var _args18 IDataFrameServiceSaveAsObjectFileArgs
  _args18.ID = id
  _args18.Path = path
  _args18.Compression = compression
  var _result20 IDataFrameServiceSaveAsObjectFileResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "saveAsObjectFile", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  switch {
  case _result20.Ex!= nil:
    return _result20.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Path
func (p *IDataFrameServiceClient) SaveAsTextFile(ctx context.Context, id *IDataFrameId, path string) (_err error) {
  var _args21 IDataFrameServiceSaveAsTextFileArgs
  _args21.ID = id
  _args21.Path = path
  var _result23 IDataFrameServiceSaveAsTextFileResult
  var _meta22 thrift.ResponseMeta
  _meta22, _err = p.Client_().Call(ctx, "saveAsTextFile", &_args21, &_result23)
  p.SetLastResponseMeta_(_meta22)
  if _err != nil {
    return
  }
  switch {
  case _result23.Ex!= nil:
    return _result23.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Path
//  - Pretty
func (p *IDataFrameServiceClient) SaveAsJsonFile(ctx context.Context, id *IDataFrameId, path string, pretty bool) (_err error) {
  var _args24 IDataFrameServiceSaveAsJsonFileArgs
  _args24.ID = id
  _args24.Path = path
  _args24.Pretty = pretty
  var _result26 IDataFrameServiceSaveAsJsonFileResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "saveAsJsonFile", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  switch {
  case _result26.Ex!= nil:
    return _result26.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - NumPartitions
//  - PreserveOrdering
//  - Global_
func (p *IDataFrameServiceClient) Repartition(ctx context.Context, id *IDataFrameId, numPartitions int64, preserveOrdering bool, global_ bool) (_r *IDataFrameId, _err error) {
  var _args27 IDataFrameServiceRepartitionArgs
  _args27.ID = id
  _args27.NumPartitions = numPartitions
  _args27.PreserveOrdering = preserveOrdering
  _args27.Global_ = global_
  var _result29 IDataFrameServiceRepartitionResult
  var _meta28 thrift.ResponseMeta
  _meta28, _err = p.Client_().Call(ctx, "repartition", &_args27, &_result29)
  p.SetLastResponseMeta_(_meta28)
  if _err != nil {
    return
  }
  switch {
  case _result29.Ex!= nil:
    return _r, _result29.Ex
  }

  return _result29.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - NumPartitions
func (p *IDataFrameServiceClient) PartitionByRandom(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args30 IDataFrameServicePartitionByRandomArgs
  _args30.ID = id
  _args30.NumPartitions = numPartitions
  var _result32 IDataFrameServicePartitionByRandomResult
  var _meta31 thrift.ResponseMeta
  _meta31, _err = p.Client_().Call(ctx, "partitionByRandom", &_args30, &_result32)
  p.SetLastResponseMeta_(_meta31)
  if _err != nil {
    return
  }
  switch {
  case _result32.Ex!= nil:
    return _r, _result32.Ex
  }

  return _result32.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - NumPartitions
func (p *IDataFrameServiceClient) PartitionByHash(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args33 IDataFrameServicePartitionByHashArgs
  _args33.ID = id
  _args33.NumPartitions = numPartitions
  var _result35 IDataFrameServicePartitionByHashResult
  var _meta34 thrift.ResponseMeta
  _meta34, _err = p.Client_().Call(ctx, "partitionByHash", &_args33, &_result35)
  p.SetLastResponseMeta_(_meta34)
  if _err != nil {
    return
  }
  switch {
  case _result35.Ex!= nil:
    return _r, _result35.Ex
  }

  return _result35.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - NumPartitions
func (p *IDataFrameServiceClient) PartitionBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args36 IDataFrameServicePartitionByArgs
  _args36.ID = id
  _args36.Src = src
  _args36.NumPartitions = numPartitions
  var _result38 IDataFrameServicePartitionByResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "partitionBy", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  switch {
  case _result38.Ex!= nil:
    return _r, _result38.Ex
  }

  return _result38.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) Map_(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args39 IDataFrameServiceMap_Args
  _args39.ID = id
  _args39.Src = src
  var _result41 IDataFrameServiceMap_Result
  var _meta40 thrift.ResponseMeta
  _meta40, _err = p.Client_().Call(ctx, "map_", &_args39, &_result41)
  p.SetLastResponseMeta_(_meta40)
  if _err != nil {
    return
  }
  switch {
  case _result41.Ex!= nil:
    return _r, _result41.Ex
  }

  return _result41.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) Filter(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args42 IDataFrameServiceFilterArgs
  _args42.ID = id
  _args42.Src = src
  var _result44 IDataFrameServiceFilterResult
  var _meta43 thrift.ResponseMeta
  _meta43, _err = p.Client_().Call(ctx, "filter", &_args42, &_result44)
  p.SetLastResponseMeta_(_meta43)
  if _err != nil {
    return
  }
  switch {
  case _result44.Ex!= nil:
    return _r, _result44.Ex
  }

  return _result44.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) Flatmap(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args45 IDataFrameServiceFlatmapArgs
  _args45.ID = id
  _args45.Src = src
  var _result47 IDataFrameServiceFlatmapResult
  var _meta46 thrift.ResponseMeta
  _meta46, _err = p.Client_().Call(ctx, "flatmap", &_args45, &_result47)
  p.SetLastResponseMeta_(_meta46)
  if _err != nil {
    return
  }
  switch {
  case _result47.Ex!= nil:
    return _r, _result47.Ex
  }

  return _result47.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) KeyBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args48 IDataFrameServiceKeyByArgs
  _args48.ID = id
  _args48.Src = src
  var _result50 IDataFrameServiceKeyByResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "keyBy", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  switch {
  case _result50.Ex!= nil:
    return _r, _result50.Ex
  }

  return _result50.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - PreservesPartitioning
func (p *IDataFrameServiceClient) MapPartitions(ctx context.Context, id *IDataFrameId, src *rpc.ISource, preservesPartitioning bool) (_r *IDataFrameId, _err error) {
  var _args51 IDataFrameServiceMapPartitionsArgs
  _args51.ID = id
  _args51.Src = src
  _args51.PreservesPartitioning = preservesPartitioning
  var _result53 IDataFrameServiceMapPartitionsResult
  var _meta52 thrift.ResponseMeta
  _meta52, _err = p.Client_().Call(ctx, "mapPartitions", &_args51, &_result53)
  p.SetLastResponseMeta_(_meta52)
  if _err != nil {
    return
  }
  switch {
  case _result53.Ex!= nil:
    return _r, _result53.Ex
  }

  return _result53.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - PreservesPartitioning
func (p *IDataFrameServiceClient) MapPartitionsWithIndex(ctx context.Context, id *IDataFrameId, src *rpc.ISource, preservesPartitioning bool) (_r *IDataFrameId, _err error) {
  var _args54 IDataFrameServiceMapPartitionsWithIndexArgs
  _args54.ID = id
  _args54.Src = src
  _args54.PreservesPartitioning = preservesPartitioning
  var _result56 IDataFrameServiceMapPartitionsWithIndexResult
  var _meta55 thrift.ResponseMeta
  _meta55, _err = p.Client_().Call(ctx, "mapPartitionsWithIndex", &_args54, &_result56)
  p.SetLastResponseMeta_(_meta55)
  if _err != nil {
    return
  }
  switch {
  case _result56.Ex!= nil:
    return _r, _result56.Ex
  }

  return _result56.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) MapExecutor(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args57 IDataFrameServiceMapExecutorArgs
  _args57.ID = id
  _args57.Src = src
  var _result59 IDataFrameServiceMapExecutorResult
  var _meta58 thrift.ResponseMeta
  _meta58, _err = p.Client_().Call(ctx, "mapExecutor", &_args57, &_result59)
  p.SetLastResponseMeta_(_meta58)
  if _err != nil {
    return
  }
  switch {
  case _result59.Ex!= nil:
    return _r, _result59.Ex
  }

  return _result59.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) MapExecutorTo(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args60 IDataFrameServiceMapExecutorToArgs
  _args60.ID = id
  _args60.Src = src
  var _result62 IDataFrameServiceMapExecutorToResult
  var _meta61 thrift.ResponseMeta
  _meta61, _err = p.Client_().Call(ctx, "mapExecutorTo", &_args60, &_result62)
  p.SetLastResponseMeta_(_meta61)
  if _err != nil {
    return
  }
  switch {
  case _result62.Ex!= nil:
    return _r, _result62.Ex
  }

  return _result62.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) GroupBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args63 IDataFrameServiceGroupByArgs
  _args63.ID = id
  _args63.Src = src
  var _result65 IDataFrameServiceGroupByResult
  var _meta64 thrift.ResponseMeta
  _meta64, _err = p.Client_().Call(ctx, "groupBy", &_args63, &_result65)
  p.SetLastResponseMeta_(_meta64)
  if _err != nil {
    return
  }
  switch {
  case _result65.Ex!= nil:
    return _r, _result65.Ex
  }

  return _result65.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - NumPartitions
func (p *IDataFrameServiceClient) GroupBy2(ctx context.Context, id *IDataFrameId, src *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args66 IDataFrameServiceGroupBy2Args
  _args66.ID = id
  _args66.Src = src
  _args66.NumPartitions = numPartitions
  var _result68 IDataFrameServiceGroupBy2Result
  var _meta67 thrift.ResponseMeta
  _meta67, _err = p.Client_().Call(ctx, "groupBy2", &_args66, &_result68)
  p.SetLastResponseMeta_(_meta67)
  if _err != nil {
    return
  }
  switch {
  case _result68.Ex!= nil:
    return _r, _result68.Ex
  }

  return _result68.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Ascending
func (p *IDataFrameServiceClient) Sort(ctx context.Context, id *IDataFrameId, ascending bool) (_r *IDataFrameId, _err error) {
  var _args69 IDataFrameServiceSortArgs
  _args69.ID = id
  _args69.Ascending = ascending
  var _result71 IDataFrameServiceSortResult
  var _meta70 thrift.ResponseMeta
  _meta70, _err = p.Client_().Call(ctx, "sort", &_args69, &_result71)
  p.SetLastResponseMeta_(_meta70)
  if _err != nil {
    return
  }
  switch {
  case _result71.Ex!= nil:
    return _r, _result71.Ex
  }

  return _result71.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Ascending
//  - NumPartitions
func (p *IDataFrameServiceClient) Sort2(ctx context.Context, id *IDataFrameId, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args72 IDataFrameServiceSort2Args
  _args72.ID = id
  _args72.Ascending = ascending
  _args72.NumPartitions = numPartitions
  var _result74 IDataFrameServiceSort2Result
  var _meta73 thrift.ResponseMeta
  _meta73, _err = p.Client_().Call(ctx, "sort2", &_args72, &_result74)
  p.SetLastResponseMeta_(_meta73)
  if _err != nil {
    return
  }
  switch {
  case _result74.Ex!= nil:
    return _r, _result74.Ex
  }

  return _result74.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - Ascending
func (p *IDataFrameServiceClient) SortBy(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool) (_r *IDataFrameId, _err error) {
  var _args75 IDataFrameServiceSortByArgs
  _args75.ID = id
  _args75.Src = src
  _args75.Ascending = ascending
  var _result77 IDataFrameServiceSortByResult
  var _meta76 thrift.ResponseMeta
  _meta76, _err = p.Client_().Call(ctx, "sortBy", &_args75, &_result77)
  p.SetLastResponseMeta_(_meta76)
  if _err != nil {
    return
  }
  switch {
  case _result77.Ex!= nil:
    return _r, _result77.Ex
  }

  return _result77.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - Ascending
//  - NumPartitions
func (p *IDataFrameServiceClient) SortBy3(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args78 IDataFrameServiceSortBy3Args
  _args78.ID = id
  _args78.Src = src
  _args78.Ascending = ascending
  _args78.NumPartitions = numPartitions
  var _result80 IDataFrameServiceSortBy3Result
  var _meta79 thrift.ResponseMeta
  _meta79, _err = p.Client_().Call(ctx, "sortBy3", &_args78, &_result80)
  p.SetLastResponseMeta_(_meta79)
  if _err != nil {
    return
  }
  switch {
  case _result80.Ex!= nil:
    return _r, _result80.Ex
  }

  return _result80.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Other
//  - PreserveOrder
func (p *IDataFrameServiceClient) Union_(ctx context.Context, id *IDataFrameId, other *IDataFrameId, preserveOrder bool) (_r *IDataFrameId, _err error) {
  var _args81 IDataFrameServiceUnion_Args
  _args81.ID = id
  _args81.Other = other
  _args81.PreserveOrder = preserveOrder
  var _result83 IDataFrameServiceUnion_Result
  var _meta82 thrift.ResponseMeta
  _meta82, _err = p.Client_().Call(ctx, "union_", &_args81, &_result83)
  p.SetLastResponseMeta_(_meta82)
  if _err != nil {
    return
  }
  switch {
  case _result83.Ex!= nil:
    return _r, _result83.Ex
  }

  return _result83.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Other
//  - PreserveOrder
//  - Src
func (p *IDataFrameServiceClient) Union4(ctx context.Context, id *IDataFrameId, other *IDataFrameId, preserveOrder bool, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args84 IDataFrameServiceUnion4Args
  _args84.ID = id
  _args84.Other = other
  _args84.PreserveOrder = preserveOrder
  _args84.Src = src
  var _result86 IDataFrameServiceUnion4Result
  var _meta85 thrift.ResponseMeta
  _meta85, _err = p.Client_().Call(ctx, "union4", &_args84, &_result86)
  p.SetLastResponseMeta_(_meta85)
  if _err != nil {
    return
  }
  switch {
  case _result86.Ex!= nil:
    return _r, _result86.Ex
  }

  return _result86.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Other
func (p *IDataFrameServiceClient) Join(ctx context.Context, id *IDataFrameId, other *IDataFrameId) (_r *IDataFrameId, _err error) {
  var _args87 IDataFrameServiceJoinArgs
  _args87.ID = id
  _args87.Other = other
  var _result89 IDataFrameServiceJoinResult
  var _meta88 thrift.ResponseMeta
  _meta88, _err = p.Client_().Call(ctx, "join", &_args87, &_result89)
  p.SetLastResponseMeta_(_meta88)
  if _err != nil {
    return
  }
  switch {
  case _result89.Ex!= nil:
    return _r, _result89.Ex
  }

  return _result89.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Other
//  - NumPartitions
func (p *IDataFrameServiceClient) Join3a(ctx context.Context, id *IDataFrameId, other *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args90 IDataFrameServiceJoin3aArgs
  _args90.ID = id
  _args90.Other = other
  _args90.NumPartitions = numPartitions
  var _result92 IDataFrameServiceJoin3aResult
  var _meta91 thrift.ResponseMeta
  _meta91, _err = p.Client_().Call(ctx, "join3a", &_args90, &_result92)
  p.SetLastResponseMeta_(_meta91)
  if _err != nil {
    return
  }
  switch {
  case _result92.Ex!= nil:
    return _r, _result92.Ex
  }

  return _result92.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Other
//  - Src
func (p *IDataFrameServiceClient) Join3b(ctx context.Context, id *IDataFrameId, other *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args93 IDataFrameServiceJoin3bArgs
  _args93.ID = id
  _args93.Other = other
  _args93.Src = src
  var _result95 IDataFrameServiceJoin3bResult
  var _meta94 thrift.ResponseMeta
  _meta94, _err = p.Client_().Call(ctx, "join3b", &_args93, &_result95)
  p.SetLastResponseMeta_(_meta94)
  if _err != nil {
    return
  }
  return _result95.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Other
//  - NumPartitions
//  - Src
func (p *IDataFrameServiceClient) Join4(ctx context.Context, id *IDataFrameId, other *IDataFrameId, numPartitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args96 IDataFrameServiceJoin4Args
  _args96.ID = id
  _args96.Other = other
  _args96.NumPartitions = numPartitions
  _args96.Src = src
  var _result98 IDataFrameServiceJoin4Result
  var _meta97 thrift.ResponseMeta
  _meta97, _err = p.Client_().Call(ctx, "join4", &_args96, &_result98)
  p.SetLastResponseMeta_(_meta97)
  if _err != nil {
    return
  }
  switch {
  case _result98.Ex!= nil:
    return _r, _result98.Ex
  }

  return _result98.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *IDataFrameServiceClient) Distinct(ctx context.Context, id *IDataFrameId) (_r *IDataFrameId, _err error) {
  var _args99 IDataFrameServiceDistinctArgs
  _args99.ID = id
  var _result101 IDataFrameServiceDistinctResult
  var _meta100 thrift.ResponseMeta
  _meta100, _err = p.Client_().Call(ctx, "distinct", &_args99, &_result101)
  p.SetLastResponseMeta_(_meta100)
  if _err != nil {
    return
  }
  switch {
  case _result101.Ex!= nil:
    return _r, _result101.Ex
  }

  return _result101.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - NumPartitions
func (p *IDataFrameServiceClient) Distinct2a(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args102 IDataFrameServiceDistinct2aArgs
  _args102.ID = id
  _args102.NumPartitions = numPartitions
  var _result104 IDataFrameServiceDistinct2aResult
  var _meta103 thrift.ResponseMeta
  _meta103, _err = p.Client_().Call(ctx, "distinct2a", &_args102, &_result104)
  p.SetLastResponseMeta_(_meta103)
  if _err != nil {
    return
  }
  switch {
  case _result104.Ex!= nil:
    return _r, _result104.Ex
  }

  return _result104.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) Distinct2b(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args105 IDataFrameServiceDistinct2bArgs
  _args105.ID = id
  _args105.Src = src
  var _result107 IDataFrameServiceDistinct2bResult
  var _meta106 thrift.ResponseMeta
  _meta106, _err = p.Client_().Call(ctx, "distinct2b", &_args105, &_result107)
  p.SetLastResponseMeta_(_meta106)
  if _err != nil {
    return
  }
  switch {
  case _result107.Ex!= nil:
    return _r, _result107.Ex
  }

  return _result107.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - NumPartitions
//  - Src
func (p *IDataFrameServiceClient) Distinct3(ctx context.Context, id *IDataFrameId, numPartitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args108 IDataFrameServiceDistinct3Args
  _args108.ID = id
  _args108.NumPartitions = numPartitions
  _args108.Src = src
  var _result110 IDataFrameServiceDistinct3Result
  var _meta109 thrift.ResponseMeta
  _meta109, _err = p.Client_().Call(ctx, "distinct3", &_args108, &_result110)
  p.SetLastResponseMeta_(_meta109)
  if _err != nil {
    return
  }
  switch {
  case _result110.Ex!= nil:
    return _r, _result110.Ex
  }

  return _result110.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - Tp
func (p *IDataFrameServiceClient) Reduce(ctx context.Context, id *IDataFrameId, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args111 IDataFrameServiceReduceArgs
  _args111.ID = id
  _args111.Src = src
  _args111.Tp = tp
  var _result113 IDataFrameServiceReduceResult
  var _meta112 thrift.ResponseMeta
  _meta112, _err = p.Client_().Call(ctx, "reduce", &_args111, &_result113)
  p.SetLastResponseMeta_(_meta112)
  if _err != nil {
    return
  }
  switch {
  case _result113.Ex!= nil:
    return _r, _result113.Ex
  }

  return _result113.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - Tp
func (p *IDataFrameServiceClient) TreeReduce(ctx context.Context, id *IDataFrameId, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args114 IDataFrameServiceTreeReduceArgs
  _args114.ID = id
  _args114.Src = src
  _args114.Tp = tp
  var _result116 IDataFrameServiceTreeReduceResult
  var _meta115 thrift.ResponseMeta
  _meta115, _err = p.Client_().Call(ctx, "treeReduce", &_args114, &_result116)
  p.SetLastResponseMeta_(_meta115)
  if _err != nil {
    return
  }
  switch {
  case _result116.Ex!= nil:
    return _r, _result116.Ex
  }

  return _result116.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Tp
func (p *IDataFrameServiceClient) Collect(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error) {
  var _args117 IDataFrameServiceCollectArgs
  _args117.ID = id
  _args117.Tp = tp
  var _result119 IDataFrameServiceCollectResult
  var _meta118 thrift.ResponseMeta
  _meta118, _err = p.Client_().Call(ctx, "collect", &_args117, &_result119)
  p.SetLastResponseMeta_(_meta118)
  if _err != nil {
    return
  }
  switch {
  case _result119.Ex!= nil:
    return _r, _result119.Ex
  }

  return _result119.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
//  - Tp
func (p *IDataFrameServiceClient) Aggregate(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args120 IDataFrameServiceAggregateArgs
  _args120.ID = id
  _args120.Zero = zero
  _args120.SeqOp = seqOp
  _args120.CombOp = combOp
  _args120.Tp = tp
  var _result122 IDataFrameServiceAggregateResult
  var _meta121 thrift.ResponseMeta
  _meta121, _err = p.Client_().Call(ctx, "aggregate", &_args120, &_result122)
  p.SetLastResponseMeta_(_meta121)
  if _err != nil {
    return
  }
  switch {
  case _result122.Ex!= nil:
    return _r, _result122.Ex
  }

  return _result122.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
//  - Tp
func (p *IDataFrameServiceClient) TreeAggregate(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args123 IDataFrameServiceTreeAggregateArgs
  _args123.ID = id
  _args123.Zero = zero
  _args123.SeqOp = seqOp
  _args123.CombOp = combOp
  _args123.Tp = tp
  var _result125 IDataFrameServiceTreeAggregateResult
  var _meta124 thrift.ResponseMeta
  _meta124, _err = p.Client_().Call(ctx, "treeAggregate", &_args123, &_result125)
  p.SetLastResponseMeta_(_meta124)
  if _err != nil {
    return
  }
  switch {
  case _result125.Ex!= nil:
    return _r, _result125.Ex
  }

  return _result125.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - Src
//  - Tp
func (p *IDataFrameServiceClient) Fold(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args126 IDataFrameServiceFoldArgs
  _args126.ID = id
  _args126.Zero = zero
  _args126.Src = src
  _args126.Tp = tp
  var _result128 IDataFrameServiceFoldResult
  var _meta127 thrift.ResponseMeta
  _meta127, _err = p.Client_().Call(ctx, "fold", &_args126, &_result128)
  p.SetLastResponseMeta_(_meta127)
  if _err != nil {
    return
  }
  switch {
  case _result128.Ex!= nil:
    return _r, _result128.Ex
  }

  return _result128.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - Src
//  - Tp
func (p *IDataFrameServiceClient) TreeFold(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args129 IDataFrameServiceTreeFoldArgs
  _args129.ID = id
  _args129.Zero = zero
  _args129.Src = src
  _args129.Tp = tp
  var _result131 IDataFrameServiceTreeFoldResult
  var _meta130 thrift.ResponseMeta
  _meta130, _err = p.Client_().Call(ctx, "treeFold", &_args129, &_result131)
  p.SetLastResponseMeta_(_meta130)
  if _err != nil {
    return
  }
  switch {
  case _result131.Ex!= nil:
    return _r, _result131.Ex
  }

  return _result131.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Num
//  - Tp
func (p *IDataFrameServiceClient) Take(ctx context.Context, id *IDataFrameId, num int64, tp *rpc.ISource) (_r int64, _err error) {
  var _args132 IDataFrameServiceTakeArgs
  _args132.ID = id
  _args132.Num = num
  _args132.Tp = tp
  var _result134 IDataFrameServiceTakeResult
  var _meta133 thrift.ResponseMeta
  _meta133, _err = p.Client_().Call(ctx, "take", &_args132, &_result134)
  p.SetLastResponseMeta_(_meta133)
  if _err != nil {
    return
  }
  switch {
  case _result134.Ex!= nil:
    return _r, _result134.Ex
  }

  return _result134.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) Foreach_(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_err error) {
  var _args135 IDataFrameServiceForeach_Args
  _args135.ID = id
  _args135.Src = src
  var _result137 IDataFrameServiceForeach_Result
  var _meta136 thrift.ResponseMeta
  _meta136, _err = p.Client_().Call(ctx, "foreach_", &_args135, &_result137)
  p.SetLastResponseMeta_(_meta136)
  if _err != nil {
    return
  }
  switch {
  case _result137.Ex!= nil:
    return _result137.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) ForeachPartition(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_err error) {
  var _args138 IDataFrameServiceForeachPartitionArgs
  _args138.ID = id
  _args138.Src = src
  var _result140 IDataFrameServiceForeachPartitionResult
  var _meta139 thrift.ResponseMeta
  _meta139, _err = p.Client_().Call(ctx, "foreachPartition", &_args138, &_result140)
  p.SetLastResponseMeta_(_meta139)
  if _err != nil {
    return
  }
  switch {
  case _result140.Ex!= nil:
    return _result140.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) ForeachExecutor(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_err error) {
  var _args141 IDataFrameServiceForeachExecutorArgs
  _args141.ID = id
  _args141.Src = src
  var _result143 IDataFrameServiceForeachExecutorResult
  var _meta142 thrift.ResponseMeta
  _meta142, _err = p.Client_().Call(ctx, "foreachExecutor", &_args141, &_result143)
  p.SetLastResponseMeta_(_meta142)
  if _err != nil {
    return
  }
  switch {
  case _result143.Ex!= nil:
    return _result143.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Num
//  - Tp
func (p *IDataFrameServiceClient) Top(ctx context.Context, id *IDataFrameId, num int64, tp *rpc.ISource) (_r int64, _err error) {
  var _args144 IDataFrameServiceTopArgs
  _args144.ID = id
  _args144.Num = num
  _args144.Tp = tp
  var _result146 IDataFrameServiceTopResult
  var _meta145 thrift.ResponseMeta
  _meta145, _err = p.Client_().Call(ctx, "top", &_args144, &_result146)
  p.SetLastResponseMeta_(_meta145)
  if _err != nil {
    return
  }
  switch {
  case _result146.Ex!= nil:
    return _r, _result146.Ex
  }

  return _result146.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Num
//  - Cmp
//  - Tp
func (p *IDataFrameServiceClient) Top4(ctx context.Context, id *IDataFrameId, num int64, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args147 IDataFrameServiceTop4Args
  _args147.ID = id
  _args147.Num = num
  _args147.Cmp = cmp
  _args147.Tp = tp
  var _result149 IDataFrameServiceTop4Result
  var _meta148 thrift.ResponseMeta
  _meta148, _err = p.Client_().Call(ctx, "top4", &_args147, &_result149)
  p.SetLastResponseMeta_(_meta148)
  if _err != nil {
    return
  }
  switch {
  case _result149.Ex!= nil:
    return _r, _result149.Ex
  }

  return _result149.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Num
//  - Tp
func (p *IDataFrameServiceClient) TakeOrdered(ctx context.Context, id *IDataFrameId, num int64, tp *rpc.ISource) (_r int64, _err error) {
  var _args150 IDataFrameServiceTakeOrderedArgs
  _args150.ID = id
  _args150.Num = num
  _args150.Tp = tp
  var _result152 IDataFrameServiceTakeOrderedResult
  var _meta151 thrift.ResponseMeta
  _meta151, _err = p.Client_().Call(ctx, "takeOrdered", &_args150, &_result152)
  p.SetLastResponseMeta_(_meta151)
  if _err != nil {
    return
  }
  switch {
  case _result152.Ex!= nil:
    return _r, _result152.Ex
  }

  return _result152.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Num
//  - Cmp
//  - Tp
func (p *IDataFrameServiceClient) TakeOrdered4(ctx context.Context, id *IDataFrameId, num int64, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args153 IDataFrameServiceTakeOrdered4Args
  _args153.ID = id
  _args153.Num = num
  _args153.Cmp = cmp
  _args153.Tp = tp
  var _result155 IDataFrameServiceTakeOrdered4Result
  var _meta154 thrift.ResponseMeta
  _meta154, _err = p.Client_().Call(ctx, "takeOrdered4", &_args153, &_result155)
  p.SetLastResponseMeta_(_meta154)
  if _err != nil {
    return
  }
  switch {
  case _result155.Ex!= nil:
    return _r, _result155.Ex
  }

  return _result155.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - WithReplacement
//  - Fraction
//  - Seed
func (p *IDataFrameServiceClient) Sample(ctx context.Context, id *IDataFrameId, withReplacement bool, fraction float64, seed int32) (_r *IDataFrameId, _err error) {
  var _args156 IDataFrameServiceSampleArgs
  _args156.ID = id
  _args156.WithReplacement = withReplacement
  _args156.Fraction = fraction
  _args156.Seed = seed
  var _result158 IDataFrameServiceSampleResult
  var _meta157 thrift.ResponseMeta
  _meta157, _err = p.Client_().Call(ctx, "sample", &_args156, &_result158)
  p.SetLastResponseMeta_(_meta157)
  if _err != nil {
    return
  }
  switch {
  case _result158.Ex!= nil:
    return _r, _result158.Ex
  }

  return _result158.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - WithReplacement
//  - Num
//  - Seed
//  - Tp
func (p *IDataFrameServiceClient) TakeSample(ctx context.Context, id *IDataFrameId, withReplacement bool, num int64, seed int32, tp *rpc.ISource) (_r int64, _err error) {
  var _args159 IDataFrameServiceTakeSampleArgs
  _args159.ID = id
  _args159.WithReplacement = withReplacement
  _args159.Num = num
  _args159.Seed = seed
  _args159.Tp = tp
  var _result161 IDataFrameServiceTakeSampleResult
  var _meta160 thrift.ResponseMeta
  _meta160, _err = p.Client_().Call(ctx, "takeSample", &_args159, &_result161)
  p.SetLastResponseMeta_(_meta160)
  if _err != nil {
    return
  }
  switch {
  case _result161.Ex!= nil:
    return _r, _result161.Ex
  }

  return _result161.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *IDataFrameServiceClient) Count(ctx context.Context, id *IDataFrameId) (_r int64, _err error) {
  var _args162 IDataFrameServiceCountArgs
  _args162.ID = id
  var _result164 IDataFrameServiceCountResult
  var _meta163 thrift.ResponseMeta
  _meta163, _err = p.Client_().Call(ctx, "count", &_args162, &_result164)
  p.SetLastResponseMeta_(_meta163)
  if _err != nil {
    return
  }
  switch {
  case _result164.Ex!= nil:
    return _r, _result164.Ex
  }

  return _result164.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Tp
func (p *IDataFrameServiceClient) Max(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error) {
  var _args165 IDataFrameServiceMaxArgs
  _args165.ID = id
  _args165.Tp = tp
  var _result167 IDataFrameServiceMaxResult
  var _meta166 thrift.ResponseMeta
  _meta166, _err = p.Client_().Call(ctx, "max", &_args165, &_result167)
  p.SetLastResponseMeta_(_meta166)
  if _err != nil {
    return
  }
  switch {
  case _result167.Ex!= nil:
    return _r, _result167.Ex
  }

  return _result167.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Cmp
//  - Tp
func (p *IDataFrameServiceClient) Max3(ctx context.Context, id *IDataFrameId, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args168 IDataFrameServiceMax3Args
  _args168.ID = id
  _args168.Cmp = cmp
  _args168.Tp = tp
  var _result170 IDataFrameServiceMax3Result
  var _meta169 thrift.ResponseMeta
  _meta169, _err = p.Client_().Call(ctx, "max3", &_args168, &_result170)
  p.SetLastResponseMeta_(_meta169)
  if _err != nil {
    return
  }
  switch {
  case _result170.Ex!= nil:
    return _r, _result170.Ex
  }

  return _result170.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Tp
func (p *IDataFrameServiceClient) Min(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error) {
  var _args171 IDataFrameServiceMinArgs
  _args171.ID = id
  _args171.Tp = tp
  var _result173 IDataFrameServiceMinResult
  var _meta172 thrift.ResponseMeta
  _meta172, _err = p.Client_().Call(ctx, "min", &_args171, &_result173)
  p.SetLastResponseMeta_(_meta172)
  if _err != nil {
    return
  }
  switch {
  case _result173.Ex!= nil:
    return _r, _result173.Ex
  }

  return _result173.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Cmp
//  - Tp
func (p *IDataFrameServiceClient) Min3(ctx context.Context, id *IDataFrameId, cmp *rpc.ISource, tp *rpc.ISource) (_r int64, _err error) {
  var _args174 IDataFrameServiceMin3Args
  _args174.ID = id
  _args174.Cmp = cmp
  _args174.Tp = tp
  var _result176 IDataFrameServiceMin3Result
  var _meta175 thrift.ResponseMeta
  _meta175, _err = p.Client_().Call(ctx, "min3", &_args174, &_result176)
  p.SetLastResponseMeta_(_meta175)
  if _err != nil {
    return
  }
  switch {
  case _result176.Ex!= nil:
    return _r, _result176.Ex
  }

  return _result176.GetSuccess(), nil
}

// *****************************************Key-Value******************************************
// 
// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) FlatMapValues(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args177 IDataFrameServiceFlatMapValuesArgs
  _args177.ID = id
  _args177.Src = src
  var _result179 IDataFrameServiceFlatMapValuesResult
  var _meta178 thrift.ResponseMeta
  _meta178, _err = p.Client_().Call(ctx, "flatMapValues", &_args177, &_result179)
  p.SetLastResponseMeta_(_meta178)
  if _err != nil {
    return
  }
  switch {
  case _result179.Ex!= nil:
    return _r, _result179.Ex
  }

  return _result179.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) MapValues(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args180 IDataFrameServiceMapValuesArgs
  _args180.ID = id
  _args180.Src = src
  var _result182 IDataFrameServiceMapValuesResult
  var _meta181 thrift.ResponseMeta
  _meta181, _err = p.Client_().Call(ctx, "mapValues", &_args180, &_result182)
  p.SetLastResponseMeta_(_meta181)
  if _err != nil {
    return
  }
  switch {
  case _result182.Ex!= nil:
    return _r, _result182.Ex
  }

  return _result182.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *IDataFrameServiceClient) GroupByKey(ctx context.Context, id *IDataFrameId) (_r *IDataFrameId, _err error) {
  var _args183 IDataFrameServiceGroupByKeyArgs
  _args183.ID = id
  var _result185 IDataFrameServiceGroupByKeyResult
  var _meta184 thrift.ResponseMeta
  _meta184, _err = p.Client_().Call(ctx, "groupByKey", &_args183, &_result185)
  p.SetLastResponseMeta_(_meta184)
  if _err != nil {
    return
  }
  switch {
  case _result185.Ex!= nil:
    return _r, _result185.Ex
  }

  return _result185.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - NumPartitions
func (p *IDataFrameServiceClient) GroupByKey2a(ctx context.Context, id *IDataFrameId, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args186 IDataFrameServiceGroupByKey2aArgs
  _args186.ID = id
  _args186.NumPartitions = numPartitions
  var _result188 IDataFrameServiceGroupByKey2aResult
  var _meta187 thrift.ResponseMeta
  _meta187, _err = p.Client_().Call(ctx, "groupByKey2a", &_args186, &_result188)
  p.SetLastResponseMeta_(_meta187)
  if _err != nil {
    return
  }
  switch {
  case _result188.Ex!= nil:
    return _r, _result188.Ex
  }

  return _result188.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
func (p *IDataFrameServiceClient) GroupByKey2b(ctx context.Context, id *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args189 IDataFrameServiceGroupByKey2bArgs
  _args189.ID = id
  _args189.Src = src
  var _result191 IDataFrameServiceGroupByKey2bResult
  var _meta190 thrift.ResponseMeta
  _meta190, _err = p.Client_().Call(ctx, "groupByKey2b", &_args189, &_result191)
  p.SetLastResponseMeta_(_meta190)
  if _err != nil {
    return
  }
  switch {
  case _result191.Ex!= nil:
    return _r, _result191.Ex
  }

  return _result191.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - NumPartitions
//  - Src
func (p *IDataFrameServiceClient) GroupByKey3(ctx context.Context, id *IDataFrameId, numPartitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args192 IDataFrameServiceGroupByKey3Args
  _args192.ID = id
  _args192.NumPartitions = numPartitions
  _args192.Src = src
  var _result194 IDataFrameServiceGroupByKey3Result
  var _meta193 thrift.ResponseMeta
  _meta193, _err = p.Client_().Call(ctx, "groupByKey3", &_args192, &_result194)
  p.SetLastResponseMeta_(_meta193)
  if _err != nil {
    return
  }
  switch {
  case _result194.Ex!= nil:
    return _r, _result194.Ex
  }

  return _result194.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - LocalReduce
func (p *IDataFrameServiceClient) ReduceByKey(ctx context.Context, id *IDataFrameId, src *rpc.ISource, localReduce bool) (_r *IDataFrameId, _err error) {
  var _args195 IDataFrameServiceReduceByKeyArgs
  _args195.ID = id
  _args195.Src = src
  _args195.LocalReduce = localReduce
  var _result197 IDataFrameServiceReduceByKeyResult
  var _meta196 thrift.ResponseMeta
  _meta196, _err = p.Client_().Call(ctx, "reduceByKey", &_args195, &_result197)
  p.SetLastResponseMeta_(_meta196)
  if _err != nil {
    return
  }
  switch {
  case _result197.Ex!= nil:
    return _r, _result197.Ex
  }

  return _result197.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - NumPartitions
//  - LocalReduce
func (p *IDataFrameServiceClient) ReduceByKey4(ctx context.Context, id *IDataFrameId, src *rpc.ISource, numPartitions int64, localReduce bool) (_r *IDataFrameId, _err error) {
  var _args198 IDataFrameServiceReduceByKey4Args
  _args198.ID = id
  _args198.Src = src
  _args198.NumPartitions = numPartitions
  _args198.LocalReduce = localReduce
  var _result200 IDataFrameServiceReduceByKey4Result
  var _meta199 thrift.ResponseMeta
  _meta199, _err = p.Client_().Call(ctx, "reduceByKey4", &_args198, &_result200)
  p.SetLastResponseMeta_(_meta199)
  if _err != nil {
    return
  }
  switch {
  case _result200.Ex!= nil:
    return _r, _result200.Ex
  }

  return _result200.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - SeqOp
func (p *IDataFrameServiceClient) AggregateByKey(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args201 IDataFrameServiceAggregateByKeyArgs
  _args201.ID = id
  _args201.Zero = zero
  _args201.SeqOp = seqOp
  var _result203 IDataFrameServiceAggregateByKeyResult
  var _meta202 thrift.ResponseMeta
  _meta202, _err = p.Client_().Call(ctx, "aggregateByKey", &_args201, &_result203)
  p.SetLastResponseMeta_(_meta202)
  if _err != nil {
    return
  }
  switch {
  case _result203.Ex!= nil:
    return _r, _result203.Ex
  }

  return _result203.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - SeqOp
//  - NumPartitions
func (p *IDataFrameServiceClient) AggregateByKey4a(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args204 IDataFrameServiceAggregateByKey4aArgs
  _args204.ID = id
  _args204.Zero = zero
  _args204.SeqOp = seqOp
  _args204.NumPartitions = numPartitions
  var _result206 IDataFrameServiceAggregateByKey4aResult
  var _meta205 thrift.ResponseMeta
  _meta205, _err = p.Client_().Call(ctx, "aggregateByKey4a", &_args204, &_result206)
  p.SetLastResponseMeta_(_meta205)
  if _err != nil {
    return
  }
  switch {
  case _result206.Ex!= nil:
    return _r, _result206.Ex
  }

  return _result206.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
func (p *IDataFrameServiceClient) AggregateByKey4b(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args207 IDataFrameServiceAggregateByKey4bArgs
  _args207.ID = id
  _args207.Zero = zero
  _args207.SeqOp = seqOp
  _args207.CombOp = combOp
  var _result209 IDataFrameServiceAggregateByKey4bResult
  var _meta208 thrift.ResponseMeta
  _meta208, _err = p.Client_().Call(ctx, "aggregateByKey4b", &_args207, &_result209)
  p.SetLastResponseMeta_(_meta208)
  if _err != nil {
    return
  }
  switch {
  case _result209.Ex!= nil:
    return _r, _result209.Ex
  }

  return _result209.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
//  - NumPartitions
func (p *IDataFrameServiceClient) AggregateByKey5(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, seqOp *rpc.ISource, combOp *rpc.ISource, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args210 IDataFrameServiceAggregateByKey5Args
  _args210.ID = id
  _args210.Zero = zero
  _args210.SeqOp = seqOp
  _args210.CombOp = combOp
  _args210.NumPartitions = numPartitions
  var _result212 IDataFrameServiceAggregateByKey5Result
  var _meta211 thrift.ResponseMeta
  _meta211, _err = p.Client_().Call(ctx, "aggregateByKey5", &_args210, &_result212)
  p.SetLastResponseMeta_(_meta211)
  if _err != nil {
    return
  }
  switch {
  case _result212.Ex!= nil:
    return _r, _result212.Ex
  }

  return _result212.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - Src
//  - LocalFold
func (p *IDataFrameServiceClient) FoldByKey(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, localFold bool) (_r *IDataFrameId, _err error) {
  var _args213 IDataFrameServiceFoldByKeyArgs
  _args213.ID = id
  _args213.Zero = zero
  _args213.Src = src
  _args213.LocalFold = localFold
  var _result215 IDataFrameServiceFoldByKeyResult
  var _meta214 thrift.ResponseMeta
  _meta214, _err = p.Client_().Call(ctx, "foldByKey", &_args213, &_result215)
  p.SetLastResponseMeta_(_meta214)
  if _err != nil {
    return
  }
  switch {
  case _result215.Ex!= nil:
    return _r, _result215.Ex
  }

  return _result215.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Zero
//  - Src
//  - NumPartitions
//  - LocalFold
func (p *IDataFrameServiceClient) FoldByKey5(ctx context.Context, id *IDataFrameId, zero *rpc.ISource, src *rpc.ISource, numPartitions int64, localFold bool) (_r *IDataFrameId, _err error) {
  var _args216 IDataFrameServiceFoldByKey5Args
  _args216.ID = id
  _args216.Zero = zero
  _args216.Src = src
  _args216.NumPartitions = numPartitions
  _args216.LocalFold = localFold
  var _result218 IDataFrameServiceFoldByKey5Result
  var _meta217 thrift.ResponseMeta
  _meta217, _err = p.Client_().Call(ctx, "foldByKey5", &_args216, &_result218)
  p.SetLastResponseMeta_(_meta217)
  if _err != nil {
    return
  }
  switch {
  case _result218.Ex!= nil:
    return _r, _result218.Ex
  }

  return _result218.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Ascending
func (p *IDataFrameServiceClient) SortByKey(ctx context.Context, id *IDataFrameId, ascending bool) (_r *IDataFrameId, _err error) {
  var _args219 IDataFrameServiceSortByKeyArgs
  _args219.ID = id
  _args219.Ascending = ascending
  var _result221 IDataFrameServiceSortByKeyResult
  var _meta220 thrift.ResponseMeta
  _meta220, _err = p.Client_().Call(ctx, "sortByKey", &_args219, &_result221)
  p.SetLastResponseMeta_(_meta220)
  if _err != nil {
    return
  }
  switch {
  case _result221.Ex!= nil:
    return _r, _result221.Ex
  }

  return _result221.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Ascending
//  - NumPartitions
func (p *IDataFrameServiceClient) SortByKey3a(ctx context.Context, id *IDataFrameId, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args222 IDataFrameServiceSortByKey3aArgs
  _args222.ID = id
  _args222.Ascending = ascending
  _args222.NumPartitions = numPartitions
  var _result224 IDataFrameServiceSortByKey3aResult
  var _meta223 thrift.ResponseMeta
  _meta223, _err = p.Client_().Call(ctx, "sortByKey3a", &_args222, &_result224)
  p.SetLastResponseMeta_(_meta223)
  if _err != nil {
    return
  }
  switch {
  case _result224.Ex!= nil:
    return _r, _result224.Ex
  }

  return _result224.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - Ascending
func (p *IDataFrameServiceClient) SortByKey3b(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool) (_r *IDataFrameId, _err error) {
  var _args225 IDataFrameServiceSortByKey3bArgs
  _args225.ID = id
  _args225.Src = src
  _args225.Ascending = ascending
  var _result227 IDataFrameServiceSortByKey3bResult
  var _meta226 thrift.ResponseMeta
  _meta226, _err = p.Client_().Call(ctx, "sortByKey3b", &_args225, &_result227)
  p.SetLastResponseMeta_(_meta226)
  if _err != nil {
    return
  }
  switch {
  case _result227.Ex!= nil:
    return _r, _result227.Ex
  }

  return _result227.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Src
//  - Ascending
//  - NumPartitions
func (p *IDataFrameServiceClient) SortByKey4(ctx context.Context, id *IDataFrameId, src *rpc.ISource, ascending bool, numPartitions int64) (_r *IDataFrameId, _err error) {
  var _args228 IDataFrameServiceSortByKey4Args
  _args228.ID = id
  _args228.Src = src
  _args228.Ascending = ascending
  _args228.NumPartitions = numPartitions
  var _result230 IDataFrameServiceSortByKey4Result
  var _meta229 thrift.ResponseMeta
  _meta229, _err = p.Client_().Call(ctx, "sortByKey4", &_args228, &_result230)
  p.SetLastResponseMeta_(_meta229)
  if _err != nil {
    return
  }
  switch {
  case _result230.Ex!= nil:
    return _r, _result230.Ex
  }

  return _result230.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Tp
func (p *IDataFrameServiceClient) Keys(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error) {
  var _args231 IDataFrameServiceKeysArgs
  _args231.ID = id
  _args231.Tp = tp
  var _result233 IDataFrameServiceKeysResult
  var _meta232 thrift.ResponseMeta
  _meta232, _err = p.Client_().Call(ctx, "keys", &_args231, &_result233)
  p.SetLastResponseMeta_(_meta232)
  if _err != nil {
    return
  }
  switch {
  case _result233.Ex!= nil:
    return _r, _result233.Ex
  }

  return _result233.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Tp
func (p *IDataFrameServiceClient) Values(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error) {
  var _args234 IDataFrameServiceValuesArgs
  _args234.ID = id
  _args234.Tp = tp
  var _result236 IDataFrameServiceValuesResult
  var _meta235 thrift.ResponseMeta
  _meta235, _err = p.Client_().Call(ctx, "values", &_args234, &_result236)
  p.SetLastResponseMeta_(_meta235)
  if _err != nil {
    return
  }
  switch {
  case _result236.Ex!= nil:
    return _r, _result236.Ex
  }

  return _result236.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - WithReplacement
//  - Fractions
//  - Seed
func (p *IDataFrameServiceClient) SampleByKey(ctx context.Context, id *IDataFrameId, withReplacement bool, fractions *rpc.ISource, seed int32) (_r *IDataFrameId, _err error) {
  var _args237 IDataFrameServiceSampleByKeyArgs
  _args237.ID = id
  _args237.WithReplacement = withReplacement
  _args237.Fractions = fractions
  _args237.Seed = seed
  var _result239 IDataFrameServiceSampleByKeyResult
  var _meta238 thrift.ResponseMeta
  _meta238, _err = p.Client_().Call(ctx, "sampleByKey", &_args237, &_result239)
  p.SetLastResponseMeta_(_meta238)
  if _err != nil {
    return
  }
  switch {
  case _result239.Ex!= nil:
    return _r, _result239.Ex
  }

  return _result239.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Tp
func (p *IDataFrameServiceClient) CountByKey(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error) {
  var _args240 IDataFrameServiceCountByKeyArgs
  _args240.ID = id
  _args240.Tp = tp
  var _result242 IDataFrameServiceCountByKeyResult
  var _meta241 thrift.ResponseMeta
  _meta241, _err = p.Client_().Call(ctx, "countByKey", &_args240, &_result242)
  p.SetLastResponseMeta_(_meta241)
  if _err != nil {
    return
  }
  switch {
  case _result242.Ex!= nil:
    return _r, _result242.Ex
  }

  return _result242.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Tp
func (p *IDataFrameServiceClient) CountByValue(ctx context.Context, id *IDataFrameId, tp *rpc.ISource) (_r int64, _err error) {
  var _args243 IDataFrameServiceCountByValueArgs
  _args243.ID = id
  _args243.Tp = tp
  var _result245 IDataFrameServiceCountByValueResult
  var _meta244 thrift.ResponseMeta
  _meta244, _err = p.Client_().Call(ctx, "countByValue", &_args243, &_result245)
  p.SetLastResponseMeta_(_meta244)
  if _err != nil {
    return
  }
  switch {
  case _result245.Ex!= nil:
    return _r, _result245.Ex
  }

  return _result245.GetSuccess(), nil
}

type IDataFrameServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IDataFrameService
}

func (p *IDataFrameServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IDataFrameServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IDataFrameServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIDataFrameServiceProcessor(handler IDataFrameService) *IDataFrameServiceProcessor {

  self246 := &IDataFrameServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self246.processorMap["setName"] = &iDataFrameServiceProcessorSetName{handler:handler}
  self246.processorMap["persist"] = &iDataFrameServiceProcessorPersist{handler:handler}
  self246.processorMap["cache"] = &iDataFrameServiceProcessorCache{handler:handler}
  self246.processorMap["unpersist"] = &iDataFrameServiceProcessorUnpersist{handler:handler}
  self246.processorMap["uncache"] = &iDataFrameServiceProcessorUncache{handler:handler}
  self246.processorMap["partitions"] = &iDataFrameServiceProcessorPartitions{handler:handler}
  self246.processorMap["saveAsObjectFile"] = &iDataFrameServiceProcessorSaveAsObjectFile{handler:handler}
  self246.processorMap["saveAsTextFile"] = &iDataFrameServiceProcessorSaveAsTextFile{handler:handler}
  self246.processorMap["saveAsJsonFile"] = &iDataFrameServiceProcessorSaveAsJsonFile{handler:handler}
  self246.processorMap["repartition"] = &iDataFrameServiceProcessorRepartition{handler:handler}
  self246.processorMap["partitionByRandom"] = &iDataFrameServiceProcessorPartitionByRandom{handler:handler}
  self246.processorMap["partitionByHash"] = &iDataFrameServiceProcessorPartitionByHash{handler:handler}
  self246.processorMap["partitionBy"] = &iDataFrameServiceProcessorPartitionBy{handler:handler}
  self246.processorMap["map_"] = &iDataFrameServiceProcessorMap_{handler:handler}
  self246.processorMap["filter"] = &iDataFrameServiceProcessorFilter{handler:handler}
  self246.processorMap["flatmap"] = &iDataFrameServiceProcessorFlatmap{handler:handler}
  self246.processorMap["keyBy"] = &iDataFrameServiceProcessorKeyBy{handler:handler}
  self246.processorMap["mapPartitions"] = &iDataFrameServiceProcessorMapPartitions{handler:handler}
  self246.processorMap["mapPartitionsWithIndex"] = &iDataFrameServiceProcessorMapPartitionsWithIndex{handler:handler}
  self246.processorMap["mapExecutor"] = &iDataFrameServiceProcessorMapExecutor{handler:handler}
  self246.processorMap["mapExecutorTo"] = &iDataFrameServiceProcessorMapExecutorTo{handler:handler}
  self246.processorMap["groupBy"] = &iDataFrameServiceProcessorGroupBy{handler:handler}
  self246.processorMap["groupBy2"] = &iDataFrameServiceProcessorGroupBy2{handler:handler}
  self246.processorMap["sort"] = &iDataFrameServiceProcessorSort{handler:handler}
  self246.processorMap["sort2"] = &iDataFrameServiceProcessorSort2{handler:handler}
  self246.processorMap["sortBy"] = &iDataFrameServiceProcessorSortBy{handler:handler}
  self246.processorMap["sortBy3"] = &iDataFrameServiceProcessorSortBy3{handler:handler}
  self246.processorMap["union_"] = &iDataFrameServiceProcessorUnion_{handler:handler}
  self246.processorMap["union4"] = &iDataFrameServiceProcessorUnion4{handler:handler}
  self246.processorMap["join"] = &iDataFrameServiceProcessorJoin{handler:handler}
  self246.processorMap["join3a"] = &iDataFrameServiceProcessorJoin3a{handler:handler}
  self246.processorMap["join3b"] = &iDataFrameServiceProcessorJoin3b{handler:handler}
  self246.processorMap["join4"] = &iDataFrameServiceProcessorJoin4{handler:handler}
  self246.processorMap["distinct"] = &iDataFrameServiceProcessorDistinct{handler:handler}
  self246.processorMap["distinct2a"] = &iDataFrameServiceProcessorDistinct2a{handler:handler}
  self246.processorMap["distinct2b"] = &iDataFrameServiceProcessorDistinct2b{handler:handler}
  self246.processorMap["distinct3"] = &iDataFrameServiceProcessorDistinct3{handler:handler}
  self246.processorMap["reduce"] = &iDataFrameServiceProcessorReduce{handler:handler}
  self246.processorMap["treeReduce"] = &iDataFrameServiceProcessorTreeReduce{handler:handler}
  self246.processorMap["collect"] = &iDataFrameServiceProcessorCollect{handler:handler}
  self246.processorMap["aggregate"] = &iDataFrameServiceProcessorAggregate{handler:handler}
  self246.processorMap["treeAggregate"] = &iDataFrameServiceProcessorTreeAggregate{handler:handler}
  self246.processorMap["fold"] = &iDataFrameServiceProcessorFold{handler:handler}
  self246.processorMap["treeFold"] = &iDataFrameServiceProcessorTreeFold{handler:handler}
  self246.processorMap["take"] = &iDataFrameServiceProcessorTake{handler:handler}
  self246.processorMap["foreach_"] = &iDataFrameServiceProcessorForeach_{handler:handler}
  self246.processorMap["foreachPartition"] = &iDataFrameServiceProcessorForeachPartition{handler:handler}
  self246.processorMap["foreachExecutor"] = &iDataFrameServiceProcessorForeachExecutor{handler:handler}
  self246.processorMap["top"] = &iDataFrameServiceProcessorTop{handler:handler}
  self246.processorMap["top4"] = &iDataFrameServiceProcessorTop4{handler:handler}
  self246.processorMap["takeOrdered"] = &iDataFrameServiceProcessorTakeOrdered{handler:handler}
  self246.processorMap["takeOrdered4"] = &iDataFrameServiceProcessorTakeOrdered4{handler:handler}
  self246.processorMap["sample"] = &iDataFrameServiceProcessorSample{handler:handler}
  self246.processorMap["takeSample"] = &iDataFrameServiceProcessorTakeSample{handler:handler}
  self246.processorMap["count"] = &iDataFrameServiceProcessorCount{handler:handler}
  self246.processorMap["max"] = &iDataFrameServiceProcessorMax{handler:handler}
  self246.processorMap["max3"] = &iDataFrameServiceProcessorMax3{handler:handler}
  self246.processorMap["min"] = &iDataFrameServiceProcessorMin{handler:handler}
  self246.processorMap["min3"] = &iDataFrameServiceProcessorMin3{handler:handler}
  self246.processorMap["flatMapValues"] = &iDataFrameServiceProcessorFlatMapValues{handler:handler}
  self246.processorMap["mapValues"] = &iDataFrameServiceProcessorMapValues{handler:handler}
  self246.processorMap["groupByKey"] = &iDataFrameServiceProcessorGroupByKey{handler:handler}
  self246.processorMap["groupByKey2a"] = &iDataFrameServiceProcessorGroupByKey2a{handler:handler}
  self246.processorMap["groupByKey2b"] = &iDataFrameServiceProcessorGroupByKey2b{handler:handler}
  self246.processorMap["groupByKey3"] = &iDataFrameServiceProcessorGroupByKey3{handler:handler}
  self246.processorMap["reduceByKey"] = &iDataFrameServiceProcessorReduceByKey{handler:handler}
  self246.processorMap["reduceByKey4"] = &iDataFrameServiceProcessorReduceByKey4{handler:handler}
  self246.processorMap["aggregateByKey"] = &iDataFrameServiceProcessorAggregateByKey{handler:handler}
  self246.processorMap["aggregateByKey4a"] = &iDataFrameServiceProcessorAggregateByKey4a{handler:handler}
  self246.processorMap["aggregateByKey4b"] = &iDataFrameServiceProcessorAggregateByKey4b{handler:handler}
  self246.processorMap["aggregateByKey5"] = &iDataFrameServiceProcessorAggregateByKey5{handler:handler}
  self246.processorMap["foldByKey"] = &iDataFrameServiceProcessorFoldByKey{handler:handler}
  self246.processorMap["foldByKey5"] = &iDataFrameServiceProcessorFoldByKey5{handler:handler}
  self246.processorMap["sortByKey"] = &iDataFrameServiceProcessorSortByKey{handler:handler}
  self246.processorMap["sortByKey3a"] = &iDataFrameServiceProcessorSortByKey3a{handler:handler}
  self246.processorMap["sortByKey3b"] = &iDataFrameServiceProcessorSortByKey3b{handler:handler}
  self246.processorMap["sortByKey4"] = &iDataFrameServiceProcessorSortByKey4{handler:handler}
  self246.processorMap["keys"] = &iDataFrameServiceProcessorKeys{handler:handler}
  self246.processorMap["values"] = &iDataFrameServiceProcessorValues{handler:handler}
  self246.processorMap["sampleByKey"] = &iDataFrameServiceProcessorSampleByKey{handler:handler}
  self246.processorMap["countByKey"] = &iDataFrameServiceProcessorCountByKey{handler:handler}
  self246.processorMap["countByValue"] = &iDataFrameServiceProcessorCountByValue{handler:handler}
return self246
}

func (p *IDataFrameServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x247 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x247.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x247

}

type iDataFrameServiceProcessorSetName struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSetName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSetNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSetNameResult{}
  if err2 = p.handler.SetName(ctx, args.ID, args.Name); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setName: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setName", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorPersist struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorPersist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServicePersistArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "persist", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServicePersistResult{}
  if err2 = p.handler.Persist(ctx, args.ID, args.Level); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing persist: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "persist", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "persist", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorCache struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceCacheArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cache", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceCacheResult{}
  if err2 = p.handler.Cache(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cache: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cache", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cache", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorUnpersist struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorUnpersist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceUnpersistArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unpersist", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceUnpersistResult{}
  if err2 = p.handler.Unpersist(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unpersist: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unpersist", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unpersist", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorUncache struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorUncache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceUncacheArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "uncache", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceUncacheResult{}
  if err2 = p.handler.Uncache(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uncache: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "uncache", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "uncache", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorPartitions struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServicePartitionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServicePartitionsResult{}
  var retval int64
  if retval, err2 = p.handler.Partitions(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSaveAsObjectFile struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSaveAsObjectFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSaveAsObjectFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "saveAsObjectFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSaveAsObjectFileResult{}
  if err2 = p.handler.SaveAsObjectFile(ctx, args.ID, args.Path, args.Compression); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveAsObjectFile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "saveAsObjectFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "saveAsObjectFile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSaveAsTextFile struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSaveAsTextFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSaveAsTextFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "saveAsTextFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSaveAsTextFileResult{}
  if err2 = p.handler.SaveAsTextFile(ctx, args.ID, args.Path); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveAsTextFile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "saveAsTextFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "saveAsTextFile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSaveAsJsonFile struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSaveAsJsonFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSaveAsJsonFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "saveAsJsonFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSaveAsJsonFileResult{}
  if err2 = p.handler.SaveAsJsonFile(ctx, args.ID, args.Path, args.Pretty); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveAsJsonFile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "saveAsJsonFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "saveAsJsonFile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorRepartition struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorRepartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceRepartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "repartition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceRepartitionResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Repartition(ctx, args.ID, args.NumPartitions, args.PreserveOrdering, args.Global_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing repartition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "repartition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "repartition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorPartitionByRandom struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorPartitionByRandom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServicePartitionByRandomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionByRandom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServicePartitionByRandomResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionByRandom(ctx, args.ID, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionByRandom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionByRandom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionByRandom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorPartitionByHash struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorPartitionByHash) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServicePartitionByHashArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionByHash", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServicePartitionByHashResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionByHash(ctx, args.ID, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionByHash: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionByHash", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionByHash", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorPartitionBy struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorPartitionBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServicePartitionByArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServicePartitionByResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionBy(ctx, args.ID, args.Src, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionBy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionBy", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMap_ struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMap_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMap_Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "map_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMap_Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Map_(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing map_: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "map_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "map_", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorFilter struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceFilterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceFilterResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Filter(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing filter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "filter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorFlatmap struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorFlatmap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceFlatmapArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "flatmap", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceFlatmapResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Flatmap(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing flatmap: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "flatmap", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "flatmap", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorKeyBy struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorKeyBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceKeyByArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "keyBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceKeyByResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.KeyBy(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing keyBy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "keyBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "keyBy", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMapPartitions struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMapPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMapPartitionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "mapPartitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMapPartitionsResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.MapPartitions(ctx, args.ID, args.Src, args.PreservesPartitioning); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mapPartitions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "mapPartitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "mapPartitions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMapPartitionsWithIndex struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMapPartitionsWithIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMapPartitionsWithIndexArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "mapPartitionsWithIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMapPartitionsWithIndexResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.MapPartitionsWithIndex(ctx, args.ID, args.Src, args.PreservesPartitioning); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mapPartitionsWithIndex: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "mapPartitionsWithIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "mapPartitionsWithIndex", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMapExecutor struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMapExecutor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMapExecutorArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "mapExecutor", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMapExecutorResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.MapExecutor(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mapExecutor: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "mapExecutor", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "mapExecutor", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMapExecutorTo struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMapExecutorTo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMapExecutorToArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "mapExecutorTo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMapExecutorToResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.MapExecutorTo(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mapExecutorTo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "mapExecutorTo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "mapExecutorTo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorGroupBy struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorGroupBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceGroupByArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "groupBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceGroupByResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.GroupBy(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupBy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "groupBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "groupBy", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorGroupBy2 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorGroupBy2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceGroupBy2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "groupBy2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceGroupBy2Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.GroupBy2(ctx, args.ID, args.Src, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupBy2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "groupBy2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "groupBy2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSort struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSort) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSortArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sort", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSortResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Sort(ctx, args.ID, args.Ascending); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sort: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sort", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sort", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSort2 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSort2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSort2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sort2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSort2Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Sort2(ctx, args.ID, args.Ascending, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sort2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sort2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sort2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSortBy struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSortBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSortByArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sortBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSortByResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.SortBy(ctx, args.ID, args.Src, args.Ascending); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sortBy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sortBy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sortBy", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSortBy3 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSortBy3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSortBy3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sortBy3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSortBy3Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.SortBy3(ctx, args.ID, args.Src, args.Ascending, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sortBy3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sortBy3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sortBy3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorUnion_ struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorUnion_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceUnion_Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "union_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceUnion_Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Union_(ctx, args.ID, args.Other, args.PreserveOrder); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing union_: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "union_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "union_", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorUnion4 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorUnion4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceUnion4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "union4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceUnion4Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Union4(ctx, args.ID, args.Other, args.PreserveOrder, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing union4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "union4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "union4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorJoin struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorJoin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceJoinArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "join", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceJoinResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Join(ctx, args.ID, args.Other); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing join: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "join", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "join", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorJoin3a struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorJoin3a) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceJoin3aArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "join3a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceJoin3aResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Join3a(ctx, args.ID, args.Other, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing join3a: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "join3a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "join3a", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorJoin3b struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorJoin3b) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceJoin3bArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "join3b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceJoin3bResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Join3b(ctx, args.ID, args.Other, args.Src); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing join3b: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "join3b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "join3b", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorJoin4 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorJoin4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceJoin4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "join4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceJoin4Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Join4(ctx, args.ID, args.Other, args.NumPartitions, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing join4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "join4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "join4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorDistinct struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorDistinct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceDistinctArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceDistinctResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Distinct(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing distinct: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "distinct", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorDistinct2a struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorDistinct2a) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceDistinct2aArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct2a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceDistinct2aResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Distinct2a(ctx, args.ID, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing distinct2a: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct2a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "distinct2a", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorDistinct2b struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorDistinct2b) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceDistinct2bArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct2b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceDistinct2bResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Distinct2b(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing distinct2b: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct2b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "distinct2b", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorDistinct3 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorDistinct3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceDistinct3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceDistinct3Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Distinct3(ctx, args.ID, args.NumPartitions, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing distinct3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "distinct3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "distinct3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorReduce struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorReduce) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceReduceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceReduceResult{}
  var retval int64
  if retval, err2 = p.handler.Reduce(ctx, args.ID, args.Src, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reduce: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reduce", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTreeReduce struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTreeReduce) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTreeReduceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "treeReduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTreeReduceResult{}
  var retval int64
  if retval, err2 = p.handler.TreeReduce(ctx, args.ID, args.Src, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing treeReduce: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "treeReduce", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "treeReduce", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorCollect struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorCollect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceCollectArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "collect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceCollectResult{}
  var retval int64
  if retval, err2 = p.handler.Collect(ctx, args.ID, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing collect: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "collect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "collect", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorAggregate struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorAggregate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceAggregateArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceAggregateResult{}
  var retval int64
  if retval, err2 = p.handler.Aggregate(ctx, args.ID, args.Zero, args.SeqOp, args.CombOp, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aggregate: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "aggregate", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTreeAggregate struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTreeAggregate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTreeAggregateArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "treeAggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTreeAggregateResult{}
  var retval int64
  if retval, err2 = p.handler.TreeAggregate(ctx, args.ID, args.Zero, args.SeqOp, args.CombOp, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing treeAggregate: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "treeAggregate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "treeAggregate", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorFold struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorFold) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceFoldArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceFoldResult{}
  var retval int64
  if retval, err2 = p.handler.Fold(ctx, args.ID, args.Zero, args.Src, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fold: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fold", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTreeFold struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTreeFold) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTreeFoldArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "treeFold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTreeFoldResult{}
  var retval int64
  if retval, err2 = p.handler.TreeFold(ctx, args.ID, args.Zero, args.Src, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing treeFold: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "treeFold", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "treeFold", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTake struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTake) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTakeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "take", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTakeResult{}
  var retval int64
  if retval, err2 = p.handler.Take(ctx, args.ID, args.Num, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing take: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "take", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "take", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorForeach_ struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorForeach_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceForeach_Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foreach_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceForeach_Result{}
  if err2 = p.handler.Foreach_(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foreach_: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foreach_", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foreach_", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorForeachPartition struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorForeachPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceForeachPartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachPartition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceForeachPartitionResult{}
  if err2 = p.handler.ForeachPartition(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foreachPartition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachPartition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foreachPartition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorForeachExecutor struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorForeachExecutor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceForeachExecutorArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachExecutor", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceForeachExecutorResult{}
  if err2 = p.handler.ForeachExecutor(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foreachExecutor: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foreachExecutor", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foreachExecutor", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTop struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTopArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "top", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTopResult{}
  var retval int64
  if retval, err2 = p.handler.Top(ctx, args.ID, args.Num, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing top: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "top", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "top", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTop4 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTop4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTop4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "top4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTop4Result{}
  var retval int64
  if retval, err2 = p.handler.Top4(ctx, args.ID, args.Num, args.Cmp, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing top4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "top4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "top4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTakeOrdered struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTakeOrdered) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTakeOrderedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTakeOrderedResult{}
  var retval int64
  if retval, err2 = p.handler.TakeOrdered(ctx, args.ID, args.Num, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing takeOrdered: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "takeOrdered", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTakeOrdered4 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTakeOrdered4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTakeOrdered4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTakeOrdered4Result{}
  var retval int64
  if retval, err2 = p.handler.TakeOrdered4(ctx, args.ID, args.Num, args.Cmp, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing takeOrdered4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "takeOrdered4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "takeOrdered4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSample struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSample) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSampleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sample", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSampleResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Sample(ctx, args.ID, args.WithReplacement, args.Fraction, args.Seed); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sample: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sample", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sample", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorTakeSample struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorTakeSample) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceTakeSampleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "takeSample", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceTakeSampleResult{}
  var retval int64
  if retval, err2 = p.handler.TakeSample(ctx, args.ID, args.WithReplacement, args.Num, args.Seed, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing takeSample: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "takeSample", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "takeSample", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorCount struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceCountArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "count", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceCountResult{}
  var retval int64
  if retval, err2 = p.handler.Count(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing count: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "count", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "count", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMax struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMax) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMaxArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "max", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMaxResult{}
  var retval int64
  if retval, err2 = p.handler.Max(ctx, args.ID, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing max: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "max", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "max", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMax3 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMax3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMax3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "max3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMax3Result{}
  var retval int64
  if retval, err2 = p.handler.Max3(ctx, args.ID, args.Cmp, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing max3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "max3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "max3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMin struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMinArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "min", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMinResult{}
  var retval int64
  if retval, err2 = p.handler.Min(ctx, args.ID, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing min: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "min", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "min", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMin3 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMin3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMin3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "min3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMin3Result{}
  var retval int64
  if retval, err2 = p.handler.Min3(ctx, args.ID, args.Cmp, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing min3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "min3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "min3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorFlatMapValues struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorFlatMapValues) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceFlatMapValuesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "flatMapValues", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceFlatMapValuesResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.FlatMapValues(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing flatMapValues: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "flatMapValues", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "flatMapValues", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorMapValues struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorMapValues) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceMapValuesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "mapValues", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceMapValuesResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.MapValues(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mapValues: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "mapValues", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "mapValues", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorGroupByKey struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorGroupByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceGroupByKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceGroupByKeyResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.GroupByKey(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupByKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "groupByKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorGroupByKey2a struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorGroupByKey2a) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceGroupByKey2aArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey2a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceGroupByKey2aResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.GroupByKey2a(ctx, args.ID, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupByKey2a: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey2a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "groupByKey2a", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorGroupByKey2b struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorGroupByKey2b) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceGroupByKey2bArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey2b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceGroupByKey2bResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.GroupByKey2b(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupByKey2b: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey2b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "groupByKey2b", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorGroupByKey3 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorGroupByKey3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceGroupByKey3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceGroupByKey3Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.GroupByKey3(ctx, args.ID, args.NumPartitions, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupByKey3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "groupByKey3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "groupByKey3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorReduceByKey struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorReduceByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceReduceByKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reduceByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceReduceByKeyResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.ReduceByKey(ctx, args.ID, args.Src, args.LocalReduce); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reduceByKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reduceByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reduceByKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorReduceByKey4 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorReduceByKey4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceReduceByKey4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reduceByKey4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceReduceByKey4Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.ReduceByKey4(ctx, args.ID, args.Src, args.NumPartitions, args.LocalReduce); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reduceByKey4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reduceByKey4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reduceByKey4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorAggregateByKey struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorAggregateByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceAggregateByKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceAggregateByKeyResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.AggregateByKey(ctx, args.ID, args.Zero, args.SeqOp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aggregateByKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "aggregateByKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorAggregateByKey4a struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorAggregateByKey4a) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceAggregateByKey4aArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey4a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceAggregateByKey4aResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.AggregateByKey4a(ctx, args.ID, args.Zero, args.SeqOp, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aggregateByKey4a: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey4a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "aggregateByKey4a", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorAggregateByKey4b struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorAggregateByKey4b) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceAggregateByKey4bArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey4b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceAggregateByKey4bResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.AggregateByKey4b(ctx, args.ID, args.Zero, args.SeqOp, args.CombOp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aggregateByKey4b: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey4b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "aggregateByKey4b", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorAggregateByKey5 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorAggregateByKey5) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceAggregateByKey5Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey5", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceAggregateByKey5Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.AggregateByKey5(ctx, args.ID, args.Zero, args.SeqOp, args.CombOp, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aggregateByKey5: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "aggregateByKey5", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "aggregateByKey5", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorFoldByKey struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorFoldByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceFoldByKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foldByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceFoldByKeyResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.FoldByKey(ctx, args.ID, args.Zero, args.Src, args.LocalFold); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foldByKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foldByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foldByKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorFoldByKey5 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorFoldByKey5) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceFoldByKey5Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "foldByKey5", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceFoldByKey5Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.FoldByKey5(ctx, args.ID, args.Zero, args.Src, args.NumPartitions, args.LocalFold); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing foldByKey5: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "foldByKey5", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "foldByKey5", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSortByKey struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSortByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSortByKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSortByKeyResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.SortByKey(ctx, args.ID, args.Ascending); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sortByKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sortByKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSortByKey3a struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSortByKey3a) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSortByKey3aArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey3a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSortByKey3aResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.SortByKey3a(ctx, args.ID, args.Ascending, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sortByKey3a: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey3a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sortByKey3a", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSortByKey3b struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSortByKey3b) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSortByKey3bArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey3b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSortByKey3bResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.SortByKey3b(ctx, args.ID, args.Src, args.Ascending); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sortByKey3b: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey3b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sortByKey3b", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSortByKey4 struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSortByKey4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSortByKey4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSortByKey4Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.SortByKey4(ctx, args.ID, args.Src, args.Ascending, args.NumPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sortByKey4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sortByKey4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sortByKey4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorKeys struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceKeysResult{}
  var retval int64
  if retval, err2 = p.handler.Keys(ctx, args.ID, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing keys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "keys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorValues struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorValues) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceValuesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "values", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceValuesResult{}
  var retval int64
  if retval, err2 = p.handler.Values(ctx, args.ID, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing values: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "values", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "values", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorSampleByKey struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorSampleByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceSampleByKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sampleByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceSampleByKeyResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.SampleByKey(ctx, args.ID, args.WithReplacement, args.Fractions, args.Seed); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sampleByKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sampleByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sampleByKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorCountByKey struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorCountByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceCountByKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "countByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceCountByKeyResult{}
  var retval int64
  if retval, err2 = p.handler.CountByKey(ctx, args.ID, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing countByKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "countByKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "countByKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iDataFrameServiceProcessorCountByValue struct {
  handler IDataFrameService
}

func (p *iDataFrameServiceProcessorCountByValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDataFrameServiceCountByValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "countByValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IDataFrameServiceCountByValueResult{}
  var retval int64
  if retval, err2 = p.handler.CountByValue(ctx, args.ID, args.Tp); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing countByValue: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "countByValue", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "countByValue", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ID
//  - Name
type IDataFrameServiceSetNameArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewIDataFrameServiceSetNameArgs() *IDataFrameServiceSetNameArgs {
  return &IDataFrameServiceSetNameArgs{}
}

var IDataFrameServiceSetNameArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSetNameArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSetNameArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSetNameArgs) GetName() string {
  return p.Name
}
func (p *IDataFrameServiceSetNameArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSetNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSetNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSetNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IDataFrameServiceSetNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSetNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSetNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IDataFrameServiceSetNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSetNameArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceSetNameResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSetNameResult() *IDataFrameServiceSetNameResult {
  return &IDataFrameServiceSetNameResult{}
}

var IDataFrameServiceSetNameResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSetNameResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSetNameResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSetNameResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSetNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSetNameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSetNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSetNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSetNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSetNameResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Level
type IDataFrameServicePersistArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Level int8 `thrift:"level,2" db:"level" json:"level"`
}

func NewIDataFrameServicePersistArgs() *IDataFrameServicePersistArgs {
  return &IDataFrameServicePersistArgs{}
}

var IDataFrameServicePersistArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServicePersistArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServicePersistArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServicePersistArgs) GetLevel() int8 {
  return p.Level
}
func (p *IDataFrameServicePersistArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServicePersistArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePersistArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServicePersistArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.Level = temp
}
  return nil
}

func (p *IDataFrameServicePersistArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "persist_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePersistArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServicePersistArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *IDataFrameServicePersistArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePersistArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServicePersistResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServicePersistResult() *IDataFrameServicePersistResult {
  return &IDataFrameServicePersistResult{}
}

var IDataFrameServicePersistResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServicePersistResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServicePersistResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServicePersistResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServicePersistResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePersistResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServicePersistResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "persist_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePersistResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePersistResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePersistResult(%+v)", *p)
}

// Attributes:
//  - ID
type IDataFrameServiceCacheArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
}

func NewIDataFrameServiceCacheArgs() *IDataFrameServiceCacheArgs {
  return &IDataFrameServiceCacheArgs{}
}

var IDataFrameServiceCacheArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceCacheArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceCacheArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IDataFrameServiceCacheArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceCacheArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCacheArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceCacheArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cache_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCacheArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceCacheArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCacheArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceCacheResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceCacheResult() *IDataFrameServiceCacheResult {
  return &IDataFrameServiceCacheResult{}
}

var IDataFrameServiceCacheResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceCacheResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceCacheResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceCacheResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceCacheResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCacheResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceCacheResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cache_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCacheResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCacheResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCacheResult(%+v)", *p)
}

// Attributes:
//  - ID
type IDataFrameServiceUnpersistArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
}

func NewIDataFrameServiceUnpersistArgs() *IDataFrameServiceUnpersistArgs {
  return &IDataFrameServiceUnpersistArgs{}
}

var IDataFrameServiceUnpersistArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUnpersistArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceUnpersistArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IDataFrameServiceUnpersistArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceUnpersistArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUnpersistArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceUnpersistArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unpersist_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUnpersistArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnpersistArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUnpersistArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceUnpersistResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceUnpersistResult() *IDataFrameServiceUnpersistResult {
  return &IDataFrameServiceUnpersistResult{}
}

var IDataFrameServiceUnpersistResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceUnpersistResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceUnpersistResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceUnpersistResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceUnpersistResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUnpersistResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceUnpersistResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unpersist_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUnpersistResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceUnpersistResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUnpersistResult(%+v)", *p)
}

// Attributes:
//  - ID
type IDataFrameServiceUncacheArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
}

func NewIDataFrameServiceUncacheArgs() *IDataFrameServiceUncacheArgs {
  return &IDataFrameServiceUncacheArgs{}
}

var IDataFrameServiceUncacheArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUncacheArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceUncacheArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IDataFrameServiceUncacheArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceUncacheArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUncacheArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceUncacheArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "uncache_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUncacheArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceUncacheArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUncacheArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceUncacheResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceUncacheResult() *IDataFrameServiceUncacheResult {
  return &IDataFrameServiceUncacheResult{}
}

var IDataFrameServiceUncacheResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceUncacheResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceUncacheResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceUncacheResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceUncacheResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUncacheResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceUncacheResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "uncache_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUncacheResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceUncacheResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUncacheResult(%+v)", *p)
}

// Attributes:
//  - ID
type IDataFrameServicePartitionsArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
}

func NewIDataFrameServicePartitionsArgs() *IDataFrameServicePartitionsArgs {
  return &IDataFrameServicePartitionsArgs{}
}

var IDataFrameServicePartitionsArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServicePartitionsArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServicePartitionsArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IDataFrameServicePartitionsArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServicePartitionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServicePartitionsResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServicePartitionsResult() *IDataFrameServicePartitionsResult {
  return &IDataFrameServicePartitionsResult{}
}

var IDataFrameServicePartitionsResult_Success_DEFAULT int64
func (p *IDataFrameServicePartitionsResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServicePartitionsResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServicePartitionsResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServicePartitionsResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServicePartitionsResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServicePartitionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServicePartitionsResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServicePartitionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServicePartitionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionsResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - Compression
type IDataFrameServiceSaveAsObjectFileArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  Compression int8 `thrift:"compression,3" db:"compression" json:"compression"`
}

func NewIDataFrameServiceSaveAsObjectFileArgs() *IDataFrameServiceSaveAsObjectFileArgs {
  return &IDataFrameServiceSaveAsObjectFileArgs{}
}

var IDataFrameServiceSaveAsObjectFileArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSaveAsObjectFileArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSaveAsObjectFileArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) GetPath() string {
  return p.Path
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) GetCompression() int8 {
  return p.Compression
}
func (p *IDataFrameServiceSaveAsObjectFileArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Compression = temp
}
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveAsObjectFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "compression", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:compression: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Compression)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compression (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:compression: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsObjectFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSaveAsObjectFileArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceSaveAsObjectFileResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSaveAsObjectFileResult() *IDataFrameServiceSaveAsObjectFileResult {
  return &IDataFrameServiceSaveAsObjectFileResult{}
}

var IDataFrameServiceSaveAsObjectFileResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSaveAsObjectFileResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSaveAsObjectFileResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSaveAsObjectFileResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSaveAsObjectFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveAsObjectFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSaveAsObjectFileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSaveAsObjectFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSaveAsObjectFileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
type IDataFrameServiceSaveAsTextFileArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewIDataFrameServiceSaveAsTextFileArgs() *IDataFrameServiceSaveAsTextFileArgs {
  return &IDataFrameServiceSaveAsTextFileArgs{}
}

var IDataFrameServiceSaveAsTextFileArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSaveAsTextFileArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSaveAsTextFileArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSaveAsTextFileArgs) GetPath() string {
  return p.Path
}
func (p *IDataFrameServiceSaveAsTextFileArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSaveAsTextFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsTextFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsTextFileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IDataFrameServiceSaveAsTextFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveAsTextFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSaveAsTextFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsTextFileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsTextFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSaveAsTextFileArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceSaveAsTextFileResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSaveAsTextFileResult() *IDataFrameServiceSaveAsTextFileResult {
  return &IDataFrameServiceSaveAsTextFileResult{}
}

var IDataFrameServiceSaveAsTextFileResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSaveAsTextFileResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSaveAsTextFileResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSaveAsTextFileResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSaveAsTextFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsTextFileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsTextFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveAsTextFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSaveAsTextFileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSaveAsTextFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSaveAsTextFileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - Pretty
type IDataFrameServiceSaveAsJsonFileArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  Pretty bool `thrift:"pretty,3" db:"pretty" json:"pretty"`
}

func NewIDataFrameServiceSaveAsJsonFileArgs() *IDataFrameServiceSaveAsJsonFileArgs {
  return &IDataFrameServiceSaveAsJsonFileArgs{}
}

var IDataFrameServiceSaveAsJsonFileArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSaveAsJsonFileArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSaveAsJsonFileArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) GetPath() string {
  return p.Path
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) GetPretty() bool {
  return p.Pretty
}
func (p *IDataFrameServiceSaveAsJsonFileArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pretty = v
}
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveAsJsonFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pretty", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pretty: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Pretty)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pretty (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pretty: ", p), err) }
  return err
}

func (p *IDataFrameServiceSaveAsJsonFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSaveAsJsonFileArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceSaveAsJsonFileResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSaveAsJsonFileResult() *IDataFrameServiceSaveAsJsonFileResult {
  return &IDataFrameServiceSaveAsJsonFileResult{}
}

var IDataFrameServiceSaveAsJsonFileResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSaveAsJsonFileResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSaveAsJsonFileResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSaveAsJsonFileResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSaveAsJsonFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveAsJsonFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSaveAsJsonFileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSaveAsJsonFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSaveAsJsonFileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
//  - PreserveOrdering
//  - Global_
type IDataFrameServiceRepartitionArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  NumPartitions int64 `thrift:"numPartitions,2" db:"numPartitions" json:"numPartitions"`
  PreserveOrdering bool `thrift:"preserveOrdering,3" db:"preserveOrdering" json:"preserveOrdering"`
  Global_ bool `thrift:"global_,4" db:"global_" json:"global_"`
}

func NewIDataFrameServiceRepartitionArgs() *IDataFrameServiceRepartitionArgs {
  return &IDataFrameServiceRepartitionArgs{}
}

var IDataFrameServiceRepartitionArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceRepartitionArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceRepartitionArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceRepartitionArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}

func (p *IDataFrameServiceRepartitionArgs) GetPreserveOrdering() bool {
  return p.PreserveOrdering
}

func (p *IDataFrameServiceRepartitionArgs) GetGlobal_() bool {
  return p.Global_
}
func (p *IDataFrameServiceRepartitionArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceRepartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceRepartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceRepartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceRepartitionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PreserveOrdering = v
}
  return nil
}

func (p *IDataFrameServiceRepartitionArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Global_ = v
}
  return nil
}

func (p *IDataFrameServiceRepartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "repartition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceRepartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceRepartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceRepartitionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preserveOrdering", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preserveOrdering: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreserveOrdering)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preserveOrdering (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preserveOrdering: ", p), err) }
  return err
}

func (p *IDataFrameServiceRepartitionArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "global_", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:global_: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Global_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.global_ (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:global_: ", p), err) }
  return err
}

func (p *IDataFrameServiceRepartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceRepartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceRepartitionResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceRepartitionResult() *IDataFrameServiceRepartitionResult {
  return &IDataFrameServiceRepartitionResult{}
}

var IDataFrameServiceRepartitionResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceRepartitionResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceRepartitionResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceRepartitionResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceRepartitionResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceRepartitionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceRepartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceRepartitionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceRepartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceRepartitionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceRepartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceRepartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "repartition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceRepartitionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceRepartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceRepartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceRepartitionResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
type IDataFrameServicePartitionByRandomArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  NumPartitions int64 `thrift:"numPartitions,2" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServicePartitionByRandomArgs() *IDataFrameServicePartitionByRandomArgs {
  return &IDataFrameServicePartitionByRandomArgs{}
}

var IDataFrameServicePartitionByRandomArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServicePartitionByRandomArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServicePartitionByRandomArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServicePartitionByRandomArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServicePartitionByRandomArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServicePartitionByRandomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByRandomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByRandomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServicePartitionByRandomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionByRandom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionByRandomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionByRandomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionByRandomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionByRandomArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServicePartitionByRandomResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServicePartitionByRandomResult() *IDataFrameServicePartitionByRandomResult {
  return &IDataFrameServicePartitionByRandomResult{}
}

var IDataFrameServicePartitionByRandomResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServicePartitionByRandomResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServicePartitionByRandomResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServicePartitionByRandomResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServicePartitionByRandomResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServicePartitionByRandomResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServicePartitionByRandomResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServicePartitionByRandomResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServicePartitionByRandomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByRandomResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByRandomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByRandomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionByRandom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionByRandomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionByRandomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionByRandomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionByRandomResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
type IDataFrameServicePartitionByHashArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  NumPartitions int64 `thrift:"numPartitions,2" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServicePartitionByHashArgs() *IDataFrameServicePartitionByHashArgs {
  return &IDataFrameServicePartitionByHashArgs{}
}

var IDataFrameServicePartitionByHashArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServicePartitionByHashArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServicePartitionByHashArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServicePartitionByHashArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServicePartitionByHashArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServicePartitionByHashArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByHashArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByHashArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServicePartitionByHashArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionByHash_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionByHashArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionByHashArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionByHashArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionByHashArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServicePartitionByHashResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServicePartitionByHashResult() *IDataFrameServicePartitionByHashResult {
  return &IDataFrameServicePartitionByHashResult{}
}

var IDataFrameServicePartitionByHashResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServicePartitionByHashResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServicePartitionByHashResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServicePartitionByHashResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServicePartitionByHashResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServicePartitionByHashResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServicePartitionByHashResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServicePartitionByHashResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServicePartitionByHashResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByHashResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByHashResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByHashResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionByHash_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionByHashResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionByHashResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionByHashResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionByHashResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - NumPartitions
type IDataFrameServicePartitionByArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  NumPartitions int64 `thrift:"numPartitions,3" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServicePartitionByArgs() *IDataFrameServicePartitionByArgs {
  return &IDataFrameServicePartitionByArgs{}
}

var IDataFrameServicePartitionByArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServicePartitionByArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServicePartitionByArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServicePartitionByArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServicePartitionByArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServicePartitionByArgs_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServicePartitionByArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServicePartitionByArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServicePartitionByArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServicePartitionByArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServicePartitionByArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionByArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionByArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionByArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServicePartitionByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionByArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServicePartitionByResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServicePartitionByResult() *IDataFrameServicePartitionByResult {
  return &IDataFrameServicePartitionByResult{}
}

var IDataFrameServicePartitionByResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServicePartitionByResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServicePartitionByResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServicePartitionByResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServicePartitionByResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServicePartitionByResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServicePartitionByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServicePartitionByResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServicePartitionByResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServicePartitionByResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServicePartitionByResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionByResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServicePartitionByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServicePartitionByResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceMap_Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceMap_Args() *IDataFrameServiceMap_Args {
  return &IDataFrameServiceMap_Args{}
}

var IDataFrameServiceMap_Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMap_Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMap_Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMap_Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMap_Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceMap_Args_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceMap_Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMap_Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceMap_Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMap_Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMap_Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceMap_Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "map__args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMap_Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMap_Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceMap_Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMap_Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMap_Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMap_Result() *IDataFrameServiceMap_Result {
  return &IDataFrameServiceMap_Result{}
}

var IDataFrameServiceMap_Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMap_Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMap_Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceMap_Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMap_Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMap_Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMap_Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMap_Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMap_Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMap_Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceMap_Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMap_Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "map__result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMap_Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMap_Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMap_Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMap_Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceFilterArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceFilterArgs() *IDataFrameServiceFilterArgs {
  return &IDataFrameServiceFilterArgs{}
}

var IDataFrameServiceFilterArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFilterArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceFilterArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceFilterArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFilterArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceFilterArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceFilterArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceFilterArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceFilterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFilterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceFilterArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceFilterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "filter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFilterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceFilterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceFilterResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceFilterResult() *IDataFrameServiceFilterResult {
  return &IDataFrameServiceFilterResult{}
}

var IDataFrameServiceFilterResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFilterResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceFilterResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceFilterResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceFilterResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceFilterResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceFilterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceFilterResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceFilterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFilterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceFilterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceFilterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "filter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFilterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFilterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFilterResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceFlatmapArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceFlatmapArgs() *IDataFrameServiceFlatmapArgs {
  return &IDataFrameServiceFlatmapArgs{}
}

var IDataFrameServiceFlatmapArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFlatmapArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceFlatmapArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceFlatmapArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFlatmapArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceFlatmapArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceFlatmapArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceFlatmapArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceFlatmapArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatmapArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatmapArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatmapArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "flatmap_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFlatmapArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceFlatmapArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceFlatmapArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFlatmapArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceFlatmapResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceFlatmapResult() *IDataFrameServiceFlatmapResult {
  return &IDataFrameServiceFlatmapResult{}
}

var IDataFrameServiceFlatmapResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFlatmapResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceFlatmapResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceFlatmapResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceFlatmapResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceFlatmapResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceFlatmapResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceFlatmapResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceFlatmapResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatmapResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatmapResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatmapResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "flatmap_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFlatmapResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFlatmapResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFlatmapResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFlatmapResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceKeyByArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceKeyByArgs() *IDataFrameServiceKeyByArgs {
  return &IDataFrameServiceKeyByArgs{}
}

var IDataFrameServiceKeyByArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceKeyByArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceKeyByArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceKeyByArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceKeyByArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceKeyByArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceKeyByArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceKeyByArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceKeyByArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceKeyByArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceKeyByArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceKeyByArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "keyBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceKeyByArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceKeyByArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceKeyByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceKeyByArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceKeyByResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceKeyByResult() *IDataFrameServiceKeyByResult {
  return &IDataFrameServiceKeyByResult{}
}

var IDataFrameServiceKeyByResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceKeyByResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceKeyByResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceKeyByResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceKeyByResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceKeyByResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceKeyByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceKeyByResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceKeyByResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceKeyByResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceKeyByResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceKeyByResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "keyBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceKeyByResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceKeyByResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceKeyByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceKeyByResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - PreservesPartitioning
type IDataFrameServiceMapPartitionsArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  PreservesPartitioning bool `thrift:"preservesPartitioning,3" db:"preservesPartitioning" json:"preservesPartitioning"`
}

func NewIDataFrameServiceMapPartitionsArgs() *IDataFrameServiceMapPartitionsArgs {
  return &IDataFrameServiceMapPartitionsArgs{}
}

var IDataFrameServiceMapPartitionsArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapPartitionsArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMapPartitionsArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMapPartitionsArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMapPartitionsArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceMapPartitionsArgs_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceMapPartitionsArgs) GetPreservesPartitioning() bool {
  return p.PreservesPartitioning
}
func (p *IDataFrameServiceMapPartitionsArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMapPartitionsArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceMapPartitionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PreservesPartitioning = v
}
  return nil
}

func (p *IDataFrameServiceMapPartitionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapPartitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapPartitionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapPartitionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapPartitionsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preservesPartitioning", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preservesPartitioning: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreservesPartitioning)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preservesPartitioning (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preservesPartitioning: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMapPartitionsResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMapPartitionsResult() *IDataFrameServiceMapPartitionsResult {
  return &IDataFrameServiceMapPartitionsResult{}
}

var IDataFrameServiceMapPartitionsResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapPartitionsResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMapPartitionsResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceMapPartitionsResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMapPartitionsResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMapPartitionsResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMapPartitionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMapPartitionsResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMapPartitionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapPartitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapPartitionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapPartitionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapPartitionsResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - PreservesPartitioning
type IDataFrameServiceMapPartitionsWithIndexArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  PreservesPartitioning bool `thrift:"preservesPartitioning,3" db:"preservesPartitioning" json:"preservesPartitioning"`
}

func NewIDataFrameServiceMapPartitionsWithIndexArgs() *IDataFrameServiceMapPartitionsWithIndexArgs {
  return &IDataFrameServiceMapPartitionsWithIndexArgs{}
}

var IDataFrameServiceMapPartitionsWithIndexArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapPartitionsWithIndexArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMapPartitionsWithIndexArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMapPartitionsWithIndexArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMapPartitionsWithIndexArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceMapPartitionsWithIndexArgs_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) GetPreservesPartitioning() bool {
  return p.PreservesPartitioning
}
func (p *IDataFrameServiceMapPartitionsWithIndexArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PreservesPartitioning = v
}
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapPartitionsWithIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preservesPartitioning", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preservesPartitioning: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreservesPartitioning)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preservesPartitioning (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preservesPartitioning: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapPartitionsWithIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapPartitionsWithIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMapPartitionsWithIndexResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMapPartitionsWithIndexResult() *IDataFrameServiceMapPartitionsWithIndexResult {
  return &IDataFrameServiceMapPartitionsWithIndexResult{}
}

var IDataFrameServiceMapPartitionsWithIndexResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapPartitionsWithIndexResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMapPartitionsWithIndexResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceMapPartitionsWithIndexResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMapPartitionsWithIndexResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMapPartitionsWithIndexResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMapPartitionsWithIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapPartitionsWithIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapPartitionsWithIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapPartitionsWithIndexResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceMapExecutorArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceMapExecutorArgs() *IDataFrameServiceMapExecutorArgs {
  return &IDataFrameServiceMapExecutorArgs{}
}

var IDataFrameServiceMapExecutorArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapExecutorArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMapExecutorArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMapExecutorArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMapExecutorArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceMapExecutorArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceMapExecutorArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMapExecutorArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceMapExecutorArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapExecutor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapExecutorArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapExecutorArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapExecutorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapExecutorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMapExecutorResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMapExecutorResult() *IDataFrameServiceMapExecutorResult {
  return &IDataFrameServiceMapExecutorResult{}
}

var IDataFrameServiceMapExecutorResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapExecutorResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMapExecutorResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceMapExecutorResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMapExecutorResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMapExecutorResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMapExecutorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMapExecutorResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMapExecutorResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapExecutor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapExecutorResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapExecutorResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapExecutorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapExecutorResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceMapExecutorToArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceMapExecutorToArgs() *IDataFrameServiceMapExecutorToArgs {
  return &IDataFrameServiceMapExecutorToArgs{}
}

var IDataFrameServiceMapExecutorToArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapExecutorToArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMapExecutorToArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMapExecutorToArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMapExecutorToArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceMapExecutorToArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceMapExecutorToArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMapExecutorToArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceMapExecutorToArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorToArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorToArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorToArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapExecutorTo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapExecutorToArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapExecutorToArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapExecutorToArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapExecutorToArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMapExecutorToResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMapExecutorToResult() *IDataFrameServiceMapExecutorToResult {
  return &IDataFrameServiceMapExecutorToResult{}
}

var IDataFrameServiceMapExecutorToResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapExecutorToResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMapExecutorToResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceMapExecutorToResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMapExecutorToResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMapExecutorToResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMapExecutorToResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMapExecutorToResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMapExecutorToResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorToResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorToResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMapExecutorToResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapExecutorTo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapExecutorToResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapExecutorToResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapExecutorToResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapExecutorToResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceGroupByArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceGroupByArgs() *IDataFrameServiceGroupByArgs {
  return &IDataFrameServiceGroupByArgs{}
}

var IDataFrameServiceGroupByArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceGroupByArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceGroupByArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceGroupByArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceGroupByArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceGroupByArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceGroupByArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceGroupByArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceGroupByResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceGroupByResult() *IDataFrameServiceGroupByResult {
  return &IDataFrameServiceGroupByResult{}
}

var IDataFrameServiceGroupByResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceGroupByResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceGroupByResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceGroupByResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceGroupByResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceGroupByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceGroupByResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceGroupByResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - NumPartitions
type IDataFrameServiceGroupBy2Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  NumPartitions int64 `thrift:"numPartitions,3" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceGroupBy2Args() *IDataFrameServiceGroupBy2Args {
  return &IDataFrameServiceGroupBy2Args{}
}

var IDataFrameServiceGroupBy2Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupBy2Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceGroupBy2Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceGroupBy2Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceGroupBy2Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceGroupBy2Args_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceGroupBy2Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceGroupBy2Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceGroupBy2Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceGroupBy2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupBy2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupBy2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupBy2Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceGroupBy2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupBy2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupBy2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupBy2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupBy2Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupBy2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupBy2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceGroupBy2Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceGroupBy2Result() *IDataFrameServiceGroupBy2Result {
  return &IDataFrameServiceGroupBy2Result{}
}

var IDataFrameServiceGroupBy2Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupBy2Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceGroupBy2Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceGroupBy2Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceGroupBy2Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceGroupBy2Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceGroupBy2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceGroupBy2Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceGroupBy2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupBy2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupBy2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupBy2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupBy2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupBy2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupBy2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupBy2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupBy2Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Ascending
type IDataFrameServiceSortArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Ascending bool `thrift:"ascending,2" db:"ascending" json:"ascending"`
}

func NewIDataFrameServiceSortArgs() *IDataFrameServiceSortArgs {
  return &IDataFrameServiceSortArgs{}
}

var IDataFrameServiceSortArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSortArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSortArgs) GetAscending() bool {
  return p.Ascending
}
func (p *IDataFrameServiceSortArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSortArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSortArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSortArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sort_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSortResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSortResult() *IDataFrameServiceSortResult {
  return &IDataFrameServiceSortResult{}
}

var IDataFrameServiceSortResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSortResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSortResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSortResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSortResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSortResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSortResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSortResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSortResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSortResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sort_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Ascending
//  - NumPartitions
type IDataFrameServiceSort2Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Ascending bool `thrift:"ascending,2" db:"ascending" json:"ascending"`
  NumPartitions int64 `thrift:"numPartitions,3" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceSort2Args() *IDataFrameServiceSort2Args {
  return &IDataFrameServiceSort2Args{}
}

var IDataFrameServiceSort2Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSort2Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSort2Args_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSort2Args) GetAscending() bool {
  return p.Ascending
}

func (p *IDataFrameServiceSort2Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceSort2Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSort2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSort2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSort2Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSort2Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceSort2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sort2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSort2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSort2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSort2Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceSort2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSort2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSort2Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSort2Result() *IDataFrameServiceSort2Result {
  return &IDataFrameServiceSort2Result{}
}

var IDataFrameServiceSort2Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSort2Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSort2Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSort2Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSort2Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSort2Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSort2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSort2Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSort2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSort2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSort2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSort2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sort2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSort2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSort2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSort2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSort2Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - Ascending
type IDataFrameServiceSortByArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  Ascending bool `thrift:"ascending,3" db:"ascending" json:"ascending"`
}

func NewIDataFrameServiceSortByArgs() *IDataFrameServiceSortByArgs {
  return &IDataFrameServiceSortByArgs{}
}

var IDataFrameServiceSortByArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSortByArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceSortByArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceSortByArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceSortByArgs_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceSortByArgs) GetAscending() bool {
  return p.Ascending
}
func (p *IDataFrameServiceSortByArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSortByArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceSortByArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSortByArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSortByResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSortByResult() *IDataFrameServiceSortByResult {
  return &IDataFrameServiceSortByResult{}
}

var IDataFrameServiceSortByResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSortByResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSortByResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSortByResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSortByResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSortByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSortByResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSortByResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - Ascending
//  - NumPartitions
type IDataFrameServiceSortBy3Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  Ascending bool `thrift:"ascending,3" db:"ascending" json:"ascending"`
  NumPartitions int64 `thrift:"numPartitions,4" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceSortBy3Args() *IDataFrameServiceSortBy3Args {
  return &IDataFrameServiceSortBy3Args{}
}

var IDataFrameServiceSortBy3Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortBy3Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSortBy3Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceSortBy3Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceSortBy3Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceSortBy3Args_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceSortBy3Args) GetAscending() bool {
  return p.Ascending
}

func (p *IDataFrameServiceSortBy3Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceSortBy3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSortBy3Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceSortBy3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortBy3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSortBy3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceSortBy3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSortBy3Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceSortBy3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortBy3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortBy3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortBy3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortBy3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortBy3Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortBy3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortBy3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSortBy3Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSortBy3Result() *IDataFrameServiceSortBy3Result {
  return &IDataFrameServiceSortBy3Result{}
}

var IDataFrameServiceSortBy3Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortBy3Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSortBy3Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSortBy3Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSortBy3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSortBy3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSortBy3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSortBy3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSortBy3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortBy3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSortBy3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSortBy3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortBy3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortBy3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortBy3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortBy3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortBy3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Other
//  - PreserveOrder
type IDataFrameServiceUnion_Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Other *IDataFrameId `thrift:"other,2" db:"other" json:"other"`
  PreserveOrder bool `thrift:"preserveOrder,3" db:"preserveOrder" json:"preserveOrder"`
}

func NewIDataFrameServiceUnion_Args() *IDataFrameServiceUnion_Args {
  return &IDataFrameServiceUnion_Args{}
}

var IDataFrameServiceUnion_Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUnion_Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceUnion_Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceUnion_Args_Other_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUnion_Args) GetOther() *IDataFrameId {
  if !p.IsSetOther() {
    return IDataFrameServiceUnion_Args_Other_DEFAULT
  }
return p.Other
}

func (p *IDataFrameServiceUnion_Args) GetPreserveOrder() bool {
  return p.PreserveOrder
}
func (p *IDataFrameServiceUnion_Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceUnion_Args) IsSetOther() bool {
  return p.Other != nil
}

func (p *IDataFrameServiceUnion_Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion_Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion_Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Other = &IDataFrameId{}
  if err := p.Other.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Other), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion_Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PreserveOrder = v
}
  return nil
}

func (p *IDataFrameServiceUnion_Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "union__args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUnion_Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnion_Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "other", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:other: ", p), err) }
  if err := p.Other.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Other), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:other: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnion_Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preserveOrder", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preserveOrder: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreserveOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preserveOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preserveOrder: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnion_Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUnion_Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceUnion_Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceUnion_Result() *IDataFrameServiceUnion_Result {
  return &IDataFrameServiceUnion_Result{}
}

var IDataFrameServiceUnion_Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUnion_Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceUnion_Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceUnion_Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceUnion_Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceUnion_Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceUnion_Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceUnion_Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceUnion_Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion_Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion_Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion_Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "union__result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUnion_Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceUnion_Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceUnion_Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUnion_Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Other
//  - PreserveOrder
//  - Src
type IDataFrameServiceUnion4Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Other *IDataFrameId `thrift:"other,2" db:"other" json:"other"`
  PreserveOrder bool `thrift:"preserveOrder,3" db:"preserveOrder" json:"preserveOrder"`
  Src *rpc.ISource `thrift:"src,4" db:"src" json:"src"`
}

func NewIDataFrameServiceUnion4Args() *IDataFrameServiceUnion4Args {
  return &IDataFrameServiceUnion4Args{}
}

var IDataFrameServiceUnion4Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUnion4Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceUnion4Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceUnion4Args_Other_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUnion4Args) GetOther() *IDataFrameId {
  if !p.IsSetOther() {
    return IDataFrameServiceUnion4Args_Other_DEFAULT
  }
return p.Other
}

func (p *IDataFrameServiceUnion4Args) GetPreserveOrder() bool {
  return p.PreserveOrder
}
var IDataFrameServiceUnion4Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceUnion4Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceUnion4Args_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceUnion4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceUnion4Args) IsSetOther() bool {
  return p.Other != nil
}

func (p *IDataFrameServiceUnion4Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceUnion4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Other = &IDataFrameId{}
  if err := p.Other.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Other), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PreserveOrder = v
}
  return nil
}

func (p *IDataFrameServiceUnion4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "union4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUnion4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnion4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "other", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:other: ", p), err) }
  if err := p.Other.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Other), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:other: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnion4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preserveOrder", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preserveOrder: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreserveOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preserveOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preserveOrder: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnion4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceUnion4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUnion4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceUnion4Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceUnion4Result() *IDataFrameServiceUnion4Result {
  return &IDataFrameServiceUnion4Result{}
}

var IDataFrameServiceUnion4Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceUnion4Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceUnion4Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceUnion4Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceUnion4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceUnion4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceUnion4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceUnion4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceUnion4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceUnion4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "union4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceUnion4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceUnion4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceUnion4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceUnion4Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Other
type IDataFrameServiceJoinArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Other *IDataFrameId `thrift:"other,2" db:"other" json:"other"`
}

func NewIDataFrameServiceJoinArgs() *IDataFrameServiceJoinArgs {
  return &IDataFrameServiceJoinArgs{}
}

var IDataFrameServiceJoinArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoinArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceJoinArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceJoinArgs_Other_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoinArgs) GetOther() *IDataFrameId {
  if !p.IsSetOther() {
    return IDataFrameServiceJoinArgs_Other_DEFAULT
  }
return p.Other
}
func (p *IDataFrameServiceJoinArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceJoinArgs) IsSetOther() bool {
  return p.Other != nil
}

func (p *IDataFrameServiceJoinArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoinArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceJoinArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Other = &IDataFrameId{}
  if err := p.Other.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Other), err)
  }
  return nil
}

func (p *IDataFrameServiceJoinArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoinArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoinArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "other", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:other: ", p), err) }
  if err := p.Other.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Other), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:other: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoinArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoinArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceJoinResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceJoinResult() *IDataFrameServiceJoinResult {
  return &IDataFrameServiceJoinResult{}
}

var IDataFrameServiceJoinResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoinResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceJoinResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceJoinResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceJoinResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceJoinResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceJoinResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceJoinResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceJoinResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoinResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceJoinResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceJoinResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoinResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceJoinResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceJoinResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoinResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Other
//  - NumPartitions
type IDataFrameServiceJoin3aArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Other *IDataFrameId `thrift:"other,2" db:"other" json:"other"`
  NumPartitions int64 `thrift:"numPartitions,3" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceJoin3aArgs() *IDataFrameServiceJoin3aArgs {
  return &IDataFrameServiceJoin3aArgs{}
}

var IDataFrameServiceJoin3aArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin3aArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceJoin3aArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceJoin3aArgs_Other_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin3aArgs) GetOther() *IDataFrameId {
  if !p.IsSetOther() {
    return IDataFrameServiceJoin3aArgs_Other_DEFAULT
  }
return p.Other
}

func (p *IDataFrameServiceJoin3aArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceJoin3aArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceJoin3aArgs) IsSetOther() bool {
  return p.Other != nil
}

func (p *IDataFrameServiceJoin3aArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3aArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3aArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Other = &IDataFrameId{}
  if err := p.Other.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Other), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3aArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceJoin3aArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join3a_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoin3aArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin3aArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "other", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:other: ", p), err) }
  if err := p.Other.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Other), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:other: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin3aArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin3aArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoin3aArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceJoin3aResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceJoin3aResult() *IDataFrameServiceJoin3aResult {
  return &IDataFrameServiceJoin3aResult{}
}

var IDataFrameServiceJoin3aResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin3aResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceJoin3aResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceJoin3aResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceJoin3aResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceJoin3aResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceJoin3aResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceJoin3aResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceJoin3aResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3aResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3aResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3aResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join3a_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoin3aResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceJoin3aResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceJoin3aResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoin3aResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Other
//  - Src
type IDataFrameServiceJoin3bArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Other *IDataFrameId `thrift:"other,2" db:"other" json:"other"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIDataFrameServiceJoin3bArgs() *IDataFrameServiceJoin3bArgs {
  return &IDataFrameServiceJoin3bArgs{}
}

var IDataFrameServiceJoin3bArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin3bArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceJoin3bArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceJoin3bArgs_Other_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin3bArgs) GetOther() *IDataFrameId {
  if !p.IsSetOther() {
    return IDataFrameServiceJoin3bArgs_Other_DEFAULT
  }
return p.Other
}
var IDataFrameServiceJoin3bArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceJoin3bArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceJoin3bArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceJoin3bArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceJoin3bArgs) IsSetOther() bool {
  return p.Other != nil
}

func (p *IDataFrameServiceJoin3bArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceJoin3bArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3bArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3bArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Other = &IDataFrameId{}
  if err := p.Other.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Other), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3bArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3bArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join3b_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoin3bArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin3bArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "other", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:other: ", p), err) }
  if err := p.Other.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Other), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:other: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin3bArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin3bArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoin3bArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IDataFrameServiceJoin3bResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIDataFrameServiceJoin3bResult() *IDataFrameServiceJoin3bResult {
  return &IDataFrameServiceJoin3bResult{}
}

var IDataFrameServiceJoin3bResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin3bResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceJoin3bResult_Success_DEFAULT
  }
return p.Success
}
func (p *IDataFrameServiceJoin3bResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceJoin3bResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3bResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin3bResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join3b_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoin3bResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceJoin3bResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoin3bResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Other
//  - NumPartitions
//  - Src
type IDataFrameServiceJoin4Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Other *IDataFrameId `thrift:"other,2" db:"other" json:"other"`
  NumPartitions int64 `thrift:"numPartitions,3" db:"numPartitions" json:"numPartitions"`
  Src *rpc.ISource `thrift:"src,4" db:"src" json:"src"`
}

func NewIDataFrameServiceJoin4Args() *IDataFrameServiceJoin4Args {
  return &IDataFrameServiceJoin4Args{}
}

var IDataFrameServiceJoin4Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin4Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceJoin4Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceJoin4Args_Other_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin4Args) GetOther() *IDataFrameId {
  if !p.IsSetOther() {
    return IDataFrameServiceJoin4Args_Other_DEFAULT
  }
return p.Other
}

func (p *IDataFrameServiceJoin4Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
var IDataFrameServiceJoin4Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceJoin4Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceJoin4Args_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceJoin4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceJoin4Args) IsSetOther() bool {
  return p.Other != nil
}

func (p *IDataFrameServiceJoin4Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceJoin4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Other = &IDataFrameId{}
  if err := p.Other.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Other), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceJoin4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoin4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "other", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:other: ", p), err) }
  if err := p.Other.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Other), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:other: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceJoin4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoin4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceJoin4Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceJoin4Result() *IDataFrameServiceJoin4Result {
  return &IDataFrameServiceJoin4Result{}
}

var IDataFrameServiceJoin4Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceJoin4Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceJoin4Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceJoin4Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceJoin4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceJoin4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceJoin4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceJoin4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceJoin4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceJoin4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "join4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceJoin4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceJoin4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceJoin4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceJoin4Result(%+v)", *p)
}

// Attributes:
//  - ID
type IDataFrameServiceDistinctArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
}

func NewIDataFrameServiceDistinctArgs() *IDataFrameServiceDistinctArgs {
  return &IDataFrameServiceDistinctArgs{}
}

var IDataFrameServiceDistinctArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinctArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceDistinctArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IDataFrameServiceDistinctArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceDistinctArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinctArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinctArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinctArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinctArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinctArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceDistinctResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceDistinctResult() *IDataFrameServiceDistinctResult {
  return &IDataFrameServiceDistinctResult{}
}

var IDataFrameServiceDistinctResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinctResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceDistinctResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceDistinctResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceDistinctResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceDistinctResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceDistinctResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceDistinctResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceDistinctResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinctResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinctResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinctResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinctResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinctResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinctResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinctResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
type IDataFrameServiceDistinct2aArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  NumPartitions int64 `thrift:"numPartitions,2" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceDistinct2aArgs() *IDataFrameServiceDistinct2aArgs {
  return &IDataFrameServiceDistinct2aArgs{}
}

var IDataFrameServiceDistinct2aArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinct2aArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceDistinct2aArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceDistinct2aArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceDistinct2aArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceDistinct2aArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2aArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2aArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceDistinct2aArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct2a_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinct2aArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinct2aArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinct2aArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinct2aArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceDistinct2aResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceDistinct2aResult() *IDataFrameServiceDistinct2aResult {
  return &IDataFrameServiceDistinct2aResult{}
}

var IDataFrameServiceDistinct2aResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinct2aResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceDistinct2aResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceDistinct2aResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceDistinct2aResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceDistinct2aResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceDistinct2aResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceDistinct2aResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceDistinct2aResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2aResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2aResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2aResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct2a_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinct2aResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinct2aResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinct2aResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinct2aResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceDistinct2bArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceDistinct2bArgs() *IDataFrameServiceDistinct2bArgs {
  return &IDataFrameServiceDistinct2bArgs{}
}

var IDataFrameServiceDistinct2bArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinct2bArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceDistinct2bArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceDistinct2bArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceDistinct2bArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceDistinct2bArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceDistinct2bArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceDistinct2bArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceDistinct2bArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2bArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2bArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2bArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct2b_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinct2bArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinct2bArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinct2bArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinct2bArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceDistinct2bResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceDistinct2bResult() *IDataFrameServiceDistinct2bResult {
  return &IDataFrameServiceDistinct2bResult{}
}

var IDataFrameServiceDistinct2bResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinct2bResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceDistinct2bResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceDistinct2bResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceDistinct2bResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceDistinct2bResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceDistinct2bResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceDistinct2bResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceDistinct2bResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2bResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2bResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct2bResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct2b_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinct2bResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinct2bResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinct2bResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinct2bResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
//  - Src
type IDataFrameServiceDistinct3Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  NumPartitions int64 `thrift:"numPartitions,2" db:"numPartitions" json:"numPartitions"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIDataFrameServiceDistinct3Args() *IDataFrameServiceDistinct3Args {
  return &IDataFrameServiceDistinct3Args{}
}

var IDataFrameServiceDistinct3Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinct3Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceDistinct3Args_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceDistinct3Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
var IDataFrameServiceDistinct3Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceDistinct3Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceDistinct3Args_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceDistinct3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceDistinct3Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceDistinct3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceDistinct3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinct3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinct3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinct3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceDistinct3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinct3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceDistinct3Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceDistinct3Result() *IDataFrameServiceDistinct3Result {
  return &IDataFrameServiceDistinct3Result{}
}

var IDataFrameServiceDistinct3Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceDistinct3Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceDistinct3Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceDistinct3Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceDistinct3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceDistinct3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceDistinct3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceDistinct3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceDistinct3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceDistinct3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "distinct3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceDistinct3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinct3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceDistinct3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceDistinct3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - Tp
type IDataFrameServiceReduceArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  Tp *rpc.ISource `thrift:"tp,3" db:"tp" json:"tp"`
}

func NewIDataFrameServiceReduceArgs() *IDataFrameServiceReduceArgs {
  return &IDataFrameServiceReduceArgs{}
}

var IDataFrameServiceReduceArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceReduceArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceReduceArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceReduceArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceReduceArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceReduceArgs_Src_DEFAULT
  }
return p.Src
}
var IDataFrameServiceReduceArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceReduceArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceReduceArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceReduceArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceReduceArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceReduceArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceReduceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduce_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceReduceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceReduceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceReduceResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceReduceResult() *IDataFrameServiceReduceResult {
  return &IDataFrameServiceReduceResult{}
}

var IDataFrameServiceReduceResult_Success_DEFAULT int64
func (p *IDataFrameServiceReduceResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceReduceResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceReduceResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceReduceResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceReduceResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceReduceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceReduceResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceReduceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceReduceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduce_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceReduceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceReduceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceReduceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceReduceResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - Tp
type IDataFrameServiceTreeReduceArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  Tp *rpc.ISource `thrift:"tp,3" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTreeReduceArgs() *IDataFrameServiceTreeReduceArgs {
  return &IDataFrameServiceTreeReduceArgs{}
}

var IDataFrameServiceTreeReduceArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTreeReduceArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTreeReduceArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceTreeReduceArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeReduceArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceTreeReduceArgs_Src_DEFAULT
  }
return p.Src
}
var IDataFrameServiceTreeReduceArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeReduceArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTreeReduceArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTreeReduceArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTreeReduceArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceTreeReduceArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTreeReduceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeReduceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeReduceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeReduceArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeReduceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeReduce_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTreeReduceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeReduceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeReduceArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeReduceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTreeReduceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTreeReduceResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTreeReduceResult() *IDataFrameServiceTreeReduceResult {
  return &IDataFrameServiceTreeReduceResult{}
}

var IDataFrameServiceTreeReduceResult_Success_DEFAULT int64
func (p *IDataFrameServiceTreeReduceResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTreeReduceResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTreeReduceResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTreeReduceResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTreeReduceResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTreeReduceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTreeReduceResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTreeReduceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeReduceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTreeReduceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeReduceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeReduce_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTreeReduceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTreeReduceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTreeReduceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTreeReduceResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tp
type IDataFrameServiceCollectArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Tp *rpc.ISource `thrift:"tp,2" db:"tp" json:"tp"`
}

func NewIDataFrameServiceCollectArgs() *IDataFrameServiceCollectArgs {
  return &IDataFrameServiceCollectArgs{}
}

var IDataFrameServiceCollectArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceCollectArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceCollectArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceCollectArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceCollectArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceCollectArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceCollectArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceCollectArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceCollectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCollectArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceCollectArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceCollectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "collect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCollectArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceCollectArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceCollectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCollectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceCollectResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceCollectResult() *IDataFrameServiceCollectResult {
  return &IDataFrameServiceCollectResult{}
}

var IDataFrameServiceCollectResult_Success_DEFAULT int64
func (p *IDataFrameServiceCollectResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceCollectResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceCollectResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceCollectResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceCollectResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceCollectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceCollectResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceCollectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCollectResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceCollectResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceCollectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "collect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCollectResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCollectResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCollectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCollectResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
//  - Tp
type IDataFrameServiceAggregateArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,3" db:"seqOp" json:"seqOp"`
  CombOp *rpc.ISource `thrift:"combOp,4" db:"combOp" json:"combOp"`
  Tp *rpc.ISource `thrift:"tp,5" db:"tp" json:"tp"`
}

func NewIDataFrameServiceAggregateArgs() *IDataFrameServiceAggregateArgs {
  return &IDataFrameServiceAggregateArgs{}
}

var IDataFrameServiceAggregateArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceAggregateArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceAggregateArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceAggregateArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceAggregateArgs_SeqOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateArgs) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IDataFrameServiceAggregateArgs_SeqOp_DEFAULT
  }
return p.SeqOp
}
var IDataFrameServiceAggregateArgs_CombOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateArgs) GetCombOp() *rpc.ISource {
  if !p.IsSetCombOp() {
    return IDataFrameServiceAggregateArgs_CombOp_DEFAULT
  }
return p.CombOp
}
var IDataFrameServiceAggregateArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceAggregateArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceAggregateArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceAggregateArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceAggregateArgs) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IDataFrameServiceAggregateArgs) IsSetCombOp() bool {
  return p.CombOp != nil
}

func (p *IDataFrameServiceAggregateArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceAggregateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CombOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.CombOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CombOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seqOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "combOp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:combOp: ", p), err) }
  if err := p.CombOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CombOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:combOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceAggregateResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceAggregateResult() *IDataFrameServiceAggregateResult {
  return &IDataFrameServiceAggregateResult{}
}

var IDataFrameServiceAggregateResult_Success_DEFAULT int64
func (p *IDataFrameServiceAggregateResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceAggregateResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceAggregateResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceAggregateResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceAggregateResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceAggregateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceAggregateResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceAggregateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceAggregateResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
//  - Tp
type IDataFrameServiceTreeAggregateArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,3" db:"seqOp" json:"seqOp"`
  CombOp *rpc.ISource `thrift:"combOp,4" db:"combOp" json:"combOp"`
  Tp *rpc.ISource `thrift:"tp,5" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTreeAggregateArgs() *IDataFrameServiceTreeAggregateArgs {
  return &IDataFrameServiceTreeAggregateArgs{}
}

var IDataFrameServiceTreeAggregateArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTreeAggregateArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTreeAggregateArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceTreeAggregateArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeAggregateArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceTreeAggregateArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceTreeAggregateArgs_SeqOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeAggregateArgs) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IDataFrameServiceTreeAggregateArgs_SeqOp_DEFAULT
  }
return p.SeqOp
}
var IDataFrameServiceTreeAggregateArgs_CombOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeAggregateArgs) GetCombOp() *rpc.ISource {
  if !p.IsSetCombOp() {
    return IDataFrameServiceTreeAggregateArgs_CombOp_DEFAULT
  }
return p.CombOp
}
var IDataFrameServiceTreeAggregateArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeAggregateArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTreeAggregateArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTreeAggregateArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTreeAggregateArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceTreeAggregateArgs) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IDataFrameServiceTreeAggregateArgs) IsSetCombOp() bool {
  return p.CombOp != nil
}

func (p *IDataFrameServiceTreeAggregateArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTreeAggregateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CombOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.CombOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CombOp), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeAggregate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTreeAggregateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeAggregateArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeAggregateArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seqOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeAggregateArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "combOp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:combOp: ", p), err) }
  if err := p.CombOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CombOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:combOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeAggregateArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeAggregateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTreeAggregateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTreeAggregateResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTreeAggregateResult() *IDataFrameServiceTreeAggregateResult {
  return &IDataFrameServiceTreeAggregateResult{}
}

var IDataFrameServiceTreeAggregateResult_Success_DEFAULT int64
func (p *IDataFrameServiceTreeAggregateResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTreeAggregateResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTreeAggregateResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTreeAggregateResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTreeAggregateResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTreeAggregateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTreeAggregateResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTreeAggregateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTreeAggregateResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeAggregateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeAggregate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTreeAggregateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTreeAggregateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTreeAggregateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTreeAggregateResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - Src
//  - Tp
type IDataFrameServiceFoldArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
  Tp *rpc.ISource `thrift:"tp,4" db:"tp" json:"tp"`
}

func NewIDataFrameServiceFoldArgs() *IDataFrameServiceFoldArgs {
  return &IDataFrameServiceFoldArgs{}
}

var IDataFrameServiceFoldArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFoldArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceFoldArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceFoldArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFoldArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceFoldArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceFoldArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFoldArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceFoldArgs_Src_DEFAULT
  }
return p.Src
}
var IDataFrameServiceFoldArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFoldArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceFoldArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceFoldArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceFoldArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceFoldArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceFoldArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceFoldArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fold_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFoldArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFoldArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceFoldResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceFoldResult() *IDataFrameServiceFoldResult {
  return &IDataFrameServiceFoldResult{}
}

var IDataFrameServiceFoldResult_Success_DEFAULT int64
func (p *IDataFrameServiceFoldResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceFoldResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceFoldResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceFoldResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceFoldResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceFoldResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceFoldResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceFoldResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceFoldResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fold_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFoldResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFoldResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFoldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFoldResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - Src
//  - Tp
type IDataFrameServiceTreeFoldArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
  Tp *rpc.ISource `thrift:"tp,4" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTreeFoldArgs() *IDataFrameServiceTreeFoldArgs {
  return &IDataFrameServiceTreeFoldArgs{}
}

var IDataFrameServiceTreeFoldArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTreeFoldArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTreeFoldArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceTreeFoldArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeFoldArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceTreeFoldArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceTreeFoldArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeFoldArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceTreeFoldArgs_Src_DEFAULT
  }
return p.Src
}
var IDataFrameServiceTreeFoldArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTreeFoldArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTreeFoldArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTreeFoldArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTreeFoldArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceTreeFoldArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceTreeFoldArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTreeFoldArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeFoldArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeFoldArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeFoldArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeFoldArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeFoldArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeFold_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTreeFoldArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeFoldArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeFoldArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeFoldArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTreeFoldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTreeFoldArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTreeFoldResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTreeFoldResult() *IDataFrameServiceTreeFoldResult {
  return &IDataFrameServiceTreeFoldResult{}
}

var IDataFrameServiceTreeFoldResult_Success_DEFAULT int64
func (p *IDataFrameServiceTreeFoldResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTreeFoldResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTreeFoldResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTreeFoldResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTreeFoldResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTreeFoldResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTreeFoldResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTreeFoldResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeFoldResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTreeFoldResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTreeFoldResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "treeFold_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTreeFoldResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTreeFoldResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTreeFoldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTreeFoldResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Num
//  - Tp
type IDataFrameServiceTakeArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Num int64 `thrift:"num,2" db:"num" json:"num"`
  Tp *rpc.ISource `thrift:"tp,3" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTakeArgs() *IDataFrameServiceTakeArgs {
  return &IDataFrameServiceTakeArgs{}
}

var IDataFrameServiceTakeArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTakeArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTakeArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceTakeArgs) GetNum() int64 {
  return p.Num
}
var IDataFrameServiceTakeArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTakeArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTakeArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTakeArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTakeArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTakeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IDataFrameServiceTakeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "take_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTakeResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTakeResult() *IDataFrameServiceTakeResult {
  return &IDataFrameServiceTakeResult{}
}

var IDataFrameServiceTakeResult_Success_DEFAULT int64
func (p *IDataFrameServiceTakeResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTakeResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTakeResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTakeResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTakeResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTakeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTakeResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTakeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTakeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "take_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceForeach_Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceForeach_Args() *IDataFrameServiceForeach_Args {
  return &IDataFrameServiceForeach_Args{}
}

var IDataFrameServiceForeach_Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceForeach_Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceForeach_Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceForeach_Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceForeach_Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceForeach_Args_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceForeach_Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceForeach_Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceForeach_Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceForeach_Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceForeach_Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceForeach_Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreach__args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceForeach_Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceForeach_Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceForeach_Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceForeach_Args(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceForeach_Result struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceForeach_Result() *IDataFrameServiceForeach_Result {
  return &IDataFrameServiceForeach_Result{}
}

var IDataFrameServiceForeach_Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceForeach_Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceForeach_Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceForeach_Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceForeach_Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceForeach_Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceForeach_Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreach__result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceForeach_Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceForeach_Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceForeach_Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceForeachPartitionArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceForeachPartitionArgs() *IDataFrameServiceForeachPartitionArgs {
  return &IDataFrameServiceForeachPartitionArgs{}
}

var IDataFrameServiceForeachPartitionArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceForeachPartitionArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceForeachPartitionArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceForeachPartitionArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceForeachPartitionArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceForeachPartitionArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceForeachPartitionArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceForeachPartitionArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceForeachPartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachPartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachPartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachPartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachPartition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceForeachPartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceForeachPartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceForeachPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceForeachPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceForeachPartitionResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceForeachPartitionResult() *IDataFrameServiceForeachPartitionResult {
  return &IDataFrameServiceForeachPartitionResult{}
}

var IDataFrameServiceForeachPartitionResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceForeachPartitionResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceForeachPartitionResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceForeachPartitionResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceForeachPartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachPartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachPartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachPartition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceForeachPartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceForeachPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceForeachPartitionResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceForeachExecutorArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceForeachExecutorArgs() *IDataFrameServiceForeachExecutorArgs {
  return &IDataFrameServiceForeachExecutorArgs{}
}

var IDataFrameServiceForeachExecutorArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceForeachExecutorArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceForeachExecutorArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceForeachExecutorArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceForeachExecutorArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceForeachExecutorArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceForeachExecutorArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceForeachExecutorArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceForeachExecutorArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachExecutorArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachExecutorArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachExecutorArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachExecutor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceForeachExecutorArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceForeachExecutorArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceForeachExecutorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceForeachExecutorArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IDataFrameServiceForeachExecutorResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceForeachExecutorResult() *IDataFrameServiceForeachExecutorResult {
  return &IDataFrameServiceForeachExecutorResult{}
}

var IDataFrameServiceForeachExecutorResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceForeachExecutorResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceForeachExecutorResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceForeachExecutorResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceForeachExecutorResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachExecutorResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceForeachExecutorResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foreachExecutor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceForeachExecutorResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceForeachExecutorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceForeachExecutorResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Num
//  - Tp
type IDataFrameServiceTopArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Num int64 `thrift:"num,2" db:"num" json:"num"`
  Tp *rpc.ISource `thrift:"tp,3" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTopArgs() *IDataFrameServiceTopArgs {
  return &IDataFrameServiceTopArgs{}
}

var IDataFrameServiceTopArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTopArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTopArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceTopArgs) GetNum() int64 {
  return p.Num
}
var IDataFrameServiceTopArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTopArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTopArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTopArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTopArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTopArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTopArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTopArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IDataFrameServiceTopArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTopArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTopArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTopArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num: ", p), err) }
  return err
}

func (p *IDataFrameServiceTopArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTopArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTopResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTopResult() *IDataFrameServiceTopResult {
  return &IDataFrameServiceTopResult{}
}

var IDataFrameServiceTopResult_Success_DEFAULT int64
func (p *IDataFrameServiceTopResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTopResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTopResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTopResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTopResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTopResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTopResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTopResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTopResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTopResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTopResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTopResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTopResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTopResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Num
//  - Cmp
//  - Tp
type IDataFrameServiceTop4Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Num int64 `thrift:"num,2" db:"num" json:"num"`
  Cmp *rpc.ISource `thrift:"cmp,3" db:"cmp" json:"cmp"`
  Tp *rpc.ISource `thrift:"tp,4" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTop4Args() *IDataFrameServiceTop4Args {
  return &IDataFrameServiceTop4Args{}
}

var IDataFrameServiceTop4Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTop4Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTop4Args_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceTop4Args) GetNum() int64 {
  return p.Num
}
var IDataFrameServiceTop4Args_Cmp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTop4Args) GetCmp() *rpc.ISource {
  if !p.IsSetCmp() {
    return IDataFrameServiceTop4Args_Cmp_DEFAULT
  }
return p.Cmp
}
var IDataFrameServiceTop4Args_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTop4Args) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTop4Args_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTop4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTop4Args) IsSetCmp() bool {
  return p.Cmp != nil
}

func (p *IDataFrameServiceTop4Args) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTop4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTop4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTop4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IDataFrameServiceTop4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cmp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Cmp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cmp), err)
  }
  return nil
}

func (p *IDataFrameServiceTop4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTop4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTop4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTop4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num: ", p), err) }
  return err
}

func (p *IDataFrameServiceTop4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cmp: ", p), err) }
  if err := p.Cmp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cmp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cmp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTop4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTop4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTop4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTop4Result struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTop4Result() *IDataFrameServiceTop4Result {
  return &IDataFrameServiceTop4Result{}
}

var IDataFrameServiceTop4Result_Success_DEFAULT int64
func (p *IDataFrameServiceTop4Result) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTop4Result_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTop4Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTop4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTop4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTop4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTop4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTop4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTop4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTop4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTop4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "top4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTop4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTop4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTop4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTop4Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Num
//  - Tp
type IDataFrameServiceTakeOrderedArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Num int64 `thrift:"num,2" db:"num" json:"num"`
  Tp *rpc.ISource `thrift:"tp,3" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTakeOrderedArgs() *IDataFrameServiceTakeOrderedArgs {
  return &IDataFrameServiceTakeOrderedArgs{}
}

var IDataFrameServiceTakeOrderedArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTakeOrderedArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTakeOrderedArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceTakeOrderedArgs) GetNum() int64 {
  return p.Num
}
var IDataFrameServiceTakeOrderedArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTakeOrderedArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTakeOrderedArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTakeOrderedArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTakeOrderedArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTakeOrderedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrderedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrderedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IDataFrameServiceTakeOrderedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrderedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeOrderedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeOrderedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeOrderedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeOrderedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeOrderedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTakeOrderedResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTakeOrderedResult() *IDataFrameServiceTakeOrderedResult {
  return &IDataFrameServiceTakeOrderedResult{}
}

var IDataFrameServiceTakeOrderedResult_Success_DEFAULT int64
func (p *IDataFrameServiceTakeOrderedResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTakeOrderedResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTakeOrderedResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTakeOrderedResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTakeOrderedResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTakeOrderedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTakeOrderedResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTakeOrderedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrderedResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTakeOrderedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrderedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeOrderedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeOrderedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeOrderedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeOrderedResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Num
//  - Cmp
//  - Tp
type IDataFrameServiceTakeOrdered4Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Num int64 `thrift:"num,2" db:"num" json:"num"`
  Cmp *rpc.ISource `thrift:"cmp,3" db:"cmp" json:"cmp"`
  Tp *rpc.ISource `thrift:"tp,4" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTakeOrdered4Args() *IDataFrameServiceTakeOrdered4Args {
  return &IDataFrameServiceTakeOrdered4Args{}
}

var IDataFrameServiceTakeOrdered4Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTakeOrdered4Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTakeOrdered4Args_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceTakeOrdered4Args) GetNum() int64 {
  return p.Num
}
var IDataFrameServiceTakeOrdered4Args_Cmp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTakeOrdered4Args) GetCmp() *rpc.ISource {
  if !p.IsSetCmp() {
    return IDataFrameServiceTakeOrdered4Args_Cmp_DEFAULT
  }
return p.Cmp
}
var IDataFrameServiceTakeOrdered4Args_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTakeOrdered4Args) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTakeOrdered4Args_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTakeOrdered4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTakeOrdered4Args) IsSetCmp() bool {
  return p.Cmp != nil
}

func (p *IDataFrameServiceTakeOrdered4Args) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTakeOrdered4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cmp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Cmp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cmp), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeOrdered4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeOrdered4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cmp: ", p), err) }
  if err := p.Cmp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cmp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cmp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeOrdered4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeOrdered4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeOrdered4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTakeOrdered4Result struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTakeOrdered4Result() *IDataFrameServiceTakeOrdered4Result {
  return &IDataFrameServiceTakeOrdered4Result{}
}

var IDataFrameServiceTakeOrdered4Result_Success_DEFAULT int64
func (p *IDataFrameServiceTakeOrdered4Result) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTakeOrdered4Result_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTakeOrdered4Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTakeOrdered4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTakeOrdered4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTakeOrdered4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTakeOrdered4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTakeOrdered4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeOrdered4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeOrdered4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeOrdered4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeOrdered4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeOrdered4Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - WithReplacement
//  - Fraction
//  - Seed
type IDataFrameServiceSampleArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  WithReplacement bool `thrift:"withReplacement,2" db:"withReplacement" json:"withReplacement"`
  Fraction float64 `thrift:"fraction,3" db:"fraction" json:"fraction"`
  Seed int32 `thrift:"seed,4" db:"seed" json:"seed"`
}

func NewIDataFrameServiceSampleArgs() *IDataFrameServiceSampleArgs {
  return &IDataFrameServiceSampleArgs{}
}

var IDataFrameServiceSampleArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSampleArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSampleArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSampleArgs) GetWithReplacement() bool {
  return p.WithReplacement
}

func (p *IDataFrameServiceSampleArgs) GetFraction() float64 {
  return p.Fraction
}

func (p *IDataFrameServiceSampleArgs) GetSeed() int32 {
  return p.Seed
}
func (p *IDataFrameServiceSampleArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSampleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithReplacement = v
}
  return nil
}

func (p *IDataFrameServiceSampleArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Fraction = v
}
  return nil
}

func (p *IDataFrameServiceSampleArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Seed = v
}
  return nil
}

func (p *IDataFrameServiceSampleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sample_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSampleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withReplacement", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withReplacement: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithReplacement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withReplacement (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withReplacement: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fraction", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fraction: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Fraction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fraction (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fraction: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seed", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seed: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seed: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSampleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSampleResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSampleResult() *IDataFrameServiceSampleResult {
  return &IDataFrameServiceSampleResult{}
}

var IDataFrameServiceSampleResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSampleResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSampleResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSampleResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSampleResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSampleResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSampleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSampleResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSampleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sample_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSampleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSampleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSampleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSampleResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - WithReplacement
//  - Num
//  - Seed
//  - Tp
type IDataFrameServiceTakeSampleArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  WithReplacement bool `thrift:"withReplacement,2" db:"withReplacement" json:"withReplacement"`
  Num int64 `thrift:"num,3" db:"num" json:"num"`
  Seed int32 `thrift:"seed,4" db:"seed" json:"seed"`
  Tp *rpc.ISource `thrift:"tp,5" db:"tp" json:"tp"`
}

func NewIDataFrameServiceTakeSampleArgs() *IDataFrameServiceTakeSampleArgs {
  return &IDataFrameServiceTakeSampleArgs{}
}

var IDataFrameServiceTakeSampleArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceTakeSampleArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceTakeSampleArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceTakeSampleArgs) GetWithReplacement() bool {
  return p.WithReplacement
}

func (p *IDataFrameServiceTakeSampleArgs) GetNum() int64 {
  return p.Num
}

func (p *IDataFrameServiceTakeSampleArgs) GetSeed() int32 {
  return p.Seed
}
var IDataFrameServiceTakeSampleArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceTakeSampleArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceTakeSampleArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceTakeSampleArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceTakeSampleArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceTakeSampleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeSampleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeSampleArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithReplacement = v
}
  return nil
}

func (p *IDataFrameServiceTakeSampleArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *IDataFrameServiceTakeSampleArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Seed = v
}
  return nil
}

func (p *IDataFrameServiceTakeSampleArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeSampleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeSample_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeSampleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeSampleArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withReplacement", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withReplacement: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithReplacement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withReplacement (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withReplacement: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeSampleArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeSampleArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seed", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seed: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seed: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeSampleArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceTakeSampleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeSampleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceTakeSampleResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceTakeSampleResult() *IDataFrameServiceTakeSampleResult {
  return &IDataFrameServiceTakeSampleResult{}
}

var IDataFrameServiceTakeSampleResult_Success_DEFAULT int64
func (p *IDataFrameServiceTakeSampleResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceTakeSampleResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceTakeSampleResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceTakeSampleResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceTakeSampleResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceTakeSampleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceTakeSampleResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceTakeSampleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeSampleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceTakeSampleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceTakeSampleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "takeSample_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceTakeSampleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeSampleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceTakeSampleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceTakeSampleResult(%+v)", *p)
}

// Attributes:
//  - ID
type IDataFrameServiceCountArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
}

func NewIDataFrameServiceCountArgs() *IDataFrameServiceCountArgs {
  return &IDataFrameServiceCountArgs{}
}

var IDataFrameServiceCountArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceCountArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceCountArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IDataFrameServiceCountArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceCountArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCountArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceCountArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCountArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceCountResult() *IDataFrameServiceCountResult {
  return &IDataFrameServiceCountResult{}
}

var IDataFrameServiceCountResult_Success_DEFAULT int64
func (p *IDataFrameServiceCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceCountResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceCountResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceCountResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceCountResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceCountResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceCountResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCountResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceCountResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceCountResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCountResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCountResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCountResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tp
type IDataFrameServiceMaxArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Tp *rpc.ISource `thrift:"tp,2" db:"tp" json:"tp"`
}

func NewIDataFrameServiceMaxArgs() *IDataFrameServiceMaxArgs {
  return &IDataFrameServiceMaxArgs{}
}

var IDataFrameServiceMaxArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMaxArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMaxArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMaxArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMaxArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceMaxArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceMaxArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMaxArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceMaxArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMaxArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMaxArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceMaxArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "max_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMaxArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMaxArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceMaxArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMaxArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMaxResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMaxResult() *IDataFrameServiceMaxResult {
  return &IDataFrameServiceMaxResult{}
}

var IDataFrameServiceMaxResult_Success_DEFAULT int64
func (p *IDataFrameServiceMaxResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMaxResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceMaxResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMaxResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMaxResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMaxResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMaxResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMaxResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMaxResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceMaxResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMaxResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "max_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMaxResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMaxResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMaxResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMaxResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Cmp
//  - Tp
type IDataFrameServiceMax3Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Cmp *rpc.ISource `thrift:"cmp,2" db:"cmp" json:"cmp"`
  Tp *rpc.ISource `thrift:"tp,3" db:"tp" json:"tp"`
}

func NewIDataFrameServiceMax3Args() *IDataFrameServiceMax3Args {
  return &IDataFrameServiceMax3Args{}
}

var IDataFrameServiceMax3Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMax3Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMax3Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMax3Args_Cmp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMax3Args) GetCmp() *rpc.ISource {
  if !p.IsSetCmp() {
    return IDataFrameServiceMax3Args_Cmp_DEFAULT
  }
return p.Cmp
}
var IDataFrameServiceMax3Args_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMax3Args) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceMax3Args_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceMax3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMax3Args) IsSetCmp() bool {
  return p.Cmp != nil
}

func (p *IDataFrameServiceMax3Args) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceMax3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMax3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMax3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cmp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Cmp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cmp), err)
  }
  return nil
}

func (p *IDataFrameServiceMax3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceMax3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "max3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMax3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMax3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cmp: ", p), err) }
  if err := p.Cmp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cmp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cmp: ", p), err) }
  return err
}

func (p *IDataFrameServiceMax3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceMax3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMax3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMax3Result struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMax3Result() *IDataFrameServiceMax3Result {
  return &IDataFrameServiceMax3Result{}
}

var IDataFrameServiceMax3Result_Success_DEFAULT int64
func (p *IDataFrameServiceMax3Result) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMax3Result_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceMax3Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMax3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMax3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMax3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMax3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMax3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMax3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceMax3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMax3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "max3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMax3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMax3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMax3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMax3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tp
type IDataFrameServiceMinArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Tp *rpc.ISource `thrift:"tp,2" db:"tp" json:"tp"`
}

func NewIDataFrameServiceMinArgs() *IDataFrameServiceMinArgs {
  return &IDataFrameServiceMinArgs{}
}

var IDataFrameServiceMinArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMinArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMinArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMinArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMinArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceMinArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceMinArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMinArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceMinArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMinArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMinArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceMinArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "min_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMinArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMinArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceMinArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMinArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMinResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMinResult() *IDataFrameServiceMinResult {
  return &IDataFrameServiceMinResult{}
}

var IDataFrameServiceMinResult_Success_DEFAULT int64
func (p *IDataFrameServiceMinResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMinResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceMinResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMinResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMinResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMinResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMinResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMinResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMinResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceMinResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMinResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "min_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMinResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMinResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMinResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMinResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Cmp
//  - Tp
type IDataFrameServiceMin3Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Cmp *rpc.ISource `thrift:"cmp,2" db:"cmp" json:"cmp"`
  Tp *rpc.ISource `thrift:"tp,3" db:"tp" json:"tp"`
}

func NewIDataFrameServiceMin3Args() *IDataFrameServiceMin3Args {
  return &IDataFrameServiceMin3Args{}
}

var IDataFrameServiceMin3Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMin3Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMin3Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMin3Args_Cmp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMin3Args) GetCmp() *rpc.ISource {
  if !p.IsSetCmp() {
    return IDataFrameServiceMin3Args_Cmp_DEFAULT
  }
return p.Cmp
}
var IDataFrameServiceMin3Args_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMin3Args) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceMin3Args_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceMin3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMin3Args) IsSetCmp() bool {
  return p.Cmp != nil
}

func (p *IDataFrameServiceMin3Args) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceMin3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMin3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMin3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cmp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Cmp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cmp), err)
  }
  return nil
}

func (p *IDataFrameServiceMin3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceMin3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "min3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMin3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMin3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cmp: ", p), err) }
  if err := p.Cmp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cmp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cmp: ", p), err) }
  return err
}

func (p *IDataFrameServiceMin3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceMin3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMin3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMin3Result struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMin3Result() *IDataFrameServiceMin3Result {
  return &IDataFrameServiceMin3Result{}
}

var IDataFrameServiceMin3Result_Success_DEFAULT int64
func (p *IDataFrameServiceMin3Result) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMin3Result_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceMin3Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMin3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMin3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMin3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMin3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMin3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMin3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceMin3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMin3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "min3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMin3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMin3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMin3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMin3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceFlatMapValuesArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceFlatMapValuesArgs() *IDataFrameServiceFlatMapValuesArgs {
  return &IDataFrameServiceFlatMapValuesArgs{}
}

var IDataFrameServiceFlatMapValuesArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFlatMapValuesArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceFlatMapValuesArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceFlatMapValuesArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFlatMapValuesArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceFlatMapValuesArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceFlatMapValuesArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceFlatMapValuesArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceFlatMapValuesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "flatMapValues_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceFlatMapValuesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceFlatMapValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFlatMapValuesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceFlatMapValuesResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceFlatMapValuesResult() *IDataFrameServiceFlatMapValuesResult {
  return &IDataFrameServiceFlatMapValuesResult{}
}

var IDataFrameServiceFlatMapValuesResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFlatMapValuesResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceFlatMapValuesResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceFlatMapValuesResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceFlatMapValuesResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceFlatMapValuesResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceFlatMapValuesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceFlatMapValuesResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceFlatMapValuesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "flatMapValues_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFlatMapValuesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFlatMapValuesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFlatMapValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFlatMapValuesResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceMapValuesArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceMapValuesArgs() *IDataFrameServiceMapValuesArgs {
  return &IDataFrameServiceMapValuesArgs{}
}

var IDataFrameServiceMapValuesArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapValuesArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceMapValuesArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceMapValuesArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceMapValuesArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceMapValuesArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceMapValuesArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceMapValuesArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceMapValuesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapValuesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceMapValuesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceMapValuesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapValues_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapValuesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapValuesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceMapValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapValuesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceMapValuesResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceMapValuesResult() *IDataFrameServiceMapValuesResult {
  return &IDataFrameServiceMapValuesResult{}
}

var IDataFrameServiceMapValuesResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceMapValuesResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceMapValuesResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceMapValuesResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceMapValuesResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceMapValuesResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceMapValuesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceMapValuesResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceMapValuesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceMapValuesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceMapValuesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceMapValuesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mapValues_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceMapValuesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapValuesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceMapValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceMapValuesResult(%+v)", *p)
}

// Attributes:
//  - ID
type IDataFrameServiceGroupByKeyArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
}

func NewIDataFrameServiceGroupByKeyArgs() *IDataFrameServiceGroupByKeyArgs {
  return &IDataFrameServiceGroupByKeyArgs{}
}

var IDataFrameServiceGroupByKeyArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKeyArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceGroupByKeyArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IDataFrameServiceGroupByKeyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceGroupByKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceGroupByKeyResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceGroupByKeyResult() *IDataFrameServiceGroupByKeyResult {
  return &IDataFrameServiceGroupByKeyResult{}
}

var IDataFrameServiceGroupByKeyResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKeyResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceGroupByKeyResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceGroupByKeyResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceGroupByKeyResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceGroupByKeyResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceGroupByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceGroupByKeyResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceGroupByKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
type IDataFrameServiceGroupByKey2aArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  NumPartitions int64 `thrift:"numPartitions,2" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceGroupByKey2aArgs() *IDataFrameServiceGroupByKey2aArgs {
  return &IDataFrameServiceGroupByKey2aArgs{}
}

var IDataFrameServiceGroupByKey2aArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKey2aArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceGroupByKey2aArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceGroupByKey2aArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceGroupByKey2aArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceGroupByKey2aArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2aArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2aArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceGroupByKey2aArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey2a_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKey2aArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKey2aArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKey2aArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKey2aArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceGroupByKey2aResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceGroupByKey2aResult() *IDataFrameServiceGroupByKey2aResult {
  return &IDataFrameServiceGroupByKey2aResult{}
}

var IDataFrameServiceGroupByKey2aResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKey2aResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceGroupByKey2aResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceGroupByKey2aResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceGroupByKey2aResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceGroupByKey2aResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceGroupByKey2aResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceGroupByKey2aResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceGroupByKey2aResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2aResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2aResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2aResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey2a_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKey2aResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKey2aResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKey2aResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKey2aResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IDataFrameServiceGroupByKey2bArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIDataFrameServiceGroupByKey2bArgs() *IDataFrameServiceGroupByKey2bArgs {
  return &IDataFrameServiceGroupByKey2bArgs{}
}

var IDataFrameServiceGroupByKey2bArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKey2bArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceGroupByKey2bArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceGroupByKey2bArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceGroupByKey2bArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceGroupByKey2bArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceGroupByKey2bArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceGroupByKey2bArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceGroupByKey2bArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey2b_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKey2bArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKey2bArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKey2bArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceGroupByKey2bResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceGroupByKey2bResult() *IDataFrameServiceGroupByKey2bResult {
  return &IDataFrameServiceGroupByKey2bResult{}
}

var IDataFrameServiceGroupByKey2bResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKey2bResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceGroupByKey2bResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceGroupByKey2bResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceGroupByKey2bResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceGroupByKey2bResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceGroupByKey2bResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceGroupByKey2bResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceGroupByKey2bResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey2b_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKey2bResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKey2bResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKey2bResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKey2bResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
//  - Src
type IDataFrameServiceGroupByKey3Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  NumPartitions int64 `thrift:"numPartitions,2" db:"numPartitions" json:"numPartitions"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIDataFrameServiceGroupByKey3Args() *IDataFrameServiceGroupByKey3Args {
  return &IDataFrameServiceGroupByKey3Args{}
}

var IDataFrameServiceGroupByKey3Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKey3Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceGroupByKey3Args_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceGroupByKey3Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
var IDataFrameServiceGroupByKey3Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceGroupByKey3Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceGroupByKey3Args_Src_DEFAULT
  }
return p.Src
}
func (p *IDataFrameServiceGroupByKey3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceGroupByKey3Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceGroupByKey3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceGroupByKey3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKey3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKey3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceGroupByKey3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKey3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceGroupByKey3Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceGroupByKey3Result() *IDataFrameServiceGroupByKey3Result {
  return &IDataFrameServiceGroupByKey3Result{}
}

var IDataFrameServiceGroupByKey3Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceGroupByKey3Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceGroupByKey3Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceGroupByKey3Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceGroupByKey3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceGroupByKey3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceGroupByKey3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceGroupByKey3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceGroupByKey3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "groupByKey3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceGroupByKey3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKey3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceGroupByKey3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceGroupByKey3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - LocalReduce
type IDataFrameServiceReduceByKeyArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  LocalReduce bool `thrift:"localReduce,3" db:"localReduce" json:"localReduce"`
}

func NewIDataFrameServiceReduceByKeyArgs() *IDataFrameServiceReduceByKeyArgs {
  return &IDataFrameServiceReduceByKeyArgs{}
}

var IDataFrameServiceReduceByKeyArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceReduceByKeyArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceReduceByKeyArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceReduceByKeyArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceReduceByKeyArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceReduceByKeyArgs_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceReduceByKeyArgs) GetLocalReduce() bool {
  return p.LocalReduce
}
func (p *IDataFrameServiceReduceByKeyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceReduceByKeyArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceReduceByKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LocalReduce = v
}
  return nil
}

func (p *IDataFrameServiceReduceByKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduceByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceReduceByKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceByKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceByKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localReduce", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:localReduce: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.LocalReduce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localReduce (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:localReduce: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceReduceByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceReduceByKeyResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceReduceByKeyResult() *IDataFrameServiceReduceByKeyResult {
  return &IDataFrameServiceReduceByKeyResult{}
}

var IDataFrameServiceReduceByKeyResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceReduceByKeyResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceReduceByKeyResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceReduceByKeyResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceReduceByKeyResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceReduceByKeyResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceReduceByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceReduceByKeyResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceReduceByKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduceByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceReduceByKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceReduceByKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceReduceByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceReduceByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - NumPartitions
//  - LocalReduce
type IDataFrameServiceReduceByKey4Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  NumPartitions int64 `thrift:"numPartitions,3" db:"numPartitions" json:"numPartitions"`
  LocalReduce bool `thrift:"localReduce,4" db:"localReduce" json:"localReduce"`
}

func NewIDataFrameServiceReduceByKey4Args() *IDataFrameServiceReduceByKey4Args {
  return &IDataFrameServiceReduceByKey4Args{}
}

var IDataFrameServiceReduceByKey4Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceReduceByKey4Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceReduceByKey4Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceReduceByKey4Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceReduceByKey4Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceReduceByKey4Args_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceReduceByKey4Args) GetNumPartitions() int64 {
  return p.NumPartitions
}

func (p *IDataFrameServiceReduceByKey4Args) GetLocalReduce() bool {
  return p.LocalReduce
}
func (p *IDataFrameServiceReduceByKey4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceReduceByKey4Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceReduceByKey4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceReduceByKey4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LocalReduce = v
}
  return nil
}

func (p *IDataFrameServiceReduceByKey4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduceByKey4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceByKey4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceByKey4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceByKey4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localReduce", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:localReduce: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.LocalReduce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localReduce (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:localReduce: ", p), err) }
  return err
}

func (p *IDataFrameServiceReduceByKey4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceReduceByKey4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceReduceByKey4Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceReduceByKey4Result() *IDataFrameServiceReduceByKey4Result {
  return &IDataFrameServiceReduceByKey4Result{}
}

var IDataFrameServiceReduceByKey4Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceReduceByKey4Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceReduceByKey4Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceReduceByKey4Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceReduceByKey4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceReduceByKey4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceReduceByKey4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceReduceByKey4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceReduceByKey4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reduceByKey4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceReduceByKey4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceReduceByKey4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceReduceByKey4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceReduceByKey4Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - SeqOp
type IDataFrameServiceAggregateByKeyArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,3" db:"seqOp" json:"seqOp"`
}

func NewIDataFrameServiceAggregateByKeyArgs() *IDataFrameServiceAggregateByKeyArgs {
  return &IDataFrameServiceAggregateByKeyArgs{}
}

var IDataFrameServiceAggregateByKeyArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKeyArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceAggregateByKeyArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceAggregateByKeyArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKeyArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceAggregateByKeyArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceAggregateByKeyArgs_SeqOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKeyArgs) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IDataFrameServiceAggregateByKeyArgs_SeqOp_DEFAULT
  }
return p.SeqOp
}
func (p *IDataFrameServiceAggregateByKeyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceAggregateByKeyArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceAggregateByKeyArgs) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IDataFrameServiceAggregateByKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seqOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceAggregateByKeyResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceAggregateByKeyResult() *IDataFrameServiceAggregateByKeyResult {
  return &IDataFrameServiceAggregateByKeyResult{}
}

var IDataFrameServiceAggregateByKeyResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKeyResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceAggregateByKeyResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceAggregateByKeyResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceAggregateByKeyResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceAggregateByKeyResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceAggregateByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceAggregateByKeyResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceAggregateByKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - SeqOp
//  - NumPartitions
type IDataFrameServiceAggregateByKey4aArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,3" db:"seqOp" json:"seqOp"`
  NumPartitions int64 `thrift:"numPartitions,4" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceAggregateByKey4aArgs() *IDataFrameServiceAggregateByKey4aArgs {
  return &IDataFrameServiceAggregateByKey4aArgs{}
}

var IDataFrameServiceAggregateByKey4aArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKey4aArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceAggregateByKey4aArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceAggregateByKey4aArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey4aArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceAggregateByKey4aArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceAggregateByKey4aArgs_SeqOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey4aArgs) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IDataFrameServiceAggregateByKey4aArgs_SeqOp_DEFAULT
  }
return p.SeqOp
}

func (p *IDataFrameServiceAggregateByKey4aArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceAggregateByKey4aArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey4a_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4aArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4aArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seqOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4aArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4aArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKey4aArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceAggregateByKey4aResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceAggregateByKey4aResult() *IDataFrameServiceAggregateByKey4aResult {
  return &IDataFrameServiceAggregateByKey4aResult{}
}

var IDataFrameServiceAggregateByKey4aResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKey4aResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceAggregateByKey4aResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceAggregateByKey4aResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceAggregateByKey4aResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceAggregateByKey4aResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceAggregateByKey4aResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceAggregateByKey4aResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceAggregateByKey4aResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey4a_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4aResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKey4aResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKey4aResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKey4aResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
type IDataFrameServiceAggregateByKey4bArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,3" db:"seqOp" json:"seqOp"`
  CombOp *rpc.ISource `thrift:"combOp,4" db:"combOp" json:"combOp"`
}

func NewIDataFrameServiceAggregateByKey4bArgs() *IDataFrameServiceAggregateByKey4bArgs {
  return &IDataFrameServiceAggregateByKey4bArgs{}
}

var IDataFrameServiceAggregateByKey4bArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKey4bArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceAggregateByKey4bArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceAggregateByKey4bArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey4bArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceAggregateByKey4bArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceAggregateByKey4bArgs_SeqOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey4bArgs) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IDataFrameServiceAggregateByKey4bArgs_SeqOp_DEFAULT
  }
return p.SeqOp
}
var IDataFrameServiceAggregateByKey4bArgs_CombOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey4bArgs) GetCombOp() *rpc.ISource {
  if !p.IsSetCombOp() {
    return IDataFrameServiceAggregateByKey4bArgs_CombOp_DEFAULT
  }
return p.CombOp
}
func (p *IDataFrameServiceAggregateByKey4bArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs) IsSetCombOp() bool {
  return p.CombOp != nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CombOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.CombOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CombOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey4b_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4bArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4bArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seqOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4bArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "combOp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:combOp: ", p), err) }
  if err := p.CombOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CombOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:combOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey4bArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKey4bArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceAggregateByKey4bResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceAggregateByKey4bResult() *IDataFrameServiceAggregateByKey4bResult {
  return &IDataFrameServiceAggregateByKey4bResult{}
}

var IDataFrameServiceAggregateByKey4bResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKey4bResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceAggregateByKey4bResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceAggregateByKey4bResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceAggregateByKey4bResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceAggregateByKey4bResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceAggregateByKey4bResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceAggregateByKey4bResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceAggregateByKey4bResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey4b_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKey4bResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKey4bResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKey4bResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKey4bResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - SeqOp
//  - CombOp
//  - NumPartitions
type IDataFrameServiceAggregateByKey5Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  SeqOp *rpc.ISource `thrift:"seqOp,3" db:"seqOp" json:"seqOp"`
  CombOp *rpc.ISource `thrift:"combOp,4" db:"combOp" json:"combOp"`
  NumPartitions int64 `thrift:"numPartitions,5" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceAggregateByKey5Args() *IDataFrameServiceAggregateByKey5Args {
  return &IDataFrameServiceAggregateByKey5Args{}
}

var IDataFrameServiceAggregateByKey5Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKey5Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceAggregateByKey5Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceAggregateByKey5Args_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey5Args) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceAggregateByKey5Args_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceAggregateByKey5Args_SeqOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey5Args) GetSeqOp() *rpc.ISource {
  if !p.IsSetSeqOp() {
    return IDataFrameServiceAggregateByKey5Args_SeqOp_DEFAULT
  }
return p.SeqOp
}
var IDataFrameServiceAggregateByKey5Args_CombOp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceAggregateByKey5Args) GetCombOp() *rpc.ISource {
  if !p.IsSetCombOp() {
    return IDataFrameServiceAggregateByKey5Args_CombOp_DEFAULT
  }
return p.CombOp
}

func (p *IDataFrameServiceAggregateByKey5Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceAggregateByKey5Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceAggregateByKey5Args) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceAggregateByKey5Args) IsSetSeqOp() bool {
  return p.SeqOp != nil
}

func (p *IDataFrameServiceAggregateByKey5Args) IsSetCombOp() bool {
  return p.CombOp != nil
}

func (p *IDataFrameServiceAggregateByKey5Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.SeqOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.CombOp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.CombOp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CombOp), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Args)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey5_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey5Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey5Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqOp", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seqOp: ", p), err) }
  if err := p.SeqOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seqOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey5Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "combOp", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:combOp: ", p), err) }
  if err := p.CombOp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CombOp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:combOp: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey5Args) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceAggregateByKey5Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKey5Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceAggregateByKey5Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceAggregateByKey5Result() *IDataFrameServiceAggregateByKey5Result {
  return &IDataFrameServiceAggregateByKey5Result{}
}

var IDataFrameServiceAggregateByKey5Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceAggregateByKey5Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceAggregateByKey5Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceAggregateByKey5Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceAggregateByKey5Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceAggregateByKey5Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceAggregateByKey5Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceAggregateByKey5Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceAggregateByKey5Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "aggregateByKey5_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceAggregateByKey5Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKey5Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceAggregateByKey5Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceAggregateByKey5Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - Src
//  - LocalFold
type IDataFrameServiceFoldByKeyArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
  LocalFold bool `thrift:"localFold,4" db:"localFold" json:"localFold"`
}

func NewIDataFrameServiceFoldByKeyArgs() *IDataFrameServiceFoldByKeyArgs {
  return &IDataFrameServiceFoldByKeyArgs{}
}

var IDataFrameServiceFoldByKeyArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFoldByKeyArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceFoldByKeyArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceFoldByKeyArgs_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFoldByKeyArgs) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceFoldByKeyArgs_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceFoldByKeyArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFoldByKeyArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceFoldByKeyArgs_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceFoldByKeyArgs) GetLocalFold() bool {
  return p.LocalFold
}
func (p *IDataFrameServiceFoldByKeyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceFoldByKeyArgs) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceFoldByKeyArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceFoldByKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LocalFold = v
}
  return nil
}

func (p *IDataFrameServiceFoldByKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foldByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFoldByKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localFold", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:localFold: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.LocalFold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localFold (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:localFold: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFoldByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceFoldByKeyResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceFoldByKeyResult() *IDataFrameServiceFoldByKeyResult {
  return &IDataFrameServiceFoldByKeyResult{}
}

var IDataFrameServiceFoldByKeyResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFoldByKeyResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceFoldByKeyResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceFoldByKeyResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceFoldByKeyResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceFoldByKeyResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceFoldByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceFoldByKeyResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceFoldByKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foldByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFoldByKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFoldByKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFoldByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFoldByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Zero
//  - Src
//  - NumPartitions
//  - LocalFold
type IDataFrameServiceFoldByKey5Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Zero *rpc.ISource `thrift:"zero,2" db:"zero" json:"zero"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
  NumPartitions int64 `thrift:"numPartitions,4" db:"numPartitions" json:"numPartitions"`
  LocalFold bool `thrift:"localFold,5" db:"localFold" json:"localFold"`
}

func NewIDataFrameServiceFoldByKey5Args() *IDataFrameServiceFoldByKey5Args {
  return &IDataFrameServiceFoldByKey5Args{}
}

var IDataFrameServiceFoldByKey5Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFoldByKey5Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceFoldByKey5Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceFoldByKey5Args_Zero_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFoldByKey5Args) GetZero() *rpc.ISource {
  if !p.IsSetZero() {
    return IDataFrameServiceFoldByKey5Args_Zero_DEFAULT
  }
return p.Zero
}
var IDataFrameServiceFoldByKey5Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceFoldByKey5Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceFoldByKey5Args_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceFoldByKey5Args) GetNumPartitions() int64 {
  return p.NumPartitions
}

func (p *IDataFrameServiceFoldByKey5Args) GetLocalFold() bool {
  return p.LocalFold
}
func (p *IDataFrameServiceFoldByKey5Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceFoldByKey5Args) IsSetZero() bool {
  return p.Zero != nil
}

func (p *IDataFrameServiceFoldByKey5Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceFoldByKey5Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Zero = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Zero.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Zero), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceFoldByKey5Args)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LocalFold = v
}
  return nil
}

func (p *IDataFrameServiceFoldByKey5Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foldByKey5_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKey5Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zero", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zero: ", p), err) }
  if err := p.Zero.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Zero), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zero: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKey5Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKey5Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKey5Args) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localFold", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:localFold: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.LocalFold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localFold (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:localFold: ", p), err) }
  return err
}

func (p *IDataFrameServiceFoldByKey5Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFoldByKey5Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceFoldByKey5Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceFoldByKey5Result() *IDataFrameServiceFoldByKey5Result {
  return &IDataFrameServiceFoldByKey5Result{}
}

var IDataFrameServiceFoldByKey5Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceFoldByKey5Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceFoldByKey5Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceFoldByKey5Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceFoldByKey5Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceFoldByKey5Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceFoldByKey5Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceFoldByKey5Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceFoldByKey5Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "foldByKey5_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceFoldByKey5Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFoldByKey5Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceFoldByKey5Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceFoldByKey5Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Ascending
type IDataFrameServiceSortByKeyArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Ascending bool `thrift:"ascending,2" db:"ascending" json:"ascending"`
}

func NewIDataFrameServiceSortByKeyArgs() *IDataFrameServiceSortByKeyArgs {
  return &IDataFrameServiceSortByKeyArgs{}
}

var IDataFrameServiceSortByKeyArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKeyArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSortByKeyArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSortByKeyArgs) GetAscending() bool {
  return p.Ascending
}
func (p *IDataFrameServiceSortByKeyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSortByKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSortByKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSortByKeyResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSortByKeyResult() *IDataFrameServiceSortByKeyResult {
  return &IDataFrameServiceSortByKeyResult{}
}

var IDataFrameServiceSortByKeyResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKeyResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSortByKeyResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSortByKeyResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSortByKeyResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSortByKeyResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSortByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSortByKeyResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSortByKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Ascending
//  - NumPartitions
type IDataFrameServiceSortByKey3aArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Ascending bool `thrift:"ascending,2" db:"ascending" json:"ascending"`
  NumPartitions int64 `thrift:"numPartitions,3" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceSortByKey3aArgs() *IDataFrameServiceSortByKey3aArgs {
  return &IDataFrameServiceSortByKey3aArgs{}
}

var IDataFrameServiceSortByKey3aArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKey3aArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSortByKey3aArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSortByKey3aArgs) GetAscending() bool {
  return p.Ascending
}

func (p *IDataFrameServiceSortByKey3aArgs) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceSortByKey3aArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSortByKey3aArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3aArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3aArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSortByKey3aArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceSortByKey3aArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey3a_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKey3aArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey3aArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey3aArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey3aArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKey3aArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSortByKey3aResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSortByKey3aResult() *IDataFrameServiceSortByKey3aResult {
  return &IDataFrameServiceSortByKey3aResult{}
}

var IDataFrameServiceSortByKey3aResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKey3aResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSortByKey3aResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSortByKey3aResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSortByKey3aResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSortByKey3aResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSortByKey3aResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSortByKey3aResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSortByKey3aResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3aResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3aResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3aResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey3a_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKey3aResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKey3aResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKey3aResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKey3aResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - Ascending
type IDataFrameServiceSortByKey3bArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  Ascending bool `thrift:"ascending,3" db:"ascending" json:"ascending"`
}

func NewIDataFrameServiceSortByKey3bArgs() *IDataFrameServiceSortByKey3bArgs {
  return &IDataFrameServiceSortByKey3bArgs{}
}

var IDataFrameServiceSortByKey3bArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKey3bArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSortByKey3bArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceSortByKey3bArgs_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceSortByKey3bArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceSortByKey3bArgs_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceSortByKey3bArgs) GetAscending() bool {
  return p.Ascending
}
func (p *IDataFrameServiceSortByKey3bArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSortByKey3bArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceSortByKey3bArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3bArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3bArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3bArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSortByKey3bArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey3b_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKey3bArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey3bArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey3bArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey3bArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKey3bArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSortByKey3bResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSortByKey3bResult() *IDataFrameServiceSortByKey3bResult {
  return &IDataFrameServiceSortByKey3bResult{}
}

var IDataFrameServiceSortByKey3bResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKey3bResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSortByKey3bResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSortByKey3bResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSortByKey3bResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSortByKey3bResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSortByKey3bResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSortByKey3bResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSortByKey3bResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3bResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3bResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey3bResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey3b_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKey3bResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKey3bResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKey3bResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKey3bResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
//  - Ascending
//  - NumPartitions
type IDataFrameServiceSortByKey4Args struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
  Ascending bool `thrift:"ascending,3" db:"ascending" json:"ascending"`
  NumPartitions int64 `thrift:"numPartitions,4" db:"numPartitions" json:"numPartitions"`
}

func NewIDataFrameServiceSortByKey4Args() *IDataFrameServiceSortByKey4Args {
  return &IDataFrameServiceSortByKey4Args{}
}

var IDataFrameServiceSortByKey4Args_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKey4Args) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSortByKey4Args_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceSortByKey4Args_Src_DEFAULT *rpc.ISource
func (p *IDataFrameServiceSortByKey4Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IDataFrameServiceSortByKey4Args_Src_DEFAULT
  }
return p.Src
}

func (p *IDataFrameServiceSortByKey4Args) GetAscending() bool {
  return p.Ascending
}

func (p *IDataFrameServiceSortByKey4Args) GetNumPartitions() int64 {
  return p.NumPartitions
}
func (p *IDataFrameServiceSortByKey4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSortByKey4Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IDataFrameServiceSortByKey4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *IDataFrameServiceSortByKey4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *IDataFrameServiceSortByKey4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKey4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ascending: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ascending (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ascending: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numPartitions", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPartitions (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numPartitions: ", p), err) }
  return err
}

func (p *IDataFrameServiceSortByKey4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKey4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSortByKey4Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSortByKey4Result() *IDataFrameServiceSortByKey4Result {
  return &IDataFrameServiceSortByKey4Result{}
}

var IDataFrameServiceSortByKey4Result_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSortByKey4Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSortByKey4Result_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSortByKey4Result_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSortByKey4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSortByKey4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSortByKey4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSortByKey4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSortByKey4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSortByKey4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sortByKey4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSortByKey4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKey4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSortByKey4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSortByKey4Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tp
type IDataFrameServiceKeysArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Tp *rpc.ISource `thrift:"tp,2" db:"tp" json:"tp"`
}

func NewIDataFrameServiceKeysArgs() *IDataFrameServiceKeysArgs {
  return &IDataFrameServiceKeysArgs{}
}

var IDataFrameServiceKeysArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceKeysArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceKeysArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceKeysArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceKeysArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceKeysArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceKeysArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceKeysArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceKeysArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceKeysArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "keys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceKeysArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceKeysArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceKeysResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceKeysResult() *IDataFrameServiceKeysResult {
  return &IDataFrameServiceKeysResult{}
}

var IDataFrameServiceKeysResult_Success_DEFAULT int64
func (p *IDataFrameServiceKeysResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceKeysResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceKeysResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceKeysResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceKeysResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceKeysResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceKeysResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceKeysResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "keys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceKeysResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceKeysResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceKeysResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tp
type IDataFrameServiceValuesArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Tp *rpc.ISource `thrift:"tp,2" db:"tp" json:"tp"`
}

func NewIDataFrameServiceValuesArgs() *IDataFrameServiceValuesArgs {
  return &IDataFrameServiceValuesArgs{}
}

var IDataFrameServiceValuesArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceValuesArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceValuesArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceValuesArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceValuesArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceValuesArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceValuesArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceValuesArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceValuesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceValuesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceValuesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceValuesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "values_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceValuesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceValuesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceValuesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceValuesResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceValuesResult() *IDataFrameServiceValuesResult {
  return &IDataFrameServiceValuesResult{}
}

var IDataFrameServiceValuesResult_Success_DEFAULT int64
func (p *IDataFrameServiceValuesResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceValuesResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceValuesResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceValuesResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceValuesResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceValuesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceValuesResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceValuesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceValuesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceValuesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceValuesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "values_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceValuesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceValuesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceValuesResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - WithReplacement
//  - Fractions
//  - Seed
type IDataFrameServiceSampleByKeyArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  WithReplacement bool `thrift:"withReplacement,2" db:"withReplacement" json:"withReplacement"`
  Fractions *rpc.ISource `thrift:"fractions,3" db:"fractions" json:"fractions"`
  Seed int32 `thrift:"seed,4" db:"seed" json:"seed"`
}

func NewIDataFrameServiceSampleByKeyArgs() *IDataFrameServiceSampleByKeyArgs {
  return &IDataFrameServiceSampleByKeyArgs{}
}

var IDataFrameServiceSampleByKeyArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSampleByKeyArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceSampleByKeyArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IDataFrameServiceSampleByKeyArgs) GetWithReplacement() bool {
  return p.WithReplacement
}
var IDataFrameServiceSampleByKeyArgs_Fractions_DEFAULT *rpc.ISource
func (p *IDataFrameServiceSampleByKeyArgs) GetFractions() *rpc.ISource {
  if !p.IsSetFractions() {
    return IDataFrameServiceSampleByKeyArgs_Fractions_DEFAULT
  }
return p.Fractions
}

func (p *IDataFrameServiceSampleByKeyArgs) GetSeed() int32 {
  return p.Seed
}
func (p *IDataFrameServiceSampleByKeyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceSampleByKeyArgs) IsSetFractions() bool {
  return p.Fractions != nil
}

func (p *IDataFrameServiceSampleByKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleByKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleByKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithReplacement = v
}
  return nil
}

func (p *IDataFrameServiceSampleByKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Fractions = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Fractions.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fractions), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleByKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Seed = v
}
  return nil
}

func (p *IDataFrameServiceSampleByKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sampleByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSampleByKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleByKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withReplacement", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withReplacement: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithReplacement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withReplacement (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withReplacement: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleByKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fractions", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fractions: ", p), err) }
  if err := p.Fractions.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fractions), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fractions: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleByKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seed", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seed: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seed: ", p), err) }
  return err
}

func (p *IDataFrameServiceSampleByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSampleByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceSampleByKeyResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceSampleByKeyResult() *IDataFrameServiceSampleByKeyResult {
  return &IDataFrameServiceSampleByKeyResult{}
}

var IDataFrameServiceSampleByKeyResult_Success_DEFAULT *IDataFrameId
func (p *IDataFrameServiceSampleByKeyResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IDataFrameServiceSampleByKeyResult_Success_DEFAULT
  }
return p.Success
}
var IDataFrameServiceSampleByKeyResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceSampleByKeyResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceSampleByKeyResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceSampleByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceSampleByKeyResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceSampleByKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleByKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleByKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceSampleByKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sampleByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceSampleByKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSampleByKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceSampleByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceSampleByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tp
type IDataFrameServiceCountByKeyArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Tp *rpc.ISource `thrift:"tp,2" db:"tp" json:"tp"`
}

func NewIDataFrameServiceCountByKeyArgs() *IDataFrameServiceCountByKeyArgs {
  return &IDataFrameServiceCountByKeyArgs{}
}

var IDataFrameServiceCountByKeyArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceCountByKeyArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceCountByKeyArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceCountByKeyArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceCountByKeyArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceCountByKeyArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceCountByKeyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceCountByKeyArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceCountByKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "countByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCountByKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceCountByKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceCountByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCountByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceCountByKeyResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceCountByKeyResult() *IDataFrameServiceCountByKeyResult {
  return &IDataFrameServiceCountByKeyResult{}
}

var IDataFrameServiceCountByKeyResult_Success_DEFAULT int64
func (p *IDataFrameServiceCountByKeyResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceCountByKeyResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceCountByKeyResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceCountByKeyResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceCountByKeyResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceCountByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceCountByKeyResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceCountByKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceCountByKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "countByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCountByKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCountByKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCountByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCountByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tp
type IDataFrameServiceCountByValueArgs struct {
  ID *IDataFrameId `thrift:"id,1" db:"id" json:"id"`
  Tp *rpc.ISource `thrift:"tp,2" db:"tp" json:"tp"`
}

func NewIDataFrameServiceCountByValueArgs() *IDataFrameServiceCountByValueArgs {
  return &IDataFrameServiceCountByValueArgs{}
}

var IDataFrameServiceCountByValueArgs_ID_DEFAULT *IDataFrameId
func (p *IDataFrameServiceCountByValueArgs) GetID() *IDataFrameId {
  if !p.IsSetID() {
    return IDataFrameServiceCountByValueArgs_ID_DEFAULT
  }
return p.ID
}
var IDataFrameServiceCountByValueArgs_Tp_DEFAULT *rpc.ISource
func (p *IDataFrameServiceCountByValueArgs) GetTp() *rpc.ISource {
  if !p.IsSetTp() {
    return IDataFrameServiceCountByValueArgs_Tp_DEFAULT
  }
return p.Tp
}
func (p *IDataFrameServiceCountByValueArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IDataFrameServiceCountByValueArgs) IsSetTp() bool {
  return p.Tp != nil
}

func (p *IDataFrameServiceCountByValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IDataFrameId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByValueArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tp = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Tp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tp), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "countByValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCountByValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IDataFrameServiceCountByValueArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tp: ", p), err) }
  if err := p.Tp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tp: ", p), err) }
  return err
}

func (p *IDataFrameServiceCountByValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCountByValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IDataFrameServiceCountByValueResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIDataFrameServiceCountByValueResult() *IDataFrameServiceCountByValueResult {
  return &IDataFrameServiceCountByValueResult{}
}

var IDataFrameServiceCountByValueResult_Success_DEFAULT int64
func (p *IDataFrameServiceCountByValueResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IDataFrameServiceCountByValueResult_Success_DEFAULT
  }
return *p.Success
}
var IDataFrameServiceCountByValueResult_Ex_DEFAULT *IDriverException
func (p *IDataFrameServiceCountByValueResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IDataFrameServiceCountByValueResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IDataFrameServiceCountByValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDataFrameServiceCountByValueResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IDataFrameServiceCountByValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IDataFrameServiceCountByValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IDataFrameServiceCountByValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "countByValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDataFrameServiceCountByValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCountByValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IDataFrameServiceCountByValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDataFrameServiceCountByValueResult(%+v)", *p)
}


