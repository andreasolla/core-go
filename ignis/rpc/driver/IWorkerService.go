// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package driver

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = rpc.GoUnusedProtection__
// Attributes:
//  - Cluster
//  - Worker
type IWorkerId struct {
  Cluster int64 `thrift:"cluster,1,required" db:"cluster" json:"cluster"`
  Worker int64 `thrift:"worker,2,required" db:"worker" json:"worker"`
}

func NewIWorkerId() *IWorkerId {
  return &IWorkerId{}
}


func (p *IWorkerId) GetCluster() int64 {
  return p.Cluster
}

func (p *IWorkerId) GetWorker() int64 {
  return p.Worker
}
func (p *IWorkerId) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCluster bool = false;
  var issetWorker bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCluster = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetWorker = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCluster{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Cluster is not set"));
  }
  if !issetWorker{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Worker is not set"));
  }
  return nil
}

func (p *IWorkerId)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Cluster = v
}
  return nil
}

func (p *IWorkerId)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Worker = v
}
  return nil
}

func (p *IWorkerId) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IWorkerId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cluster", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cluster: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Cluster)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cluster: ", p), err) }
  return err
}

func (p *IWorkerId) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "worker", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:worker: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Worker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.worker (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:worker: ", p), err) }
  return err
}

func (p *IWorkerId) Equals(other *IWorkerId) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Cluster != other.Cluster { return false }
  if p.Worker != other.Worker { return false }
  return true
}

func (p *IWorkerId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerId(%+v)", *p)
}

type IWorkerService interface {
  // Parameters:
  //  - ID
  Start(ctx context.Context, id *IWorkerId) (_err error)
  // Parameters:
  //  - ID
  Destroy(ctx context.Context, id *IWorkerId) (_err error)
  // Parameters:
  //  - ID
  //  - Type
  NewInstance_(ctx context.Context, id int64, type_a1 string) (_r *IWorkerId, _err error)
  // Parameters:
  //  - ID
  //  - Name
  //  - Type
  NewInstance3_(ctx context.Context, id int64, name string, type_a1 string) (_r *IWorkerId, _err error)
  // Parameters:
  //  - ID
  //  - Type
  //  - Cores
  //  - Instances
  NewInstance4_(ctx context.Context, id int64, type_a1 string, cores int32, instances int32) (_r *IWorkerId, _err error)
  // Parameters:
  //  - ID
  //  - Name
  //  - Type
  //  - Cores
  //  - Instances
  NewInstance5_(ctx context.Context, id int64, name string, type_a1 string, cores int32, instances int32) (_r *IWorkerId, _err error)
  // Parameters:
  //  - ID
  //  - Name
  SetName(ctx context.Context, id *IWorkerId, name string) (_err error)
  // Parameters:
  //  - ID
  //  - DataId
  //  - Partitions
  Parallelize(ctx context.Context, id *IWorkerId, dataId int64, partitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - DataId
  //  - Partitions
  //  - Src
  Parallelize4(ctx context.Context, id *IWorkerId, dataId int64, partitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Data
  ImportDataFrame(ctx context.Context, id *IWorkerId, data *IDataFrameId) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Data
  //  - Src
  ImportDataFrame3(ctx context.Context, id *IWorkerId, data *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - Delim
  PlainFile(ctx context.Context, id *IWorkerId, path string, delim string) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - MinPartitions
  //  - Delim
  PlainFile4(ctx context.Context, id *IWorkerId, path string, minPartitions int64, delim string) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  TextFile(ctx context.Context, id *IWorkerId, path string) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - MinPartitions
  TextFile3(ctx context.Context, id *IWorkerId, path string, minPartitions int64) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  PartitionObjectFile(ctx context.Context, id *IWorkerId, path string) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - Src
  PartitionObjectFile3(ctx context.Context, id *IWorkerId, path string, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  PartitionTextFile(ctx context.Context, id *IWorkerId, path string) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - ObjectMapping
  PartitionJsonFile3a(ctx context.Context, id *IWorkerId, path string, objectMapping bool) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Path
  //  - Src
  PartitionJsonFile3b(ctx context.Context, id *IWorkerId, path string, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Lib
  LoadLibrary(ctx context.Context, id *IWorkerId, lib string) (_err error)
  // Parameters:
  //  - ID
  //  - Src
  Execute(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_err error)
  // Parameters:
  //  - ID
  //  - Src
  ExecuteTo(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Src
  VoidCall(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_err error)
  // Parameters:
  //  - ID
  //  - Data
  //  - Src
  VoidCall3(ctx context.Context, id *IWorkerId, data *IDataFrameId, src *rpc.ISource) (_err error)
  // Parameters:
  //  - ID
  //  - Src
  Call(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_r *IDataFrameId, _err error)
  // Parameters:
  //  - ID
  //  - Data
  //  - Src
  Call3(ctx context.Context, id *IWorkerId, data *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error)
}

type IWorkerServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewIWorkerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IWorkerServiceClient {
  return &IWorkerServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIWorkerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IWorkerServiceClient {
  return &IWorkerServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIWorkerServiceClient(c thrift.TClient) *IWorkerServiceClient {
  return &IWorkerServiceClient{
    c: c,
  }
}

func (p *IWorkerServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *IWorkerServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *IWorkerServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ID
func (p *IWorkerServiceClient) Start(ctx context.Context, id *IWorkerId) (_err error) {
  var _args0 IWorkerServiceStartArgs
  _args0.ID = id
  var _result2 IWorkerServiceStartResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "start", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ID
func (p *IWorkerServiceClient) Destroy(ctx context.Context, id *IWorkerId) (_err error) {
  var _args3 IWorkerServiceDestroyArgs
  _args3.ID = id
  var _result5 IWorkerServiceDestroyResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "destroy", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - ID
//  - Type
func (p *IWorkerServiceClient) NewInstance_(ctx context.Context, id int64, type_a1 string) (_r *IWorkerId, _err error) {
  var _args6 IWorkerServiceNewInstanceArgs_
  _args6.ID = id
  _args6.Type = type_a1
  var _result8 IWorkerServiceNewInstanceResult_
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "newInstance", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.Ex!= nil:
    return _r, _result8.Ex
  }

  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "newInstance failed: unknown result")
}

// Parameters:
//  - ID
//  - Name
//  - Type
func (p *IWorkerServiceClient) NewInstance3_(ctx context.Context, id int64, name string, type_a1 string) (_r *IWorkerId, _err error) {
  var _args10 IWorkerServiceNewInstance3Args_
  _args10.ID = id
  _args10.Name = name
  _args10.Type = type_a1
  var _result12 IWorkerServiceNewInstance3Result_
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "newInstance3", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  switch {
  case _result12.Ex!= nil:
    return _r, _result12.Ex
  }

  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "newInstance3 failed: unknown result")
}

// Parameters:
//  - ID
//  - Type
//  - Cores
//  - Instances
func (p *IWorkerServiceClient) NewInstance4_(ctx context.Context, id int64, type_a1 string, cores int32, instances int32) (_r *IWorkerId, _err error) {
  var _args14 IWorkerServiceNewInstance4Args_
  _args14.ID = id
  _args14.Type = type_a1
  _args14.Cores = cores
  _args14.Instances = instances
  var _result16 IWorkerServiceNewInstance4Result_
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "newInstance4", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  switch {
  case _result16.Ex!= nil:
    return _r, _result16.Ex
  }

  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "newInstance4 failed: unknown result")
}

// Parameters:
//  - ID
//  - Name
//  - Type
//  - Cores
//  - Instances
func (p *IWorkerServiceClient) NewInstance5_(ctx context.Context, id int64, name string, type_a1 string, cores int32, instances int32) (_r *IWorkerId, _err error) {
  var _args18 IWorkerServiceNewInstance5Args_
  _args18.ID = id
  _args18.Name = name
  _args18.Type = type_a1
  _args18.Cores = cores
  _args18.Instances = instances
  var _result20 IWorkerServiceNewInstance5Result_
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "newInstance5", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  switch {
  case _result20.Ex!= nil:
    return _r, _result20.Ex
  }

  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "newInstance5 failed: unknown result")
}

// Parameters:
//  - ID
//  - Name
func (p *IWorkerServiceClient) SetName(ctx context.Context, id *IWorkerId, name string) (_err error) {
  var _args22 IWorkerServiceSetNameArgs
  _args22.ID = id
  _args22.Name = name
  var _result24 IWorkerServiceSetNameResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "setName", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  switch {
  case _result24.Ex!= nil:
    return _result24.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - DataId
//  - Partitions
func (p *IWorkerServiceClient) Parallelize(ctx context.Context, id *IWorkerId, dataId int64, partitions int64) (_r *IDataFrameId, _err error) {
  var _args25 IWorkerServiceParallelizeArgs
  _args25.ID = id
  _args25.DataId = dataId
  _args25.Partitions = partitions
  var _result27 IWorkerServiceParallelizeResult
  var _meta26 thrift.ResponseMeta
  _meta26, _err = p.Client_().Call(ctx, "parallelize", &_args25, &_result27)
  p.SetLastResponseMeta_(_meta26)
  if _err != nil {
    return
  }
  switch {
  case _result27.Ex!= nil:
    return _r, _result27.Ex
  }

  if _ret28 := _result27.GetSuccess(); _ret28 != nil {
    return _ret28, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "parallelize failed: unknown result")
}

// Parameters:
//  - ID
//  - DataId
//  - Partitions
//  - Src
func (p *IWorkerServiceClient) Parallelize4(ctx context.Context, id *IWorkerId, dataId int64, partitions int64, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args29 IWorkerServiceParallelize4Args
  _args29.ID = id
  _args29.DataId = dataId
  _args29.Partitions = partitions
  _args29.Src = src
  var _result31 IWorkerServiceParallelize4Result
  var _meta30 thrift.ResponseMeta
  _meta30, _err = p.Client_().Call(ctx, "parallelize4", &_args29, &_result31)
  p.SetLastResponseMeta_(_meta30)
  if _err != nil {
    return
  }
  switch {
  case _result31.Ex!= nil:
    return _r, _result31.Ex
  }

  if _ret32 := _result31.GetSuccess(); _ret32 != nil {
    return _ret32, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "parallelize4 failed: unknown result")
}

// Parameters:
//  - ID
//  - Data
func (p *IWorkerServiceClient) ImportDataFrame(ctx context.Context, id *IWorkerId, data *IDataFrameId) (_r *IDataFrameId, _err error) {
  var _args33 IWorkerServiceImportDataFrameArgs
  _args33.ID = id
  _args33.Data = data
  var _result35 IWorkerServiceImportDataFrameResult
  var _meta34 thrift.ResponseMeta
  _meta34, _err = p.Client_().Call(ctx, "importDataFrame", &_args33, &_result35)
  p.SetLastResponseMeta_(_meta34)
  if _err != nil {
    return
  }
  switch {
  case _result35.Ex!= nil:
    return _r, _result35.Ex
  }

  if _ret36 := _result35.GetSuccess(); _ret36 != nil {
    return _ret36, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "importDataFrame failed: unknown result")
}

// Parameters:
//  - ID
//  - Data
//  - Src
func (p *IWorkerServiceClient) ImportDataFrame3(ctx context.Context, id *IWorkerId, data *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args37 IWorkerServiceImportDataFrame3Args
  _args37.ID = id
  _args37.Data = data
  _args37.Src = src
  var _result39 IWorkerServiceImportDataFrame3Result
  var _meta38 thrift.ResponseMeta
  _meta38, _err = p.Client_().Call(ctx, "importDataFrame3", &_args37, &_result39)
  p.SetLastResponseMeta_(_meta38)
  if _err != nil {
    return
  }
  switch {
  case _result39.Ex!= nil:
    return _r, _result39.Ex
  }

  if _ret40 := _result39.GetSuccess(); _ret40 != nil {
    return _ret40, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "importDataFrame3 failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
//  - Delim
func (p *IWorkerServiceClient) PlainFile(ctx context.Context, id *IWorkerId, path string, delim string) (_r *IDataFrameId, _err error) {
  var _args41 IWorkerServicePlainFileArgs
  _args41.ID = id
  _args41.Path = path
  _args41.Delim = delim
  var _result43 IWorkerServicePlainFileResult
  var _meta42 thrift.ResponseMeta
  _meta42, _err = p.Client_().Call(ctx, "plainFile", &_args41, &_result43)
  p.SetLastResponseMeta_(_meta42)
  if _err != nil {
    return
  }
  switch {
  case _result43.Ex!= nil:
    return _r, _result43.Ex
  }

  if _ret44 := _result43.GetSuccess(); _ret44 != nil {
    return _ret44, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "plainFile failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
//  - MinPartitions
//  - Delim
func (p *IWorkerServiceClient) PlainFile4(ctx context.Context, id *IWorkerId, path string, minPartitions int64, delim string) (_r *IDataFrameId, _err error) {
  var _args45 IWorkerServicePlainFile4Args
  _args45.ID = id
  _args45.Path = path
  _args45.MinPartitions = minPartitions
  _args45.Delim = delim
  var _result47 IWorkerServicePlainFile4Result
  var _meta46 thrift.ResponseMeta
  _meta46, _err = p.Client_().Call(ctx, "plainFile4", &_args45, &_result47)
  p.SetLastResponseMeta_(_meta46)
  if _err != nil {
    return
  }
  switch {
  case _result47.Ex!= nil:
    return _r, _result47.Ex
  }

  if _ret48 := _result47.GetSuccess(); _ret48 != nil {
    return _ret48, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "plainFile4 failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
func (p *IWorkerServiceClient) TextFile(ctx context.Context, id *IWorkerId, path string) (_r *IDataFrameId, _err error) {
  var _args49 IWorkerServiceTextFileArgs
  _args49.ID = id
  _args49.Path = path
  var _result51 IWorkerServiceTextFileResult
  var _meta50 thrift.ResponseMeta
  _meta50, _err = p.Client_().Call(ctx, "textFile", &_args49, &_result51)
  p.SetLastResponseMeta_(_meta50)
  if _err != nil {
    return
  }
  switch {
  case _result51.Ex!= nil:
    return _r, _result51.Ex
  }

  if _ret52 := _result51.GetSuccess(); _ret52 != nil {
    return _ret52, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "textFile failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
//  - MinPartitions
func (p *IWorkerServiceClient) TextFile3(ctx context.Context, id *IWorkerId, path string, minPartitions int64) (_r *IDataFrameId, _err error) {
  var _args53 IWorkerServiceTextFile3Args
  _args53.ID = id
  _args53.Path = path
  _args53.MinPartitions = minPartitions
  var _result55 IWorkerServiceTextFile3Result
  var _meta54 thrift.ResponseMeta
  _meta54, _err = p.Client_().Call(ctx, "textFile3", &_args53, &_result55)
  p.SetLastResponseMeta_(_meta54)
  if _err != nil {
    return
  }
  switch {
  case _result55.Ex!= nil:
    return _r, _result55.Ex
  }

  if _ret56 := _result55.GetSuccess(); _ret56 != nil {
    return _ret56, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "textFile3 failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
func (p *IWorkerServiceClient) PartitionObjectFile(ctx context.Context, id *IWorkerId, path string) (_r *IDataFrameId, _err error) {
  var _args57 IWorkerServicePartitionObjectFileArgs
  _args57.ID = id
  _args57.Path = path
  var _result59 IWorkerServicePartitionObjectFileResult
  var _meta58 thrift.ResponseMeta
  _meta58, _err = p.Client_().Call(ctx, "partitionObjectFile", &_args57, &_result59)
  p.SetLastResponseMeta_(_meta58)
  if _err != nil {
    return
  }
  switch {
  case _result59.Ex!= nil:
    return _r, _result59.Ex
  }

  if _ret60 := _result59.GetSuccess(); _ret60 != nil {
    return _ret60, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "partitionObjectFile failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
//  - Src
func (p *IWorkerServiceClient) PartitionObjectFile3(ctx context.Context, id *IWorkerId, path string, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args61 IWorkerServicePartitionObjectFile3Args
  _args61.ID = id
  _args61.Path = path
  _args61.Src = src
  var _result63 IWorkerServicePartitionObjectFile3Result
  var _meta62 thrift.ResponseMeta
  _meta62, _err = p.Client_().Call(ctx, "partitionObjectFile3", &_args61, &_result63)
  p.SetLastResponseMeta_(_meta62)
  if _err != nil {
    return
  }
  switch {
  case _result63.Ex!= nil:
    return _r, _result63.Ex
  }

  if _ret64 := _result63.GetSuccess(); _ret64 != nil {
    return _ret64, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "partitionObjectFile3 failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
func (p *IWorkerServiceClient) PartitionTextFile(ctx context.Context, id *IWorkerId, path string) (_r *IDataFrameId, _err error) {
  var _args65 IWorkerServicePartitionTextFileArgs
  _args65.ID = id
  _args65.Path = path
  var _result67 IWorkerServicePartitionTextFileResult
  var _meta66 thrift.ResponseMeta
  _meta66, _err = p.Client_().Call(ctx, "partitionTextFile", &_args65, &_result67)
  p.SetLastResponseMeta_(_meta66)
  if _err != nil {
    return
  }
  switch {
  case _result67.Ex!= nil:
    return _r, _result67.Ex
  }

  if _ret68 := _result67.GetSuccess(); _ret68 != nil {
    return _ret68, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "partitionTextFile failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
//  - ObjectMapping
func (p *IWorkerServiceClient) PartitionJsonFile3a(ctx context.Context, id *IWorkerId, path string, objectMapping bool) (_r *IDataFrameId, _err error) {
  var _args69 IWorkerServicePartitionJsonFile3aArgs
  _args69.ID = id
  _args69.Path = path
  _args69.ObjectMapping = objectMapping
  var _result71 IWorkerServicePartitionJsonFile3aResult
  var _meta70 thrift.ResponseMeta
  _meta70, _err = p.Client_().Call(ctx, "partitionJsonFile3a", &_args69, &_result71)
  p.SetLastResponseMeta_(_meta70)
  if _err != nil {
    return
  }
  switch {
  case _result71.Ex!= nil:
    return _r, _result71.Ex
  }

  if _ret72 := _result71.GetSuccess(); _ret72 != nil {
    return _ret72, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "partitionJsonFile3a failed: unknown result")
}

// Parameters:
//  - ID
//  - Path
//  - Src
func (p *IWorkerServiceClient) PartitionJsonFile3b(ctx context.Context, id *IWorkerId, path string, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args73 IWorkerServicePartitionJsonFile3bArgs
  _args73.ID = id
  _args73.Path = path
  _args73.Src = src
  var _result75 IWorkerServicePartitionJsonFile3bResult
  var _meta74 thrift.ResponseMeta
  _meta74, _err = p.Client_().Call(ctx, "partitionJsonFile3b", &_args73, &_result75)
  p.SetLastResponseMeta_(_meta74)
  if _err != nil {
    return
  }
  switch {
  case _result75.Ex!= nil:
    return _r, _result75.Ex
  }

  if _ret76 := _result75.GetSuccess(); _ret76 != nil {
    return _ret76, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "partitionJsonFile3b failed: unknown result")
}

// Parameters:
//  - ID
//  - Lib
func (p *IWorkerServiceClient) LoadLibrary(ctx context.Context, id *IWorkerId, lib string) (_err error) {
  var _args77 IWorkerServiceLoadLibraryArgs
  _args77.ID = id
  _args77.Lib = lib
  var _result79 IWorkerServiceLoadLibraryResult
  var _meta78 thrift.ResponseMeta
  _meta78, _err = p.Client_().Call(ctx, "loadLibrary", &_args77, &_result79)
  p.SetLastResponseMeta_(_meta78)
  if _err != nil {
    return
  }
  switch {
  case _result79.Ex!= nil:
    return _result79.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Src
func (p *IWorkerServiceClient) Execute(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_err error) {
  var _args80 IWorkerServiceExecuteArgs
  _args80.ID = id
  _args80.Src = src
  var _result82 IWorkerServiceExecuteResult
  var _meta81 thrift.ResponseMeta
  _meta81, _err = p.Client_().Call(ctx, "execute", &_args80, &_result82)
  p.SetLastResponseMeta_(_meta81)
  if _err != nil {
    return
  }
  switch {
  case _result82.Ex!= nil:
    return _result82.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Src
func (p *IWorkerServiceClient) ExecuteTo(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args83 IWorkerServiceExecuteToArgs
  _args83.ID = id
  _args83.Src = src
  var _result85 IWorkerServiceExecuteToResult
  var _meta84 thrift.ResponseMeta
  _meta84, _err = p.Client_().Call(ctx, "executeTo", &_args83, &_result85)
  p.SetLastResponseMeta_(_meta84)
  if _err != nil {
    return
  }
  switch {
  case _result85.Ex!= nil:
    return _r, _result85.Ex
  }

  if _ret86 := _result85.GetSuccess(); _ret86 != nil {
    return _ret86, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "executeTo failed: unknown result")
}

// Parameters:
//  - ID
//  - Src
func (p *IWorkerServiceClient) VoidCall(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_err error) {
  var _args87 IWorkerServiceVoidCallArgs
  _args87.ID = id
  _args87.Src = src
  var _result89 IWorkerServiceVoidCallResult
  var _meta88 thrift.ResponseMeta
  _meta88, _err = p.Client_().Call(ctx, "voidCall", &_args87, &_result89)
  p.SetLastResponseMeta_(_meta88)
  if _err != nil {
    return
  }
  switch {
  case _result89.Ex!= nil:
    return _result89.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Data
//  - Src
func (p *IWorkerServiceClient) VoidCall3(ctx context.Context, id *IWorkerId, data *IDataFrameId, src *rpc.ISource) (_err error) {
  var _args90 IWorkerServiceVoidCall3Args
  _args90.ID = id
  _args90.Data = data
  _args90.Src = src
  var _result92 IWorkerServiceVoidCall3Result
  var _meta91 thrift.ResponseMeta
  _meta91, _err = p.Client_().Call(ctx, "voidCall3", &_args90, &_result92)
  p.SetLastResponseMeta_(_meta91)
  if _err != nil {
    return
  }
  switch {
  case _result92.Ex!= nil:
    return _result92.Ex
  }

  return nil
}

// Parameters:
//  - ID
//  - Src
func (p *IWorkerServiceClient) Call(ctx context.Context, id *IWorkerId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args93 IWorkerServiceCallArgs
  _args93.ID = id
  _args93.Src = src
  var _result95 IWorkerServiceCallResult
  var _meta94 thrift.ResponseMeta
  _meta94, _err = p.Client_().Call(ctx, "call", &_args93, &_result95)
  p.SetLastResponseMeta_(_meta94)
  if _err != nil {
    return
  }
  switch {
  case _result95.Ex!= nil:
    return _r, _result95.Ex
  }

  if _ret96 := _result95.GetSuccess(); _ret96 != nil {
    return _ret96, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "call failed: unknown result")
}

// Parameters:
//  - ID
//  - Data
//  - Src
func (p *IWorkerServiceClient) Call3(ctx context.Context, id *IWorkerId, data *IDataFrameId, src *rpc.ISource) (_r *IDataFrameId, _err error) {
  var _args97 IWorkerServiceCall3Args
  _args97.ID = id
  _args97.Data = data
  _args97.Src = src
  var _result99 IWorkerServiceCall3Result
  var _meta98 thrift.ResponseMeta
  _meta98, _err = p.Client_().Call(ctx, "call3", &_args97, &_result99)
  p.SetLastResponseMeta_(_meta98)
  if _err != nil {
    return
  }
  switch {
  case _result99.Ex!= nil:
    return _r, _result99.Ex
  }

  if _ret100 := _result99.GetSuccess(); _ret100 != nil {
    return _ret100, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "call3 failed: unknown result")
}

type IWorkerServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IWorkerService
}

func (p *IWorkerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IWorkerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IWorkerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIWorkerServiceProcessor(handler IWorkerService) *IWorkerServiceProcessor {

  self101 := &IWorkerServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self101.processorMap["start"] = &iWorkerServiceProcessorStart{handler:handler}
  self101.processorMap["destroy"] = &iWorkerServiceProcessorDestroy{handler:handler}
  self101.processorMap["newInstance"] = &iWorkerServiceProcessorNewInstance_{handler:handler}
  self101.processorMap["newInstance3"] = &iWorkerServiceProcessorNewInstance3_{handler:handler}
  self101.processorMap["newInstance4"] = &iWorkerServiceProcessorNewInstance4_{handler:handler}
  self101.processorMap["newInstance5"] = &iWorkerServiceProcessorNewInstance5_{handler:handler}
  self101.processorMap["setName"] = &iWorkerServiceProcessorSetName{handler:handler}
  self101.processorMap["parallelize"] = &iWorkerServiceProcessorParallelize{handler:handler}
  self101.processorMap["parallelize4"] = &iWorkerServiceProcessorParallelize4{handler:handler}
  self101.processorMap["importDataFrame"] = &iWorkerServiceProcessorImportDataFrame{handler:handler}
  self101.processorMap["importDataFrame3"] = &iWorkerServiceProcessorImportDataFrame3{handler:handler}
  self101.processorMap["plainFile"] = &iWorkerServiceProcessorPlainFile{handler:handler}
  self101.processorMap["plainFile4"] = &iWorkerServiceProcessorPlainFile4{handler:handler}
  self101.processorMap["textFile"] = &iWorkerServiceProcessorTextFile{handler:handler}
  self101.processorMap["textFile3"] = &iWorkerServiceProcessorTextFile3{handler:handler}
  self101.processorMap["partitionObjectFile"] = &iWorkerServiceProcessorPartitionObjectFile{handler:handler}
  self101.processorMap["partitionObjectFile3"] = &iWorkerServiceProcessorPartitionObjectFile3{handler:handler}
  self101.processorMap["partitionTextFile"] = &iWorkerServiceProcessorPartitionTextFile{handler:handler}
  self101.processorMap["partitionJsonFile3a"] = &iWorkerServiceProcessorPartitionJsonFile3a{handler:handler}
  self101.processorMap["partitionJsonFile3b"] = &iWorkerServiceProcessorPartitionJsonFile3b{handler:handler}
  self101.processorMap["loadLibrary"] = &iWorkerServiceProcessorLoadLibrary{handler:handler}
  self101.processorMap["execute"] = &iWorkerServiceProcessorExecute{handler:handler}
  self101.processorMap["executeTo"] = &iWorkerServiceProcessorExecuteTo{handler:handler}
  self101.processorMap["voidCall"] = &iWorkerServiceProcessorVoidCall{handler:handler}
  self101.processorMap["voidCall3"] = &iWorkerServiceProcessorVoidCall3{handler:handler}
  self101.processorMap["call"] = &iWorkerServiceProcessorCall{handler:handler}
  self101.processorMap["call3"] = &iWorkerServiceProcessorCall3{handler:handler}
return self101
}

func (p *IWorkerServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x102 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x102.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x102

}

type iWorkerServiceProcessorStart struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorStart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceStartArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "start", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceStartResult{}
  if err2 = p.handler.Start(ctx, args.ID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing start: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "start", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "start", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorDestroy struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorDestroy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceDestroyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "destroy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceDestroyResult{}
  if err2 = p.handler.Destroy(ctx, args.ID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing destroy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "destroy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "destroy", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorNewInstance_ struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorNewInstance_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceNewInstanceArgs_{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceNewInstanceResult_{}
  var retval *IWorkerId
  if retval, err2 = p.handler.NewInstance_(ctx, args.ID, args.Type); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing newInstance: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "newInstance", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorNewInstance3_ struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorNewInstance3_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceNewInstance3Args_{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceNewInstance3Result_{}
  var retval *IWorkerId
  if retval, err2 = p.handler.NewInstance3_(ctx, args.ID, args.Name, args.Type); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing newInstance3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "newInstance3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorNewInstance4_ struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorNewInstance4_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceNewInstance4Args_{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceNewInstance4Result_{}
  var retval *IWorkerId
  if retval, err2 = p.handler.NewInstance4_(ctx, args.ID, args.Type, args.Cores, args.Instances); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing newInstance4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "newInstance4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorNewInstance5_ struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorNewInstance5_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceNewInstance5Args_{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance5", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceNewInstance5Result_{}
  var retval *IWorkerId
  if retval, err2 = p.handler.NewInstance5_(ctx, args.ID, args.Name, args.Type, args.Cores, args.Instances); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing newInstance5: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "newInstance5", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "newInstance5", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorSetName struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorSetName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceSetNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceSetNameResult{}
  if err2 = p.handler.SetName(ctx, args.ID, args.Name); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setName: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setName", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorParallelize struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorParallelize) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceParallelizeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "parallelize", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceParallelizeResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Parallelize(ctx, args.ID, args.DataId, args.Partitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing parallelize: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "parallelize", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "parallelize", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorParallelize4 struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorParallelize4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceParallelize4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "parallelize4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceParallelize4Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Parallelize4(ctx, args.ID, args.DataId, args.Partitions, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing parallelize4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "parallelize4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "parallelize4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorImportDataFrame struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorImportDataFrame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceImportDataFrameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "importDataFrame", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceImportDataFrameResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.ImportDataFrame(ctx, args.ID, args.Data); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing importDataFrame: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "importDataFrame", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "importDataFrame", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorImportDataFrame3 struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorImportDataFrame3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceImportDataFrame3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "importDataFrame3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceImportDataFrame3Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.ImportDataFrame3(ctx, args.ID, args.Data, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing importDataFrame3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "importDataFrame3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "importDataFrame3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorPlainFile struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorPlainFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServicePlainFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "plainFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServicePlainFileResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PlainFile(ctx, args.ID, args.Path, args.Delim); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing plainFile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "plainFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "plainFile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorPlainFile4 struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorPlainFile4) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServicePlainFile4Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "plainFile4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServicePlainFile4Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PlainFile4(ctx, args.ID, args.Path, args.MinPartitions, args.Delim); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing plainFile4: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "plainFile4", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "plainFile4", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorTextFile struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorTextFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceTextFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "textFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceTextFileResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.TextFile(ctx, args.ID, args.Path); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing textFile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "textFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "textFile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorTextFile3 struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorTextFile3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceTextFile3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "textFile3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceTextFile3Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.TextFile3(ctx, args.ID, args.Path, args.MinPartitions); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing textFile3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "textFile3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "textFile3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorPartitionObjectFile struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorPartitionObjectFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServicePartitionObjectFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionObjectFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServicePartitionObjectFileResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionObjectFile(ctx, args.ID, args.Path); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionObjectFile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionObjectFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionObjectFile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorPartitionObjectFile3 struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorPartitionObjectFile3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServicePartitionObjectFile3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionObjectFile3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServicePartitionObjectFile3Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionObjectFile3(ctx, args.ID, args.Path, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionObjectFile3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionObjectFile3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionObjectFile3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorPartitionTextFile struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorPartitionTextFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServicePartitionTextFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionTextFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServicePartitionTextFileResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionTextFile(ctx, args.ID, args.Path); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionTextFile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionTextFile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionTextFile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorPartitionJsonFile3a struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorPartitionJsonFile3a) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServicePartitionJsonFile3aArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionJsonFile3a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServicePartitionJsonFile3aResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionJsonFile3a(ctx, args.ID, args.Path, args.ObjectMapping); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionJsonFile3a: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionJsonFile3a", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionJsonFile3a", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorPartitionJsonFile3b struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorPartitionJsonFile3b) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServicePartitionJsonFile3bArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionJsonFile3b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServicePartitionJsonFile3bResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.PartitionJsonFile3b(ctx, args.ID, args.Path, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partitionJsonFile3b: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partitionJsonFile3b", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partitionJsonFile3b", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorLoadLibrary struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorLoadLibrary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceLoadLibraryArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "loadLibrary", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceLoadLibraryResult{}
  if err2 = p.handler.LoadLibrary(ctx, args.ID, args.Lib); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadLibrary: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "loadLibrary", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "loadLibrary", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorExecute struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorExecute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceExecuteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceExecuteResult{}
  if err2 = p.handler.Execute(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "execute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorExecuteTo struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorExecuteTo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceExecuteToArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "executeTo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceExecuteToResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.ExecuteTo(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeTo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "executeTo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "executeTo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorVoidCall struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorVoidCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceVoidCallArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "voidCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceVoidCallResult{}
  if err2 = p.handler.VoidCall(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing voidCall: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "voidCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "voidCall", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorVoidCall3 struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorVoidCall3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceVoidCall3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "voidCall3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceVoidCall3Result{}
  if err2 = p.handler.VoidCall3(ctx, args.ID, args.Data, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing voidCall3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "voidCall3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "voidCall3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorCall struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceCallArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "call", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceCallResult{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Call(ctx, args.ID, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing call: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "call", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "call", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type iWorkerServiceProcessorCall3 struct {
  handler IWorkerService
}

func (p *iWorkerServiceProcessorCall3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IWorkerServiceCall3Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "call3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWorkerServiceCall3Result{}
  var retval *IDataFrameId
  if retval, err2 = p.handler.Call3(ctx, args.ID, args.Data, args.Src); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *IDriverException:
  result.Ex = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing call3: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "call3", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "call3", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ID
type IWorkerServiceStartArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
}

func NewIWorkerServiceStartArgs() *IWorkerServiceStartArgs {
  return &IWorkerServiceStartArgs{}
}

var IWorkerServiceStartArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceStartArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceStartArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IWorkerServiceStartArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceStartArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceStartArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceStartArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceStartArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceStartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceStartArgs(%+v)", *p)
}

type IWorkerServiceStartResult struct {
}

func NewIWorkerServiceStartResult() *IWorkerServiceStartResult {
  return &IWorkerServiceStartResult{}
}

func (p *IWorkerServiceStartResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceStartResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceStartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceStartResult(%+v)", *p)
}

// Attributes:
//  - ID
type IWorkerServiceDestroyArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
}

func NewIWorkerServiceDestroyArgs() *IWorkerServiceDestroyArgs {
  return &IWorkerServiceDestroyArgs{}
}

var IWorkerServiceDestroyArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceDestroyArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceDestroyArgs_ID_DEFAULT
  }
return p.ID
}
func (p *IWorkerServiceDestroyArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceDestroyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceDestroyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceDestroyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "destroy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceDestroyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceDestroyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceDestroyArgs(%+v)", *p)
}

type IWorkerServiceDestroyResult struct {
}

func NewIWorkerServiceDestroyResult() *IWorkerServiceDestroyResult {
  return &IWorkerServiceDestroyResult{}
}

func (p *IWorkerServiceDestroyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceDestroyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "destroy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceDestroyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceDestroyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type IWorkerServiceNewInstanceArgs_ struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Type string `thrift:"type,2" db:"type" json:"type"`
}

func NewIWorkerServiceNewInstanceArgs_() *IWorkerServiceNewInstanceArgs_ {
  return &IWorkerServiceNewInstanceArgs_{}
}


func (p *IWorkerServiceNewInstanceArgs_) GetID() int64 {
  return p.ID
}

func (p *IWorkerServiceNewInstanceArgs_) GetType() string {
  return p.Type
}
func (p *IWorkerServiceNewInstanceArgs_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstanceArgs_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *IWorkerServiceNewInstanceArgs_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *IWorkerServiceNewInstanceArgs_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstanceArgs_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstanceArgs_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstanceArgs_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstanceArgs_(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceNewInstanceResult_ struct {
  Success *IWorkerId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceNewInstanceResult_() *IWorkerServiceNewInstanceResult_ {
  return &IWorkerServiceNewInstanceResult_{}
}

var IWorkerServiceNewInstanceResult__Success_DEFAULT *IWorkerId
func (p *IWorkerServiceNewInstanceResult_) GetSuccess() *IWorkerId {
  if !p.IsSetSuccess() {
    return IWorkerServiceNewInstanceResult__Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceNewInstanceResult__Ex_DEFAULT *IDriverException
func (p *IWorkerServiceNewInstanceResult_) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceNewInstanceResult__Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceNewInstanceResult_) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceNewInstanceResult_) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceNewInstanceResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstanceResult_)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IWorkerId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstanceResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstanceResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstanceResult_) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstanceResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstanceResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstanceResult_(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Type
type IWorkerServiceNewInstance3Args_ struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Type string `thrift:"type,3" db:"type" json:"type"`
}

func NewIWorkerServiceNewInstance3Args_() *IWorkerServiceNewInstance3Args_ {
  return &IWorkerServiceNewInstance3Args_{}
}


func (p *IWorkerServiceNewInstance3Args_) GetID() int64 {
  return p.ID
}

func (p *IWorkerServiceNewInstance3Args_) GetName() string {
  return p.Name
}

func (p *IWorkerServiceNewInstance3Args_) GetType() string {
  return p.Type
}
func (p *IWorkerServiceNewInstance3Args_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance3Args_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *IWorkerServiceNewInstance3Args_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IWorkerServiceNewInstance3Args_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *IWorkerServiceNewInstance3Args_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstance3Args_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance3Args_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance3Args_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance3Args_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstance3Args_(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceNewInstance3Result_ struct {
  Success *IWorkerId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceNewInstance3Result_() *IWorkerServiceNewInstance3Result_ {
  return &IWorkerServiceNewInstance3Result_{}
}

var IWorkerServiceNewInstance3Result__Success_DEFAULT *IWorkerId
func (p *IWorkerServiceNewInstance3Result_) GetSuccess() *IWorkerId {
  if !p.IsSetSuccess() {
    return IWorkerServiceNewInstance3Result__Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceNewInstance3Result__Ex_DEFAULT *IDriverException
func (p *IWorkerServiceNewInstance3Result_) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceNewInstance3Result__Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceNewInstance3Result_) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceNewInstance3Result_) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceNewInstance3Result_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance3Result_)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IWorkerId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance3Result_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance3Result_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstance3Result_) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstance3Result_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstance3Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstance3Result_(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - Cores
//  - Instances
type IWorkerServiceNewInstance4Args_ struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  Cores int32 `thrift:"cores,3" db:"cores" json:"cores"`
  Instances int32 `thrift:"instances,4" db:"instances" json:"instances"`
}

func NewIWorkerServiceNewInstance4Args_() *IWorkerServiceNewInstance4Args_ {
  return &IWorkerServiceNewInstance4Args_{}
}


func (p *IWorkerServiceNewInstance4Args_) GetID() int64 {
  return p.ID
}

func (p *IWorkerServiceNewInstance4Args_) GetType() string {
  return p.Type
}

func (p *IWorkerServiceNewInstance4Args_) GetCores() int32 {
  return p.Cores
}

func (p *IWorkerServiceNewInstance4Args_) GetInstances() int32 {
  return p.Instances
}
func (p *IWorkerServiceNewInstance4Args_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance4Args_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *IWorkerServiceNewInstance4Args_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *IWorkerServiceNewInstance4Args_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cores = v
}
  return nil
}

func (p *IWorkerServiceNewInstance4Args_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Instances = v
}
  return nil
}

func (p *IWorkerServiceNewInstance4Args_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstance4Args_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance4Args_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance4Args_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cores", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cores: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Cores)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cores (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cores: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance4Args_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "instances", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:instances: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Instances)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instances (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:instances: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance4Args_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstance4Args_(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceNewInstance4Result_ struct {
  Success *IWorkerId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceNewInstance4Result_() *IWorkerServiceNewInstance4Result_ {
  return &IWorkerServiceNewInstance4Result_{}
}

var IWorkerServiceNewInstance4Result__Success_DEFAULT *IWorkerId
func (p *IWorkerServiceNewInstance4Result_) GetSuccess() *IWorkerId {
  if !p.IsSetSuccess() {
    return IWorkerServiceNewInstance4Result__Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceNewInstance4Result__Ex_DEFAULT *IDriverException
func (p *IWorkerServiceNewInstance4Result_) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceNewInstance4Result__Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceNewInstance4Result_) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceNewInstance4Result_) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceNewInstance4Result_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance4Result_)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IWorkerId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance4Result_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance4Result_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstance4Result_) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstance4Result_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstance4Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstance4Result_(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Type
//  - Cores
//  - Instances
type IWorkerServiceNewInstance5Args_ struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Type string `thrift:"type,3" db:"type" json:"type"`
  Cores int32 `thrift:"cores,4" db:"cores" json:"cores"`
  Instances int32 `thrift:"instances,5" db:"instances" json:"instances"`
}

func NewIWorkerServiceNewInstance5Args_() *IWorkerServiceNewInstance5Args_ {
  return &IWorkerServiceNewInstance5Args_{}
}


func (p *IWorkerServiceNewInstance5Args_) GetID() int64 {
  return p.ID
}

func (p *IWorkerServiceNewInstance5Args_) GetName() string {
  return p.Name
}

func (p *IWorkerServiceNewInstance5Args_) GetType() string {
  return p.Type
}

func (p *IWorkerServiceNewInstance5Args_) GetCores() int32 {
  return p.Cores
}

func (p *IWorkerServiceNewInstance5Args_) GetInstances() int32 {
  return p.Instances
}
func (p *IWorkerServiceNewInstance5Args_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance5Args_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *IWorkerServiceNewInstance5Args_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IWorkerServiceNewInstance5Args_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *IWorkerServiceNewInstance5Args_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Cores = v
}
  return nil
}

func (p *IWorkerServiceNewInstance5Args_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Instances = v
}
  return nil
}

func (p *IWorkerServiceNewInstance5Args_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance5_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstance5Args_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance5Args_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance5Args_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance5Args_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cores", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cores: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Cores)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cores (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cores: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance5Args_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "instances", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:instances: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Instances)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instances (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:instances: ", p), err) }
  return err
}

func (p *IWorkerServiceNewInstance5Args_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstance5Args_(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceNewInstance5Result_ struct {
  Success *IWorkerId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceNewInstance5Result_() *IWorkerServiceNewInstance5Result_ {
  return &IWorkerServiceNewInstance5Result_{}
}

var IWorkerServiceNewInstance5Result__Success_DEFAULT *IWorkerId
func (p *IWorkerServiceNewInstance5Result_) GetSuccess() *IWorkerId {
  if !p.IsSetSuccess() {
    return IWorkerServiceNewInstance5Result__Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceNewInstance5Result__Ex_DEFAULT *IDriverException
func (p *IWorkerServiceNewInstance5Result_) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceNewInstance5Result__Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceNewInstance5Result_) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceNewInstance5Result_) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceNewInstance5Result_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance5Result_)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IWorkerId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance5Result_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceNewInstance5Result_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "newInstance5_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceNewInstance5Result_) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstance5Result_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceNewInstance5Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceNewInstance5Result_(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
type IWorkerServiceSetNameArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewIWorkerServiceSetNameArgs() *IWorkerServiceSetNameArgs {
  return &IWorkerServiceSetNameArgs{}
}

var IWorkerServiceSetNameArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceSetNameArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceSetNameArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServiceSetNameArgs) GetName() string {
  return p.Name
}
func (p *IWorkerServiceSetNameArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceSetNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceSetNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceSetNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IWorkerServiceSetNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceSetNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceSetNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IWorkerServiceSetNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceSetNameArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IWorkerServiceSetNameResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceSetNameResult() *IWorkerServiceSetNameResult {
  return &IWorkerServiceSetNameResult{}
}

var IWorkerServiceSetNameResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceSetNameResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceSetNameResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceSetNameResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceSetNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceSetNameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceSetNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceSetNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceSetNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceSetNameResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - DataId
//  - Partitions
type IWorkerServiceParallelizeArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  DataId int64 `thrift:"dataId,2" db:"dataId" json:"dataId"`
  Partitions int64 `thrift:"partitions,3" db:"partitions" json:"partitions"`
}

func NewIWorkerServiceParallelizeArgs() *IWorkerServiceParallelizeArgs {
  return &IWorkerServiceParallelizeArgs{}
}

var IWorkerServiceParallelizeArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceParallelizeArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceParallelizeArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServiceParallelizeArgs) GetDataId() int64 {
  return p.DataId
}

func (p *IWorkerServiceParallelizeArgs) GetPartitions() int64 {
  return p.Partitions
}
func (p *IWorkerServiceParallelizeArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceParallelizeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceParallelizeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceParallelizeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataId = v
}
  return nil
}

func (p *IWorkerServiceParallelizeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Partitions = v
}
  return nil
}

func (p *IWorkerServiceParallelizeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "parallelize_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceParallelizeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceParallelizeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dataId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DataId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataId: ", p), err) }
  return err
}

func (p *IWorkerServiceParallelizeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Partitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitions: ", p), err) }
  return err
}

func (p *IWorkerServiceParallelizeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceParallelizeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceParallelizeResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceParallelizeResult() *IWorkerServiceParallelizeResult {
  return &IWorkerServiceParallelizeResult{}
}

var IWorkerServiceParallelizeResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceParallelizeResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceParallelizeResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceParallelizeResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceParallelizeResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceParallelizeResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceParallelizeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceParallelizeResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceParallelizeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceParallelizeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceParallelizeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceParallelizeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "parallelize_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceParallelizeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceParallelizeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceParallelizeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceParallelizeResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - DataId
//  - Partitions
//  - Src
type IWorkerServiceParallelize4Args struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  DataId int64 `thrift:"dataId,2" db:"dataId" json:"dataId"`
  Partitions int64 `thrift:"partitions,3" db:"partitions" json:"partitions"`
  Src *rpc.ISource `thrift:"src,4" db:"src" json:"src"`
}

func NewIWorkerServiceParallelize4Args() *IWorkerServiceParallelize4Args {
  return &IWorkerServiceParallelize4Args{}
}

var IWorkerServiceParallelize4Args_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceParallelize4Args) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceParallelize4Args_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServiceParallelize4Args) GetDataId() int64 {
  return p.DataId
}

func (p *IWorkerServiceParallelize4Args) GetPartitions() int64 {
  return p.Partitions
}
var IWorkerServiceParallelize4Args_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceParallelize4Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceParallelize4Args_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceParallelize4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceParallelize4Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceParallelize4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceParallelize4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceParallelize4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataId = v
}
  return nil
}

func (p *IWorkerServiceParallelize4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Partitions = v
}
  return nil
}

func (p *IWorkerServiceParallelize4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceParallelize4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "parallelize4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceParallelize4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceParallelize4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dataId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DataId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataId: ", p), err) }
  return err
}

func (p *IWorkerServiceParallelize4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Partitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitions: ", p), err) }
  return err
}

func (p *IWorkerServiceParallelize4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:src: ", p), err) }
  return err
}

func (p *IWorkerServiceParallelize4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceParallelize4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceParallelize4Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceParallelize4Result() *IWorkerServiceParallelize4Result {
  return &IWorkerServiceParallelize4Result{}
}

var IWorkerServiceParallelize4Result_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceParallelize4Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceParallelize4Result_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceParallelize4Result_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceParallelize4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceParallelize4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceParallelize4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceParallelize4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceParallelize4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceParallelize4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceParallelize4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceParallelize4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "parallelize4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceParallelize4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceParallelize4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceParallelize4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceParallelize4Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Data
type IWorkerServiceImportDataFrameArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Data *IDataFrameId `thrift:"data,2" db:"data" json:"data"`
}

func NewIWorkerServiceImportDataFrameArgs() *IWorkerServiceImportDataFrameArgs {
  return &IWorkerServiceImportDataFrameArgs{}
}

var IWorkerServiceImportDataFrameArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceImportDataFrameArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceImportDataFrameArgs_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceImportDataFrameArgs_Data_DEFAULT *IDataFrameId
func (p *IWorkerServiceImportDataFrameArgs) GetData() *IDataFrameId {
  if !p.IsSetData() {
    return IWorkerServiceImportDataFrameArgs_Data_DEFAULT
  }
return p.Data
}
func (p *IWorkerServiceImportDataFrameArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceImportDataFrameArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *IWorkerServiceImportDataFrameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &IDataFrameId{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "importDataFrame_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceImportDataFrameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceImportDataFrameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IWorkerServiceImportDataFrameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceImportDataFrameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceImportDataFrameResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceImportDataFrameResult() *IWorkerServiceImportDataFrameResult {
  return &IWorkerServiceImportDataFrameResult{}
}

var IWorkerServiceImportDataFrameResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceImportDataFrameResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceImportDataFrameResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceImportDataFrameResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceImportDataFrameResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceImportDataFrameResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceImportDataFrameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceImportDataFrameResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceImportDataFrameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "importDataFrame_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceImportDataFrameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceImportDataFrameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceImportDataFrameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceImportDataFrameResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Data
//  - Src
type IWorkerServiceImportDataFrame3Args struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Data *IDataFrameId `thrift:"data,2" db:"data" json:"data"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIWorkerServiceImportDataFrame3Args() *IWorkerServiceImportDataFrame3Args {
  return &IWorkerServiceImportDataFrame3Args{}
}

var IWorkerServiceImportDataFrame3Args_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceImportDataFrame3Args) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceImportDataFrame3Args_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceImportDataFrame3Args_Data_DEFAULT *IDataFrameId
func (p *IWorkerServiceImportDataFrame3Args) GetData() *IDataFrameId {
  if !p.IsSetData() {
    return IWorkerServiceImportDataFrame3Args_Data_DEFAULT
  }
return p.Data
}
var IWorkerServiceImportDataFrame3Args_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceImportDataFrame3Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceImportDataFrame3Args_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceImportDataFrame3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceImportDataFrame3Args) IsSetData() bool {
  return p.Data != nil
}

func (p *IWorkerServiceImportDataFrame3Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceImportDataFrame3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &IDataFrameId{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "importDataFrame3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceImportDataFrame3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IWorkerServiceImportDataFrame3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IWorkerServiceImportDataFrame3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceImportDataFrame3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceImportDataFrame3Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceImportDataFrame3Result() *IWorkerServiceImportDataFrame3Result {
  return &IWorkerServiceImportDataFrame3Result{}
}

var IWorkerServiceImportDataFrame3Result_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceImportDataFrame3Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceImportDataFrame3Result_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceImportDataFrame3Result_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceImportDataFrame3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceImportDataFrame3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceImportDataFrame3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceImportDataFrame3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceImportDataFrame3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "importDataFrame3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceImportDataFrame3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceImportDataFrame3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceImportDataFrame3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceImportDataFrame3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - Delim
type IWorkerServicePlainFileArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  Delim string `thrift:"delim,3" db:"delim" json:"delim"`
}

func NewIWorkerServicePlainFileArgs() *IWorkerServicePlainFileArgs {
  return &IWorkerServicePlainFileArgs{}
}

var IWorkerServicePlainFileArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServicePlainFileArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServicePlainFileArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServicePlainFileArgs) GetPath() string {
  return p.Path
}

func (p *IWorkerServicePlainFileArgs) GetDelim() string {
  return p.Delim
}
func (p *IWorkerServicePlainFileArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServicePlainFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePlainFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServicePlainFileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServicePlainFileArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Delim = v
}
  return nil
}

func (p *IWorkerServicePlainFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "plainFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePlainFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServicePlainFileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServicePlainFileArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "delim", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:delim: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Delim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delim (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:delim: ", p), err) }
  return err
}

func (p *IWorkerServicePlainFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePlainFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServicePlainFileResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServicePlainFileResult() *IWorkerServicePlainFileResult {
  return &IWorkerServicePlainFileResult{}
}

var IWorkerServicePlainFileResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServicePlainFileResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServicePlainFileResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServicePlainFileResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServicePlainFileResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServicePlainFileResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServicePlainFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServicePlainFileResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServicePlainFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePlainFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServicePlainFileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServicePlainFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "plainFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePlainFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePlainFileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePlainFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePlainFileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - MinPartitions
//  - Delim
type IWorkerServicePlainFile4Args struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  MinPartitions int64 `thrift:"minPartitions,3" db:"minPartitions" json:"minPartitions"`
  Delim string `thrift:"delim,4" db:"delim" json:"delim"`
}

func NewIWorkerServicePlainFile4Args() *IWorkerServicePlainFile4Args {
  return &IWorkerServicePlainFile4Args{}
}

var IWorkerServicePlainFile4Args_ID_DEFAULT *IWorkerId
func (p *IWorkerServicePlainFile4Args) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServicePlainFile4Args_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServicePlainFile4Args) GetPath() string {
  return p.Path
}

func (p *IWorkerServicePlainFile4Args) GetMinPartitions() int64 {
  return p.MinPartitions
}

func (p *IWorkerServicePlainFile4Args) GetDelim() string {
  return p.Delim
}
func (p *IWorkerServicePlainFile4Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServicePlainFile4Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePlainFile4Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServicePlainFile4Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServicePlainFile4Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MinPartitions = v
}
  return nil
}

func (p *IWorkerServicePlainFile4Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Delim = v
}
  return nil
}

func (p *IWorkerServicePlainFile4Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "plainFile4_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePlainFile4Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServicePlainFile4Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServicePlainFile4Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "minPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:minPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MinPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:minPartitions: ", p), err) }
  return err
}

func (p *IWorkerServicePlainFile4Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "delim", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delim: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Delim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delim (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delim: ", p), err) }
  return err
}

func (p *IWorkerServicePlainFile4Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePlainFile4Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServicePlainFile4Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServicePlainFile4Result() *IWorkerServicePlainFile4Result {
  return &IWorkerServicePlainFile4Result{}
}

var IWorkerServicePlainFile4Result_Success_DEFAULT *IDataFrameId
func (p *IWorkerServicePlainFile4Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServicePlainFile4Result_Success_DEFAULT
  }
return p.Success
}
var IWorkerServicePlainFile4Result_Ex_DEFAULT *IDriverException
func (p *IWorkerServicePlainFile4Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServicePlainFile4Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServicePlainFile4Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServicePlainFile4Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServicePlainFile4Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePlainFile4Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServicePlainFile4Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServicePlainFile4Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "plainFile4_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePlainFile4Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePlainFile4Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePlainFile4Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePlainFile4Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
type IWorkerServiceTextFileArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewIWorkerServiceTextFileArgs() *IWorkerServiceTextFileArgs {
  return &IWorkerServiceTextFileArgs{}
}

var IWorkerServiceTextFileArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceTextFileArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceTextFileArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServiceTextFileArgs) GetPath() string {
  return p.Path
}
func (p *IWorkerServiceTextFileArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceTextFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceTextFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceTextFileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServiceTextFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "textFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceTextFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceTextFileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServiceTextFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceTextFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceTextFileResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceTextFileResult() *IWorkerServiceTextFileResult {
  return &IWorkerServiceTextFileResult{}
}

var IWorkerServiceTextFileResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceTextFileResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceTextFileResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceTextFileResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceTextFileResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceTextFileResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceTextFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceTextFileResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceTextFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceTextFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceTextFileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceTextFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "textFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceTextFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceTextFileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceTextFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceTextFileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - MinPartitions
type IWorkerServiceTextFile3Args struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  MinPartitions int64 `thrift:"minPartitions,3" db:"minPartitions" json:"minPartitions"`
}

func NewIWorkerServiceTextFile3Args() *IWorkerServiceTextFile3Args {
  return &IWorkerServiceTextFile3Args{}
}

var IWorkerServiceTextFile3Args_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceTextFile3Args) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceTextFile3Args_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServiceTextFile3Args) GetPath() string {
  return p.Path
}

func (p *IWorkerServiceTextFile3Args) GetMinPartitions() int64 {
  return p.MinPartitions
}
func (p *IWorkerServiceTextFile3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceTextFile3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceTextFile3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceTextFile3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServiceTextFile3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MinPartitions = v
}
  return nil
}

func (p *IWorkerServiceTextFile3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "textFile3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceTextFile3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceTextFile3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServiceTextFile3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "minPartitions", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:minPartitions: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MinPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minPartitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:minPartitions: ", p), err) }
  return err
}

func (p *IWorkerServiceTextFile3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceTextFile3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceTextFile3Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceTextFile3Result() *IWorkerServiceTextFile3Result {
  return &IWorkerServiceTextFile3Result{}
}

var IWorkerServiceTextFile3Result_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceTextFile3Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceTextFile3Result_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceTextFile3Result_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceTextFile3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceTextFile3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceTextFile3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceTextFile3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceTextFile3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceTextFile3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceTextFile3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceTextFile3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "textFile3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceTextFile3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceTextFile3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceTextFile3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceTextFile3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
type IWorkerServicePartitionObjectFileArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewIWorkerServicePartitionObjectFileArgs() *IWorkerServicePartitionObjectFileArgs {
  return &IWorkerServicePartitionObjectFileArgs{}
}

var IWorkerServicePartitionObjectFileArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServicePartitionObjectFileArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServicePartitionObjectFileArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServicePartitionObjectFileArgs) GetPath() string {
  return p.Path
}
func (p *IWorkerServicePartitionObjectFileArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServicePartitionObjectFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServicePartitionObjectFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionObjectFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionObjectFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionObjectFileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionObjectFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionObjectFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServicePartitionObjectFileResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServicePartitionObjectFileResult() *IWorkerServicePartitionObjectFileResult {
  return &IWorkerServicePartitionObjectFileResult{}
}

var IWorkerServicePartitionObjectFileResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServicePartitionObjectFileResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServicePartitionObjectFileResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServicePartitionObjectFileResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServicePartitionObjectFileResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServicePartitionObjectFileResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServicePartitionObjectFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServicePartitionObjectFileResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServicePartitionObjectFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionObjectFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionObjectFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionObjectFileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionObjectFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionObjectFileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - Src
type IWorkerServicePartitionObjectFile3Args struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIWorkerServicePartitionObjectFile3Args() *IWorkerServicePartitionObjectFile3Args {
  return &IWorkerServicePartitionObjectFile3Args{}
}

var IWorkerServicePartitionObjectFile3Args_ID_DEFAULT *IWorkerId
func (p *IWorkerServicePartitionObjectFile3Args) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServicePartitionObjectFile3Args_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServicePartitionObjectFile3Args) GetPath() string {
  return p.Path
}
var IWorkerServicePartitionObjectFile3Args_Src_DEFAULT *rpc.ISource
func (p *IWorkerServicePartitionObjectFile3Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServicePartitionObjectFile3Args_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServicePartitionObjectFile3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServicePartitionObjectFile3Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServicePartitionObjectFile3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionObjectFile3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionObjectFile3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionObjectFile3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionObjectFile3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionObjectFile3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServicePartitionObjectFile3Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServicePartitionObjectFile3Result() *IWorkerServicePartitionObjectFile3Result {
  return &IWorkerServicePartitionObjectFile3Result{}
}

var IWorkerServicePartitionObjectFile3Result_Success_DEFAULT *IDataFrameId
func (p *IWorkerServicePartitionObjectFile3Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServicePartitionObjectFile3Result_Success_DEFAULT
  }
return p.Success
}
var IWorkerServicePartitionObjectFile3Result_Ex_DEFAULT *IDriverException
func (p *IWorkerServicePartitionObjectFile3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServicePartitionObjectFile3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServicePartitionObjectFile3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServicePartitionObjectFile3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServicePartitionObjectFile3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionObjectFile3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionObjectFile3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionObjectFile3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionObjectFile3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionObjectFile3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
type IWorkerServicePartitionTextFileArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewIWorkerServicePartitionTextFileArgs() *IWorkerServicePartitionTextFileArgs {
  return &IWorkerServicePartitionTextFileArgs{}
}

var IWorkerServicePartitionTextFileArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServicePartitionTextFileArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServicePartitionTextFileArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServicePartitionTextFileArgs) GetPath() string {
  return p.Path
}
func (p *IWorkerServicePartitionTextFileArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServicePartitionTextFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionTextFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServicePartitionTextFileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServicePartitionTextFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionTextFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionTextFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionTextFileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionTextFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionTextFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServicePartitionTextFileResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServicePartitionTextFileResult() *IWorkerServicePartitionTextFileResult {
  return &IWorkerServicePartitionTextFileResult{}
}

var IWorkerServicePartitionTextFileResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServicePartitionTextFileResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServicePartitionTextFileResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServicePartitionTextFileResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServicePartitionTextFileResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServicePartitionTextFileResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServicePartitionTextFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServicePartitionTextFileResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServicePartitionTextFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionTextFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServicePartitionTextFileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServicePartitionTextFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionTextFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionTextFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionTextFileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionTextFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionTextFileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - ObjectMapping
type IWorkerServicePartitionJsonFile3aArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  ObjectMapping bool `thrift:"objectMapping,3" db:"objectMapping" json:"objectMapping"`
}

func NewIWorkerServicePartitionJsonFile3aArgs() *IWorkerServicePartitionJsonFile3aArgs {
  return &IWorkerServicePartitionJsonFile3aArgs{}
}

var IWorkerServicePartitionJsonFile3aArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServicePartitionJsonFile3aArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServicePartitionJsonFile3aArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServicePartitionJsonFile3aArgs) GetPath() string {
  return p.Path
}

func (p *IWorkerServicePartitionJsonFile3aArgs) GetObjectMapping() bool {
  return p.ObjectMapping
}
func (p *IWorkerServicePartitionJsonFile3aArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServicePartitionJsonFile3aArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ObjectMapping = v
}
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionJsonFile3a_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionJsonFile3aArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionJsonFile3aArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "objectMapping", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:objectMapping: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ObjectMapping)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectMapping (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:objectMapping: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionJsonFile3aArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionJsonFile3aArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServicePartitionJsonFile3aResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServicePartitionJsonFile3aResult() *IWorkerServicePartitionJsonFile3aResult {
  return &IWorkerServicePartitionJsonFile3aResult{}
}

var IWorkerServicePartitionJsonFile3aResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServicePartitionJsonFile3aResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServicePartitionJsonFile3aResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServicePartitionJsonFile3aResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServicePartitionJsonFile3aResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServicePartitionJsonFile3aResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServicePartitionJsonFile3aResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServicePartitionJsonFile3aResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServicePartitionJsonFile3aResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionJsonFile3a_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3aResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionJsonFile3aResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionJsonFile3aResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionJsonFile3aResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - Src
type IWorkerServicePartitionJsonFile3bArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIWorkerServicePartitionJsonFile3bArgs() *IWorkerServicePartitionJsonFile3bArgs {
  return &IWorkerServicePartitionJsonFile3bArgs{}
}

var IWorkerServicePartitionJsonFile3bArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServicePartitionJsonFile3bArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServicePartitionJsonFile3bArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServicePartitionJsonFile3bArgs) GetPath() string {
  return p.Path
}
var IWorkerServicePartitionJsonFile3bArgs_Src_DEFAULT *rpc.ISource
func (p *IWorkerServicePartitionJsonFile3bArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServicePartitionJsonFile3bArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServicePartitionJsonFile3bArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServicePartitionJsonFile3bArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServicePartitionJsonFile3bArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionJsonFile3b_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionJsonFile3bArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionJsonFile3bArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IWorkerServicePartitionJsonFile3bArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionJsonFile3bArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServicePartitionJsonFile3bResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServicePartitionJsonFile3bResult() *IWorkerServicePartitionJsonFile3bResult {
  return &IWorkerServicePartitionJsonFile3bResult{}
}

var IWorkerServicePartitionJsonFile3bResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServicePartitionJsonFile3bResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServicePartitionJsonFile3bResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServicePartitionJsonFile3bResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServicePartitionJsonFile3bResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServicePartitionJsonFile3bResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServicePartitionJsonFile3bResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServicePartitionJsonFile3bResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServicePartitionJsonFile3bResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partitionJsonFile3b_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServicePartitionJsonFile3bResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionJsonFile3bResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServicePartitionJsonFile3bResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServicePartitionJsonFile3bResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Lib
type IWorkerServiceLoadLibraryArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Lib string `thrift:"lib,2" db:"lib" json:"lib"`
}

func NewIWorkerServiceLoadLibraryArgs() *IWorkerServiceLoadLibraryArgs {
  return &IWorkerServiceLoadLibraryArgs{}
}

var IWorkerServiceLoadLibraryArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceLoadLibraryArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceLoadLibraryArgs_ID_DEFAULT
  }
return p.ID
}

func (p *IWorkerServiceLoadLibraryArgs) GetLib() string {
  return p.Lib
}
func (p *IWorkerServiceLoadLibraryArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceLoadLibraryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceLoadLibraryArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceLoadLibraryArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Lib = v
}
  return nil
}

func (p *IWorkerServiceLoadLibraryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "loadLibrary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceLoadLibraryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceLoadLibraryArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lib", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lib: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Lib)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lib (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lib: ", p), err) }
  return err
}

func (p *IWorkerServiceLoadLibraryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceLoadLibraryArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IWorkerServiceLoadLibraryResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceLoadLibraryResult() *IWorkerServiceLoadLibraryResult {
  return &IWorkerServiceLoadLibraryResult{}
}

var IWorkerServiceLoadLibraryResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceLoadLibraryResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceLoadLibraryResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceLoadLibraryResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceLoadLibraryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceLoadLibraryResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceLoadLibraryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "loadLibrary_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceLoadLibraryResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceLoadLibraryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceLoadLibraryResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IWorkerServiceExecuteArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIWorkerServiceExecuteArgs() *IWorkerServiceExecuteArgs {
  return &IWorkerServiceExecuteArgs{}
}

var IWorkerServiceExecuteArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceExecuteArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceExecuteArgs_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceExecuteArgs_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceExecuteArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceExecuteArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceExecuteArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceExecuteArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceExecuteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceExecuteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceExecuteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IWorkerServiceExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IWorkerServiceExecuteResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceExecuteResult() *IWorkerServiceExecuteResult {
  return &IWorkerServiceExecuteResult{}
}

var IWorkerServiceExecuteResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceExecuteResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceExecuteResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceExecuteResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceExecuteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceExecuteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceExecuteResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IWorkerServiceExecuteToArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIWorkerServiceExecuteToArgs() *IWorkerServiceExecuteToArgs {
  return &IWorkerServiceExecuteToArgs{}
}

var IWorkerServiceExecuteToArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceExecuteToArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceExecuteToArgs_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceExecuteToArgs_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceExecuteToArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceExecuteToArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceExecuteToArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceExecuteToArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceExecuteToArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteToArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteToArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteToArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeTo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceExecuteToArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceExecuteToArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IWorkerServiceExecuteToArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceExecuteToArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceExecuteToResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceExecuteToResult() *IWorkerServiceExecuteToResult {
  return &IWorkerServiceExecuteToResult{}
}

var IWorkerServiceExecuteToResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceExecuteToResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceExecuteToResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceExecuteToResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceExecuteToResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceExecuteToResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceExecuteToResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceExecuteToResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceExecuteToResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteToResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteToResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceExecuteToResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeTo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceExecuteToResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceExecuteToResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceExecuteToResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceExecuteToResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IWorkerServiceVoidCallArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIWorkerServiceVoidCallArgs() *IWorkerServiceVoidCallArgs {
  return &IWorkerServiceVoidCallArgs{}
}

var IWorkerServiceVoidCallArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceVoidCallArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceVoidCallArgs_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceVoidCallArgs_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceVoidCallArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceVoidCallArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceVoidCallArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceVoidCallArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceVoidCallArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCallArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCallArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCallArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "voidCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceVoidCallArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceVoidCallArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IWorkerServiceVoidCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceVoidCallArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type IWorkerServiceVoidCallResult struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceVoidCallResult() *IWorkerServiceVoidCallResult {
  return &IWorkerServiceVoidCallResult{}
}

var IWorkerServiceVoidCallResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceVoidCallResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceVoidCallResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceVoidCallResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceVoidCallResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCallResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCallResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "voidCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceVoidCallResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceVoidCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceVoidCallResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Data
//  - Src
type IWorkerServiceVoidCall3Args struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Data *IDataFrameId `thrift:"data,2" db:"data" json:"data"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIWorkerServiceVoidCall3Args() *IWorkerServiceVoidCall3Args {
  return &IWorkerServiceVoidCall3Args{}
}

var IWorkerServiceVoidCall3Args_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceVoidCall3Args) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceVoidCall3Args_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceVoidCall3Args_Data_DEFAULT *IDataFrameId
func (p *IWorkerServiceVoidCall3Args) GetData() *IDataFrameId {
  if !p.IsSetData() {
    return IWorkerServiceVoidCall3Args_Data_DEFAULT
  }
return p.Data
}
var IWorkerServiceVoidCall3Args_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceVoidCall3Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceVoidCall3Args_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceVoidCall3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceVoidCall3Args) IsSetData() bool {
  return p.Data != nil
}

func (p *IWorkerServiceVoidCall3Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceVoidCall3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCall3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCall3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &IDataFrameId{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCall3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCall3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "voidCall3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceVoidCall3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceVoidCall3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IWorkerServiceVoidCall3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IWorkerServiceVoidCall3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceVoidCall3Args(%+v)", *p)
}

// Attributes:
//  - Ex
type IWorkerServiceVoidCall3Result struct {
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceVoidCall3Result() *IWorkerServiceVoidCall3Result {
  return &IWorkerServiceVoidCall3Result{}
}

var IWorkerServiceVoidCall3Result_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceVoidCall3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceVoidCall3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceVoidCall3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceVoidCall3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCall3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceVoidCall3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "voidCall3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceVoidCall3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceVoidCall3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceVoidCall3Result(%+v)", *p)
}

// Attributes:
//  - ID
//  - Src
type IWorkerServiceCallArgs struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Src *rpc.ISource `thrift:"src,2" db:"src" json:"src"`
}

func NewIWorkerServiceCallArgs() *IWorkerServiceCallArgs {
  return &IWorkerServiceCallArgs{}
}

var IWorkerServiceCallArgs_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceCallArgs) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceCallArgs_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceCallArgs_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceCallArgs) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceCallArgs_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceCallArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceCallArgs) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceCallArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceCallArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceCallArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceCallArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "call_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceCallArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceCallArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:src: ", p), err) }
  return err
}

func (p *IWorkerServiceCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceCallResult struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceCallResult() *IWorkerServiceCallResult {
  return &IWorkerServiceCallResult{}
}

var IWorkerServiceCallResult_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceCallResult) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceCallResult_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceCallResult_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceCallResult) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceCallResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceCallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceCallResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceCallResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceCallResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceCallResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceCallResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "call_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceCallResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceCallResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceCallResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Data
//  - Src
type IWorkerServiceCall3Args struct {
  ID *IWorkerId `thrift:"id,1" db:"id" json:"id"`
  Data *IDataFrameId `thrift:"data,2" db:"data" json:"data"`
  Src *rpc.ISource `thrift:"src,3" db:"src" json:"src"`
}

func NewIWorkerServiceCall3Args() *IWorkerServiceCall3Args {
  return &IWorkerServiceCall3Args{}
}

var IWorkerServiceCall3Args_ID_DEFAULT *IWorkerId
func (p *IWorkerServiceCall3Args) GetID() *IWorkerId {
  if !p.IsSetID() {
    return IWorkerServiceCall3Args_ID_DEFAULT
  }
return p.ID
}
var IWorkerServiceCall3Args_Data_DEFAULT *IDataFrameId
func (p *IWorkerServiceCall3Args) GetData() *IDataFrameId {
  if !p.IsSetData() {
    return IWorkerServiceCall3Args_Data_DEFAULT
  }
return p.Data
}
var IWorkerServiceCall3Args_Src_DEFAULT *rpc.ISource
func (p *IWorkerServiceCall3Args) GetSrc() *rpc.ISource {
  if !p.IsSetSrc() {
    return IWorkerServiceCall3Args_Src_DEFAULT
  }
return p.Src
}
func (p *IWorkerServiceCall3Args) IsSetID() bool {
  return p.ID != nil
}

func (p *IWorkerServiceCall3Args) IsSetData() bool {
  return p.Data != nil
}

func (p *IWorkerServiceCall3Args) IsSetSrc() bool {
  return p.Src != nil
}

func (p *IWorkerServiceCall3Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceCall3Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &IWorkerId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IWorkerServiceCall3Args)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &IDataFrameId{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *IWorkerServiceCall3Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &rpc.ISource{
  Params: map[string][]byte{
  },
}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *IWorkerServiceCall3Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "call3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceCall3Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IWorkerServiceCall3Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IWorkerServiceCall3Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:src: ", p), err) }
  return err
}

func (p *IWorkerServiceCall3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceCall3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type IWorkerServiceCall3Result struct {
  Success *IDataFrameId `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *IDriverException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewIWorkerServiceCall3Result() *IWorkerServiceCall3Result {
  return &IWorkerServiceCall3Result{}
}

var IWorkerServiceCall3Result_Success_DEFAULT *IDataFrameId
func (p *IWorkerServiceCall3Result) GetSuccess() *IDataFrameId {
  if !p.IsSetSuccess() {
    return IWorkerServiceCall3Result_Success_DEFAULT
  }
return p.Success
}
var IWorkerServiceCall3Result_Ex_DEFAULT *IDriverException
func (p *IWorkerServiceCall3Result) GetEx() *IDriverException {
  if !p.IsSetEx() {
    return IWorkerServiceCall3Result_Ex_DEFAULT
  }
return p.Ex
}
func (p *IWorkerServiceCall3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWorkerServiceCall3Result) IsSetEx() bool {
  return p.Ex != nil
}

func (p *IWorkerServiceCall3Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWorkerServiceCall3Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IDataFrameId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWorkerServiceCall3Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ex = &IDriverException{}
  if err := p.Ex.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *IWorkerServiceCall3Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "call3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWorkerServiceCall3Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceCall3Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *IWorkerServiceCall3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWorkerServiceCall3Result(%+v)", *p)
}


