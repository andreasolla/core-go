// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/driver"
)

var _ = rpc.GoUnusedProtection__
var _ = driver.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void setName(IDataFrameId id, string name)")
  fmt.Fprintln(os.Stderr, "  void persist(IDataFrameId id, i8 level)")
  fmt.Fprintln(os.Stderr, "  void cache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void unpersist(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void uncache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId repartition(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId coalesce(IDataFrameId id, i64 numPartitions, bool shuffle)")
  fmt.Fprintln(os.Stderr, "  i64 partitions(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void saveAsObjectFile(IDataFrameId id, string path, i8 compression)")
  fmt.Fprintln(os.Stderr, "  void saveAsTextFile(IDataFrameId id, string path)")
  fmt.Fprintln(os.Stderr, "  void saveAsJsonFile(IDataFrameId id, string path, bool pretty)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId map_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId filter(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatmap(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId keyBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitions(IDataFrameId id, ISource src, bool preservesPartitioning)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitionsWithIndex(IDataFrameId id, ISource src, bool preservesPartitioning)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutorTo(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy2(IDataFrameId id, ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort2(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy3(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  i64 reduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeReduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 collect(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 aggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeAggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 fold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeFold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 take(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  void foreach_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachPartition(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  i64 top(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 top4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sample(IDataFrameId id, bool withReplacement, double fraction, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 takeSample(IDataFrameId id, bool withReplacement, i64 num, i32 seed, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 count(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  i64 max(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 max3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatMapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2a(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2b(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey3(IDataFrameId id, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey(IDataFrameId id, ISource src, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey4(IDataFrameId id, ISource src, i64 numPartitions, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey(IDataFrameId id, ISource zero, ISource seqOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4a(IDataFrameId id, ISource zero, ISource seqOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4b(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey5(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey(IDataFrameId id, ISource zero, ISource src, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey5(IDataFrameId id, ISource zero, ISource src, i64 numPartitions, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3a(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3b(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey4(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  i64 keys(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 values(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sampleByKey(IDataFrameId id, bool withReplacement, ISource fractions, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 countByKey(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 countByValue(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := driver.NewIDataFrameServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetName requires 2 args")
      flag.Usage()
    }
    arg212 := flag.Arg(1)
    mbTrans213 := thrift.NewTMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewTJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue0 := driver.NewIDataFrameId()
    err217 := argvalue0.Read(context.Background(), jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "persist":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Persist requires 2 args")
      flag.Usage()
    }
    arg219 := flag.Arg(1)
    mbTrans220 := thrift.NewTMemoryBufferLen(len(arg219))
    defer mbTrans220.Close()
    _, err221 := mbTrans220.WriteString(arg219)
    if err221 != nil {
      Usage()
      return
    }
    factory222 := thrift.NewTJSONProtocolFactory()
    jsProt223 := factory222.GetProtocol(mbTrans220)
    argvalue0 := driver.NewIDataFrameId()
    err224 := argvalue0.Read(context.Background(), jsProt223)
    if err224 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err225 := (strconv.Atoi(flag.Arg(2)))
    if err225 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    fmt.Print(client.Persist(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Cache requires 1 args")
      flag.Usage()
    }
    arg226 := flag.Arg(1)
    mbTrans227 := thrift.NewTMemoryBufferLen(len(arg226))
    defer mbTrans227.Close()
    _, err228 := mbTrans227.WriteString(arg226)
    if err228 != nil {
      Usage()
      return
    }
    factory229 := thrift.NewTJSONProtocolFactory()
    jsProt230 := factory229.GetProtocol(mbTrans227)
    argvalue0 := driver.NewIDataFrameId()
    err231 := argvalue0.Read(context.Background(), jsProt230)
    if err231 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Cache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unpersist":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unpersist requires 1 args")
      flag.Usage()
    }
    arg232 := flag.Arg(1)
    mbTrans233 := thrift.NewTMemoryBufferLen(len(arg232))
    defer mbTrans233.Close()
    _, err234 := mbTrans233.WriteString(arg232)
    if err234 != nil {
      Usage()
      return
    }
    factory235 := thrift.NewTJSONProtocolFactory()
    jsProt236 := factory235.GetProtocol(mbTrans233)
    argvalue0 := driver.NewIDataFrameId()
    err237 := argvalue0.Read(context.Background(), jsProt236)
    if err237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unpersist(context.Background(), value0))
    fmt.Print("\n")
    break
  case "uncache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Uncache requires 1 args")
      flag.Usage()
    }
    arg238 := flag.Arg(1)
    mbTrans239 := thrift.NewTMemoryBufferLen(len(arg238))
    defer mbTrans239.Close()
    _, err240 := mbTrans239.WriteString(arg238)
    if err240 != nil {
      Usage()
      return
    }
    factory241 := thrift.NewTJSONProtocolFactory()
    jsProt242 := factory241.GetProtocol(mbTrans239)
    argvalue0 := driver.NewIDataFrameId()
    err243 := argvalue0.Read(context.Background(), jsProt242)
    if err243 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Uncache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "repartition":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Repartition requires 2 args")
      flag.Usage()
    }
    arg244 := flag.Arg(1)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil {
      Usage()
      return
    }
    factory247 := thrift.NewTJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    argvalue0 := driver.NewIDataFrameId()
    err249 := argvalue0.Read(context.Background(), jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err250 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err250 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Repartition(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "coalesce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Coalesce requires 3 args")
      flag.Usage()
    }
    arg251 := flag.Arg(1)
    mbTrans252 := thrift.NewTMemoryBufferLen(len(arg251))
    defer mbTrans252.Close()
    _, err253 := mbTrans252.WriteString(arg251)
    if err253 != nil {
      Usage()
      return
    }
    factory254 := thrift.NewTJSONProtocolFactory()
    jsProt255 := factory254.GetProtocol(mbTrans252)
    argvalue0 := driver.NewIDataFrameId()
    err256 := argvalue0.Read(context.Background(), jsProt255)
    if err256 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err257 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err257 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.Coalesce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Partitions requires 1 args")
      flag.Usage()
    }
    arg259 := flag.Arg(1)
    mbTrans260 := thrift.NewTMemoryBufferLen(len(arg259))
    defer mbTrans260.Close()
    _, err261 := mbTrans260.WriteString(arg259)
    if err261 != nil {
      Usage()
      return
    }
    factory262 := thrift.NewTJSONProtocolFactory()
    jsProt263 := factory262.GetProtocol(mbTrans260)
    argvalue0 := driver.NewIDataFrameId()
    err264 := argvalue0.Read(context.Background(), jsProt263)
    if err264 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Partitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "saveAsObjectFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsObjectFile requires 3 args")
      flag.Usage()
    }
    arg265 := flag.Arg(1)
    mbTrans266 := thrift.NewTMemoryBufferLen(len(arg265))
    defer mbTrans266.Close()
    _, err267 := mbTrans266.WriteString(arg265)
    if err267 != nil {
      Usage()
      return
    }
    factory268 := thrift.NewTJSONProtocolFactory()
    jsProt269 := factory268.GetProtocol(mbTrans266)
    argvalue0 := driver.NewIDataFrameId()
    err270 := argvalue0.Read(context.Background(), jsProt269)
    if err270 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err272 := (strconv.Atoi(flag.Arg(3)))
    if err272 != nil {
      Usage()
      return
    }
    argvalue2 := int8(tmp2)
    value2 := argvalue2
    fmt.Print(client.SaveAsObjectFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "saveAsTextFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SaveAsTextFile requires 2 args")
      flag.Usage()
    }
    arg273 := flag.Arg(1)
    mbTrans274 := thrift.NewTMemoryBufferLen(len(arg273))
    defer mbTrans274.Close()
    _, err275 := mbTrans274.WriteString(arg273)
    if err275 != nil {
      Usage()
      return
    }
    factory276 := thrift.NewTJSONProtocolFactory()
    jsProt277 := factory276.GetProtocol(mbTrans274)
    argvalue0 := driver.NewIDataFrameId()
    err278 := argvalue0.Read(context.Background(), jsProt277)
    if err278 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SaveAsTextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "saveAsJsonFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsJsonFile requires 3 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := driver.NewIDataFrameId()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SaveAsJsonFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "map_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Map_ requires 2 args")
      flag.Usage()
    }
    arg288 := flag.Arg(1)
    mbTrans289 := thrift.NewTMemoryBufferLen(len(arg288))
    defer mbTrans289.Close()
    _, err290 := mbTrans289.WriteString(arg288)
    if err290 != nil {
      Usage()
      return
    }
    factory291 := thrift.NewTJSONProtocolFactory()
    jsProt292 := factory291.GetProtocol(mbTrans289)
    argvalue0 := driver.NewIDataFrameId()
    err293 := argvalue0.Read(context.Background(), jsProt292)
    if err293 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg294 := flag.Arg(2)
    mbTrans295 := thrift.NewTMemoryBufferLen(len(arg294))
    defer mbTrans295.Close()
    _, err296 := mbTrans295.WriteString(arg294)
    if err296 != nil {
      Usage()
      return
    }
    factory297 := thrift.NewTJSONProtocolFactory()
    jsProt298 := factory297.GetProtocol(mbTrans295)
    argvalue1 := rpc.NewISource()
    err299 := argvalue1.Read(context.Background(), jsProt298)
    if err299 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Map_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "filter":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Filter requires 2 args")
      flag.Usage()
    }
    arg300 := flag.Arg(1)
    mbTrans301 := thrift.NewTMemoryBufferLen(len(arg300))
    defer mbTrans301.Close()
    _, err302 := mbTrans301.WriteString(arg300)
    if err302 != nil {
      Usage()
      return
    }
    factory303 := thrift.NewTJSONProtocolFactory()
    jsProt304 := factory303.GetProtocol(mbTrans301)
    argvalue0 := driver.NewIDataFrameId()
    err305 := argvalue0.Read(context.Background(), jsProt304)
    if err305 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg306 := flag.Arg(2)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil {
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    argvalue1 := rpc.NewISource()
    err311 := argvalue1.Read(context.Background(), jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Filter(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "flatmap":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Flatmap requires 2 args")
      flag.Usage()
    }
    arg312 := flag.Arg(1)
    mbTrans313 := thrift.NewTMemoryBufferLen(len(arg312))
    defer mbTrans313.Close()
    _, err314 := mbTrans313.WriteString(arg312)
    if err314 != nil {
      Usage()
      return
    }
    factory315 := thrift.NewTJSONProtocolFactory()
    jsProt316 := factory315.GetProtocol(mbTrans313)
    argvalue0 := driver.NewIDataFrameId()
    err317 := argvalue0.Read(context.Background(), jsProt316)
    if err317 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg318 := flag.Arg(2)
    mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
    defer mbTrans319.Close()
    _, err320 := mbTrans319.WriteString(arg318)
    if err320 != nil {
      Usage()
      return
    }
    factory321 := thrift.NewTJSONProtocolFactory()
    jsProt322 := factory321.GetProtocol(mbTrans319)
    argvalue1 := rpc.NewISource()
    err323 := argvalue1.Read(context.Background(), jsProt322)
    if err323 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Flatmap(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "keyBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "KeyBy requires 2 args")
      flag.Usage()
    }
    arg324 := flag.Arg(1)
    mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
    defer mbTrans325.Close()
    _, err326 := mbTrans325.WriteString(arg324)
    if err326 != nil {
      Usage()
      return
    }
    factory327 := thrift.NewTJSONProtocolFactory()
    jsProt328 := factory327.GetProtocol(mbTrans325)
    argvalue0 := driver.NewIDataFrameId()
    err329 := argvalue0.Read(context.Background(), jsProt328)
    if err329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg330 := flag.Arg(2)
    mbTrans331 := thrift.NewTMemoryBufferLen(len(arg330))
    defer mbTrans331.Close()
    _, err332 := mbTrans331.WriteString(arg330)
    if err332 != nil {
      Usage()
      return
    }
    factory333 := thrift.NewTJSONProtocolFactory()
    jsProt334 := factory333.GetProtocol(mbTrans331)
    argvalue1 := rpc.NewISource()
    err335 := argvalue1.Read(context.Background(), jsProt334)
    if err335 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.KeyBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapPartitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MapPartitions requires 3 args")
      flag.Usage()
    }
    arg336 := flag.Arg(1)
    mbTrans337 := thrift.NewTMemoryBufferLen(len(arg336))
    defer mbTrans337.Close()
    _, err338 := mbTrans337.WriteString(arg336)
    if err338 != nil {
      Usage()
      return
    }
    factory339 := thrift.NewTJSONProtocolFactory()
    jsProt340 := factory339.GetProtocol(mbTrans337)
    argvalue0 := driver.NewIDataFrameId()
    err341 := argvalue0.Read(context.Background(), jsProt340)
    if err341 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg342 := flag.Arg(2)
    mbTrans343 := thrift.NewTMemoryBufferLen(len(arg342))
    defer mbTrans343.Close()
    _, err344 := mbTrans343.WriteString(arg342)
    if err344 != nil {
      Usage()
      return
    }
    factory345 := thrift.NewTJSONProtocolFactory()
    jsProt346 := factory345.GetProtocol(mbTrans343)
    argvalue1 := rpc.NewISource()
    err347 := argvalue1.Read(context.Background(), jsProt346)
    if err347 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.MapPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "mapPartitionsWithIndex":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MapPartitionsWithIndex requires 3 args")
      flag.Usage()
    }
    arg349 := flag.Arg(1)
    mbTrans350 := thrift.NewTMemoryBufferLen(len(arg349))
    defer mbTrans350.Close()
    _, err351 := mbTrans350.WriteString(arg349)
    if err351 != nil {
      Usage()
      return
    }
    factory352 := thrift.NewTJSONProtocolFactory()
    jsProt353 := factory352.GetProtocol(mbTrans350)
    argvalue0 := driver.NewIDataFrameId()
    err354 := argvalue0.Read(context.Background(), jsProt353)
    if err354 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg355 := flag.Arg(2)
    mbTrans356 := thrift.NewTMemoryBufferLen(len(arg355))
    defer mbTrans356.Close()
    _, err357 := mbTrans356.WriteString(arg355)
    if err357 != nil {
      Usage()
      return
    }
    factory358 := thrift.NewTJSONProtocolFactory()
    jsProt359 := factory358.GetProtocol(mbTrans356)
    argvalue1 := rpc.NewISource()
    err360 := argvalue1.Read(context.Background(), jsProt359)
    if err360 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.MapPartitionsWithIndex(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "mapExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutor requires 2 args")
      flag.Usage()
    }
    arg362 := flag.Arg(1)
    mbTrans363 := thrift.NewTMemoryBufferLen(len(arg362))
    defer mbTrans363.Close()
    _, err364 := mbTrans363.WriteString(arg362)
    if err364 != nil {
      Usage()
      return
    }
    factory365 := thrift.NewTJSONProtocolFactory()
    jsProt366 := factory365.GetProtocol(mbTrans363)
    argvalue0 := driver.NewIDataFrameId()
    err367 := argvalue0.Read(context.Background(), jsProt366)
    if err367 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg368 := flag.Arg(2)
    mbTrans369 := thrift.NewTMemoryBufferLen(len(arg368))
    defer mbTrans369.Close()
    _, err370 := mbTrans369.WriteString(arg368)
    if err370 != nil {
      Usage()
      return
    }
    factory371 := thrift.NewTJSONProtocolFactory()
    jsProt372 := factory371.GetProtocol(mbTrans369)
    argvalue1 := rpc.NewISource()
    err373 := argvalue1.Read(context.Background(), jsProt372)
    if err373 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapExecutorTo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutorTo requires 2 args")
      flag.Usage()
    }
    arg374 := flag.Arg(1)
    mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
    defer mbTrans375.Close()
    _, err376 := mbTrans375.WriteString(arg374)
    if err376 != nil {
      Usage()
      return
    }
    factory377 := thrift.NewTJSONProtocolFactory()
    jsProt378 := factory377.GetProtocol(mbTrans375)
    argvalue0 := driver.NewIDataFrameId()
    err379 := argvalue0.Read(context.Background(), jsProt378)
    if err379 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg380 := flag.Arg(2)
    mbTrans381 := thrift.NewTMemoryBufferLen(len(arg380))
    defer mbTrans381.Close()
    _, err382 := mbTrans381.WriteString(arg380)
    if err382 != nil {
      Usage()
      return
    }
    factory383 := thrift.NewTJSONProtocolFactory()
    jsProt384 := factory383.GetProtocol(mbTrans381)
    argvalue1 := rpc.NewISource()
    err385 := argvalue1.Read(context.Background(), jsProt384)
    if err385 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutorTo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupBy requires 2 args")
      flag.Usage()
    }
    arg386 := flag.Arg(1)
    mbTrans387 := thrift.NewTMemoryBufferLen(len(arg386))
    defer mbTrans387.Close()
    _, err388 := mbTrans387.WriteString(arg386)
    if err388 != nil {
      Usage()
      return
    }
    factory389 := thrift.NewTJSONProtocolFactory()
    jsProt390 := factory389.GetProtocol(mbTrans387)
    argvalue0 := driver.NewIDataFrameId()
    err391 := argvalue0.Read(context.Background(), jsProt390)
    if err391 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg392 := flag.Arg(2)
    mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil {
      Usage()
      return
    }
    factory395 := thrift.NewTJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    argvalue1 := rpc.NewISource()
    err397 := argvalue1.Read(context.Background(), jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupBy2 requires 3 args")
      flag.Usage()
    }
    arg398 := flag.Arg(1)
    mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewTJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue0 := driver.NewIDataFrameId()
    err403 := argvalue0.Read(context.Background(), jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg404 := flag.Arg(2)
    mbTrans405 := thrift.NewTMemoryBufferLen(len(arg404))
    defer mbTrans405.Close()
    _, err406 := mbTrans405.WriteString(arg404)
    if err406 != nil {
      Usage()
      return
    }
    factory407 := thrift.NewTJSONProtocolFactory()
    jsProt408 := factory407.GetProtocol(mbTrans405)
    argvalue1 := rpc.NewISource()
    err409 := argvalue1.Read(context.Background(), jsProt408)
    if err409 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err410 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err410 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupBy2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sort requires 2 args")
      flag.Usage()
    }
    arg411 := flag.Arg(1)
    mbTrans412 := thrift.NewTMemoryBufferLen(len(arg411))
    defer mbTrans412.Close()
    _, err413 := mbTrans412.WriteString(arg411)
    if err413 != nil {
      Usage()
      return
    }
    factory414 := thrift.NewTJSONProtocolFactory()
    jsProt415 := factory414.GetProtocol(mbTrans412)
    argvalue0 := driver.NewIDataFrameId()
    err416 := argvalue0.Read(context.Background(), jsProt415)
    if err416 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.Sort(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sort2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Sort2 requires 3 args")
      flag.Usage()
    }
    arg418 := flag.Arg(1)
    mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
    defer mbTrans419.Close()
    _, err420 := mbTrans419.WriteString(arg418)
    if err420 != nil {
      Usage()
      return
    }
    factory421 := thrift.NewTJSONProtocolFactory()
    jsProt422 := factory421.GetProtocol(mbTrans419)
    argvalue0 := driver.NewIDataFrameId()
    err423 := argvalue0.Read(context.Background(), jsProt422)
    if err423 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err425 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err425 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Sort2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortBy requires 3 args")
      flag.Usage()
    }
    arg426 := flag.Arg(1)
    mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
    defer mbTrans427.Close()
    _, err428 := mbTrans427.WriteString(arg426)
    if err428 != nil {
      Usage()
      return
    }
    factory429 := thrift.NewTJSONProtocolFactory()
    jsProt430 := factory429.GetProtocol(mbTrans427)
    argvalue0 := driver.NewIDataFrameId()
    err431 := argvalue0.Read(context.Background(), jsProt430)
    if err431 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg432 := flag.Arg(2)
    mbTrans433 := thrift.NewTMemoryBufferLen(len(arg432))
    defer mbTrans433.Close()
    _, err434 := mbTrans433.WriteString(arg432)
    if err434 != nil {
      Usage()
      return
    }
    factory435 := thrift.NewTJSONProtocolFactory()
    jsProt436 := factory435.GetProtocol(mbTrans433)
    argvalue1 := rpc.NewISource()
    err437 := argvalue1.Read(context.Background(), jsProt436)
    if err437 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortBy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy3":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortBy3 requires 4 args")
      flag.Usage()
    }
    arg439 := flag.Arg(1)
    mbTrans440 := thrift.NewTMemoryBufferLen(len(arg439))
    defer mbTrans440.Close()
    _, err441 := mbTrans440.WriteString(arg439)
    if err441 != nil {
      Usage()
      return
    }
    factory442 := thrift.NewTJSONProtocolFactory()
    jsProt443 := factory442.GetProtocol(mbTrans440)
    argvalue0 := driver.NewIDataFrameId()
    err444 := argvalue0.Read(context.Background(), jsProt443)
    if err444 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg445 := flag.Arg(2)
    mbTrans446 := thrift.NewTMemoryBufferLen(len(arg445))
    defer mbTrans446.Close()
    _, err447 := mbTrans446.WriteString(arg445)
    if err447 != nil {
      Usage()
      return
    }
    factory448 := thrift.NewTJSONProtocolFactory()
    jsProt449 := factory448.GetProtocol(mbTrans446)
    argvalue1 := rpc.NewISource()
    err450 := argvalue1.Read(context.Background(), jsProt449)
    if err450 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err452 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err452 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortBy3(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "reduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Reduce requires 3 args")
      flag.Usage()
    }
    arg453 := flag.Arg(1)
    mbTrans454 := thrift.NewTMemoryBufferLen(len(arg453))
    defer mbTrans454.Close()
    _, err455 := mbTrans454.WriteString(arg453)
    if err455 != nil {
      Usage()
      return
    }
    factory456 := thrift.NewTJSONProtocolFactory()
    jsProt457 := factory456.GetProtocol(mbTrans454)
    argvalue0 := driver.NewIDataFrameId()
    err458 := argvalue0.Read(context.Background(), jsProt457)
    if err458 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg459 := flag.Arg(2)
    mbTrans460 := thrift.NewTMemoryBufferLen(len(arg459))
    defer mbTrans460.Close()
    _, err461 := mbTrans460.WriteString(arg459)
    if err461 != nil {
      Usage()
      return
    }
    factory462 := thrift.NewTJSONProtocolFactory()
    jsProt463 := factory462.GetProtocol(mbTrans460)
    argvalue1 := rpc.NewISource()
    err464 := argvalue1.Read(context.Background(), jsProt463)
    if err464 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg465 := flag.Arg(3)
    mbTrans466 := thrift.NewTMemoryBufferLen(len(arg465))
    defer mbTrans466.Close()
    _, err467 := mbTrans466.WriteString(arg465)
    if err467 != nil {
      Usage()
      return
    }
    factory468 := thrift.NewTJSONProtocolFactory()
    jsProt469 := factory468.GetProtocol(mbTrans466)
    argvalue2 := rpc.NewISource()
    err470 := argvalue2.Read(context.Background(), jsProt469)
    if err470 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Reduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "treeReduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TreeReduce requires 3 args")
      flag.Usage()
    }
    arg471 := flag.Arg(1)
    mbTrans472 := thrift.NewTMemoryBufferLen(len(arg471))
    defer mbTrans472.Close()
    _, err473 := mbTrans472.WriteString(arg471)
    if err473 != nil {
      Usage()
      return
    }
    factory474 := thrift.NewTJSONProtocolFactory()
    jsProt475 := factory474.GetProtocol(mbTrans472)
    argvalue0 := driver.NewIDataFrameId()
    err476 := argvalue0.Read(context.Background(), jsProt475)
    if err476 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg477 := flag.Arg(2)
    mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
    defer mbTrans478.Close()
    _, err479 := mbTrans478.WriteString(arg477)
    if err479 != nil {
      Usage()
      return
    }
    factory480 := thrift.NewTJSONProtocolFactory()
    jsProt481 := factory480.GetProtocol(mbTrans478)
    argvalue1 := rpc.NewISource()
    err482 := argvalue1.Read(context.Background(), jsProt481)
    if err482 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg483 := flag.Arg(3)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil {
      Usage()
      return
    }
    factory486 := thrift.NewTJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    argvalue2 := rpc.NewISource()
    err488 := argvalue2.Read(context.Background(), jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TreeReduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "collect":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Collect requires 2 args")
      flag.Usage()
    }
    arg489 := flag.Arg(1)
    mbTrans490 := thrift.NewTMemoryBufferLen(len(arg489))
    defer mbTrans490.Close()
    _, err491 := mbTrans490.WriteString(arg489)
    if err491 != nil {
      Usage()
      return
    }
    factory492 := thrift.NewTJSONProtocolFactory()
    jsProt493 := factory492.GetProtocol(mbTrans490)
    argvalue0 := driver.NewIDataFrameId()
    err494 := argvalue0.Read(context.Background(), jsProt493)
    if err494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg495 := flag.Arg(2)
    mbTrans496 := thrift.NewTMemoryBufferLen(len(arg495))
    defer mbTrans496.Close()
    _, err497 := mbTrans496.WriteString(arg495)
    if err497 != nil {
      Usage()
      return
    }
    factory498 := thrift.NewTJSONProtocolFactory()
    jsProt499 := factory498.GetProtocol(mbTrans496)
    argvalue1 := rpc.NewISource()
    err500 := argvalue1.Read(context.Background(), jsProt499)
    if err500 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Collect(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "aggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "Aggregate requires 5 args")
      flag.Usage()
    }
    arg501 := flag.Arg(1)
    mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
    defer mbTrans502.Close()
    _, err503 := mbTrans502.WriteString(arg501)
    if err503 != nil {
      Usage()
      return
    }
    factory504 := thrift.NewTJSONProtocolFactory()
    jsProt505 := factory504.GetProtocol(mbTrans502)
    argvalue0 := driver.NewIDataFrameId()
    err506 := argvalue0.Read(context.Background(), jsProt505)
    if err506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg507 := flag.Arg(2)
    mbTrans508 := thrift.NewTMemoryBufferLen(len(arg507))
    defer mbTrans508.Close()
    _, err509 := mbTrans508.WriteString(arg507)
    if err509 != nil {
      Usage()
      return
    }
    factory510 := thrift.NewTJSONProtocolFactory()
    jsProt511 := factory510.GetProtocol(mbTrans508)
    argvalue1 := rpc.NewISource()
    err512 := argvalue1.Read(context.Background(), jsProt511)
    if err512 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg513 := flag.Arg(3)
    mbTrans514 := thrift.NewTMemoryBufferLen(len(arg513))
    defer mbTrans514.Close()
    _, err515 := mbTrans514.WriteString(arg513)
    if err515 != nil {
      Usage()
      return
    }
    factory516 := thrift.NewTJSONProtocolFactory()
    jsProt517 := factory516.GetProtocol(mbTrans514)
    argvalue2 := rpc.NewISource()
    err518 := argvalue2.Read(context.Background(), jsProt517)
    if err518 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg519 := flag.Arg(4)
    mbTrans520 := thrift.NewTMemoryBufferLen(len(arg519))
    defer mbTrans520.Close()
    _, err521 := mbTrans520.WriteString(arg519)
    if err521 != nil {
      Usage()
      return
    }
    factory522 := thrift.NewTJSONProtocolFactory()
    jsProt523 := factory522.GetProtocol(mbTrans520)
    argvalue3 := rpc.NewISource()
    err524 := argvalue3.Read(context.Background(), jsProt523)
    if err524 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg525 := flag.Arg(5)
    mbTrans526 := thrift.NewTMemoryBufferLen(len(arg525))
    defer mbTrans526.Close()
    _, err527 := mbTrans526.WriteString(arg525)
    if err527 != nil {
      Usage()
      return
    }
    factory528 := thrift.NewTJSONProtocolFactory()
    jsProt529 := factory528.GetProtocol(mbTrans526)
    argvalue4 := rpc.NewISource()
    err530 := argvalue4.Read(context.Background(), jsProt529)
    if err530 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.Aggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "treeAggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TreeAggregate requires 5 args")
      flag.Usage()
    }
    arg531 := flag.Arg(1)
    mbTrans532 := thrift.NewTMemoryBufferLen(len(arg531))
    defer mbTrans532.Close()
    _, err533 := mbTrans532.WriteString(arg531)
    if err533 != nil {
      Usage()
      return
    }
    factory534 := thrift.NewTJSONProtocolFactory()
    jsProt535 := factory534.GetProtocol(mbTrans532)
    argvalue0 := driver.NewIDataFrameId()
    err536 := argvalue0.Read(context.Background(), jsProt535)
    if err536 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg537 := flag.Arg(2)
    mbTrans538 := thrift.NewTMemoryBufferLen(len(arg537))
    defer mbTrans538.Close()
    _, err539 := mbTrans538.WriteString(arg537)
    if err539 != nil {
      Usage()
      return
    }
    factory540 := thrift.NewTJSONProtocolFactory()
    jsProt541 := factory540.GetProtocol(mbTrans538)
    argvalue1 := rpc.NewISource()
    err542 := argvalue1.Read(context.Background(), jsProt541)
    if err542 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg543 := flag.Arg(3)
    mbTrans544 := thrift.NewTMemoryBufferLen(len(arg543))
    defer mbTrans544.Close()
    _, err545 := mbTrans544.WriteString(arg543)
    if err545 != nil {
      Usage()
      return
    }
    factory546 := thrift.NewTJSONProtocolFactory()
    jsProt547 := factory546.GetProtocol(mbTrans544)
    argvalue2 := rpc.NewISource()
    err548 := argvalue2.Read(context.Background(), jsProt547)
    if err548 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg549 := flag.Arg(4)
    mbTrans550 := thrift.NewTMemoryBufferLen(len(arg549))
    defer mbTrans550.Close()
    _, err551 := mbTrans550.WriteString(arg549)
    if err551 != nil {
      Usage()
      return
    }
    factory552 := thrift.NewTJSONProtocolFactory()
    jsProt553 := factory552.GetProtocol(mbTrans550)
    argvalue3 := rpc.NewISource()
    err554 := argvalue3.Read(context.Background(), jsProt553)
    if err554 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg555 := flag.Arg(5)
    mbTrans556 := thrift.NewTMemoryBufferLen(len(arg555))
    defer mbTrans556.Close()
    _, err557 := mbTrans556.WriteString(arg555)
    if err557 != nil {
      Usage()
      return
    }
    factory558 := thrift.NewTJSONProtocolFactory()
    jsProt559 := factory558.GetProtocol(mbTrans556)
    argvalue4 := rpc.NewISource()
    err560 := argvalue4.Read(context.Background(), jsProt559)
    if err560 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TreeAggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "fold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Fold requires 4 args")
      flag.Usage()
    }
    arg561 := flag.Arg(1)
    mbTrans562 := thrift.NewTMemoryBufferLen(len(arg561))
    defer mbTrans562.Close()
    _, err563 := mbTrans562.WriteString(arg561)
    if err563 != nil {
      Usage()
      return
    }
    factory564 := thrift.NewTJSONProtocolFactory()
    jsProt565 := factory564.GetProtocol(mbTrans562)
    argvalue0 := driver.NewIDataFrameId()
    err566 := argvalue0.Read(context.Background(), jsProt565)
    if err566 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg567 := flag.Arg(2)
    mbTrans568 := thrift.NewTMemoryBufferLen(len(arg567))
    defer mbTrans568.Close()
    _, err569 := mbTrans568.WriteString(arg567)
    if err569 != nil {
      Usage()
      return
    }
    factory570 := thrift.NewTJSONProtocolFactory()
    jsProt571 := factory570.GetProtocol(mbTrans568)
    argvalue1 := rpc.NewISource()
    err572 := argvalue1.Read(context.Background(), jsProt571)
    if err572 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg573 := flag.Arg(3)
    mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
    defer mbTrans574.Close()
    _, err575 := mbTrans574.WriteString(arg573)
    if err575 != nil {
      Usage()
      return
    }
    factory576 := thrift.NewTJSONProtocolFactory()
    jsProt577 := factory576.GetProtocol(mbTrans574)
    argvalue2 := rpc.NewISource()
    err578 := argvalue2.Read(context.Background(), jsProt577)
    if err578 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg579 := flag.Arg(4)
    mbTrans580 := thrift.NewTMemoryBufferLen(len(arg579))
    defer mbTrans580.Close()
    _, err581 := mbTrans580.WriteString(arg579)
    if err581 != nil {
      Usage()
      return
    }
    factory582 := thrift.NewTJSONProtocolFactory()
    jsProt583 := factory582.GetProtocol(mbTrans580)
    argvalue3 := rpc.NewISource()
    err584 := argvalue3.Read(context.Background(), jsProt583)
    if err584 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Fold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "treeFold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TreeFold requires 4 args")
      flag.Usage()
    }
    arg585 := flag.Arg(1)
    mbTrans586 := thrift.NewTMemoryBufferLen(len(arg585))
    defer mbTrans586.Close()
    _, err587 := mbTrans586.WriteString(arg585)
    if err587 != nil {
      Usage()
      return
    }
    factory588 := thrift.NewTJSONProtocolFactory()
    jsProt589 := factory588.GetProtocol(mbTrans586)
    argvalue0 := driver.NewIDataFrameId()
    err590 := argvalue0.Read(context.Background(), jsProt589)
    if err590 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg591 := flag.Arg(2)
    mbTrans592 := thrift.NewTMemoryBufferLen(len(arg591))
    defer mbTrans592.Close()
    _, err593 := mbTrans592.WriteString(arg591)
    if err593 != nil {
      Usage()
      return
    }
    factory594 := thrift.NewTJSONProtocolFactory()
    jsProt595 := factory594.GetProtocol(mbTrans592)
    argvalue1 := rpc.NewISource()
    err596 := argvalue1.Read(context.Background(), jsProt595)
    if err596 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg597 := flag.Arg(3)
    mbTrans598 := thrift.NewTMemoryBufferLen(len(arg597))
    defer mbTrans598.Close()
    _, err599 := mbTrans598.WriteString(arg597)
    if err599 != nil {
      Usage()
      return
    }
    factory600 := thrift.NewTJSONProtocolFactory()
    jsProt601 := factory600.GetProtocol(mbTrans598)
    argvalue2 := rpc.NewISource()
    err602 := argvalue2.Read(context.Background(), jsProt601)
    if err602 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg603 := flag.Arg(4)
    mbTrans604 := thrift.NewTMemoryBufferLen(len(arg603))
    defer mbTrans604.Close()
    _, err605 := mbTrans604.WriteString(arg603)
    if err605 != nil {
      Usage()
      return
    }
    factory606 := thrift.NewTJSONProtocolFactory()
    jsProt607 := factory606.GetProtocol(mbTrans604)
    argvalue3 := rpc.NewISource()
    err608 := argvalue3.Read(context.Background(), jsProt607)
    if err608 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TreeFold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "take":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Take requires 3 args")
      flag.Usage()
    }
    arg609 := flag.Arg(1)
    mbTrans610 := thrift.NewTMemoryBufferLen(len(arg609))
    defer mbTrans610.Close()
    _, err611 := mbTrans610.WriteString(arg609)
    if err611 != nil {
      Usage()
      return
    }
    factory612 := thrift.NewTJSONProtocolFactory()
    jsProt613 := factory612.GetProtocol(mbTrans610)
    argvalue0 := driver.NewIDataFrameId()
    err614 := argvalue0.Read(context.Background(), jsProt613)
    if err614 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err615 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err615 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg616 := flag.Arg(3)
    mbTrans617 := thrift.NewTMemoryBufferLen(len(arg616))
    defer mbTrans617.Close()
    _, err618 := mbTrans617.WriteString(arg616)
    if err618 != nil {
      Usage()
      return
    }
    factory619 := thrift.NewTJSONProtocolFactory()
    jsProt620 := factory619.GetProtocol(mbTrans617)
    argvalue2 := rpc.NewISource()
    err621 := argvalue2.Read(context.Background(), jsProt620)
    if err621 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Take(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "foreach_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Foreach_ requires 2 args")
      flag.Usage()
    }
    arg622 := flag.Arg(1)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue0 := driver.NewIDataFrameId()
    err627 := argvalue0.Read(context.Background(), jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg628 := flag.Arg(2)
    mbTrans629 := thrift.NewTMemoryBufferLen(len(arg628))
    defer mbTrans629.Close()
    _, err630 := mbTrans629.WriteString(arg628)
    if err630 != nil {
      Usage()
      return
    }
    factory631 := thrift.NewTJSONProtocolFactory()
    jsProt632 := factory631.GetProtocol(mbTrans629)
    argvalue1 := rpc.NewISource()
    err633 := argvalue1.Read(context.Background(), jsProt632)
    if err633 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Foreach_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachPartition":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachPartition requires 2 args")
      flag.Usage()
    }
    arg634 := flag.Arg(1)
    mbTrans635 := thrift.NewTMemoryBufferLen(len(arg634))
    defer mbTrans635.Close()
    _, err636 := mbTrans635.WriteString(arg634)
    if err636 != nil {
      Usage()
      return
    }
    factory637 := thrift.NewTJSONProtocolFactory()
    jsProt638 := factory637.GetProtocol(mbTrans635)
    argvalue0 := driver.NewIDataFrameId()
    err639 := argvalue0.Read(context.Background(), jsProt638)
    if err639 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg640 := flag.Arg(2)
    mbTrans641 := thrift.NewTMemoryBufferLen(len(arg640))
    defer mbTrans641.Close()
    _, err642 := mbTrans641.WriteString(arg640)
    if err642 != nil {
      Usage()
      return
    }
    factory643 := thrift.NewTJSONProtocolFactory()
    jsProt644 := factory643.GetProtocol(mbTrans641)
    argvalue1 := rpc.NewISource()
    err645 := argvalue1.Read(context.Background(), jsProt644)
    if err645 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachPartition(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachExecutor requires 2 args")
      flag.Usage()
    }
    arg646 := flag.Arg(1)
    mbTrans647 := thrift.NewTMemoryBufferLen(len(arg646))
    defer mbTrans647.Close()
    _, err648 := mbTrans647.WriteString(arg646)
    if err648 != nil {
      Usage()
      return
    }
    factory649 := thrift.NewTJSONProtocolFactory()
    jsProt650 := factory649.GetProtocol(mbTrans647)
    argvalue0 := driver.NewIDataFrameId()
    err651 := argvalue0.Read(context.Background(), jsProt650)
    if err651 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg652 := flag.Arg(2)
    mbTrans653 := thrift.NewTMemoryBufferLen(len(arg652))
    defer mbTrans653.Close()
    _, err654 := mbTrans653.WriteString(arg652)
    if err654 != nil {
      Usage()
      return
    }
    factory655 := thrift.NewTJSONProtocolFactory()
    jsProt656 := factory655.GetProtocol(mbTrans653)
    argvalue1 := rpc.NewISource()
    err657 := argvalue1.Read(context.Background(), jsProt656)
    if err657 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "top":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Top requires 3 args")
      flag.Usage()
    }
    arg658 := flag.Arg(1)
    mbTrans659 := thrift.NewTMemoryBufferLen(len(arg658))
    defer mbTrans659.Close()
    _, err660 := mbTrans659.WriteString(arg658)
    if err660 != nil {
      Usage()
      return
    }
    factory661 := thrift.NewTJSONProtocolFactory()
    jsProt662 := factory661.GetProtocol(mbTrans659)
    argvalue0 := driver.NewIDataFrameId()
    err663 := argvalue0.Read(context.Background(), jsProt662)
    if err663 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err664 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err664 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg665 := flag.Arg(3)
    mbTrans666 := thrift.NewTMemoryBufferLen(len(arg665))
    defer mbTrans666.Close()
    _, err667 := mbTrans666.WriteString(arg665)
    if err667 != nil {
      Usage()
      return
    }
    factory668 := thrift.NewTJSONProtocolFactory()
    jsProt669 := factory668.GetProtocol(mbTrans666)
    argvalue2 := rpc.NewISource()
    err670 := argvalue2.Read(context.Background(), jsProt669)
    if err670 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Top(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "top4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Top4 requires 4 args")
      flag.Usage()
    }
    arg671 := flag.Arg(1)
    mbTrans672 := thrift.NewTMemoryBufferLen(len(arg671))
    defer mbTrans672.Close()
    _, err673 := mbTrans672.WriteString(arg671)
    if err673 != nil {
      Usage()
      return
    }
    factory674 := thrift.NewTJSONProtocolFactory()
    jsProt675 := factory674.GetProtocol(mbTrans672)
    argvalue0 := driver.NewIDataFrameId()
    err676 := argvalue0.Read(context.Background(), jsProt675)
    if err676 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err677 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err677 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg678 := flag.Arg(3)
    mbTrans679 := thrift.NewTMemoryBufferLen(len(arg678))
    defer mbTrans679.Close()
    _, err680 := mbTrans679.WriteString(arg678)
    if err680 != nil {
      Usage()
      return
    }
    factory681 := thrift.NewTJSONProtocolFactory()
    jsProt682 := factory681.GetProtocol(mbTrans679)
    argvalue2 := rpc.NewISource()
    err683 := argvalue2.Read(context.Background(), jsProt682)
    if err683 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg684 := flag.Arg(4)
    mbTrans685 := thrift.NewTMemoryBufferLen(len(arg684))
    defer mbTrans685.Close()
    _, err686 := mbTrans685.WriteString(arg684)
    if err686 != nil {
      Usage()
      return
    }
    factory687 := thrift.NewTJSONProtocolFactory()
    jsProt688 := factory687.GetProtocol(mbTrans685)
    argvalue3 := rpc.NewISource()
    err689 := argvalue3.Read(context.Background(), jsProt688)
    if err689 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Top4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeOrdered":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TakeOrdered requires 3 args")
      flag.Usage()
    }
    arg690 := flag.Arg(1)
    mbTrans691 := thrift.NewTMemoryBufferLen(len(arg690))
    defer mbTrans691.Close()
    _, err692 := mbTrans691.WriteString(arg690)
    if err692 != nil {
      Usage()
      return
    }
    factory693 := thrift.NewTJSONProtocolFactory()
    jsProt694 := factory693.GetProtocol(mbTrans691)
    argvalue0 := driver.NewIDataFrameId()
    err695 := argvalue0.Read(context.Background(), jsProt694)
    if err695 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err696 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err696 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg697 := flag.Arg(3)
    mbTrans698 := thrift.NewTMemoryBufferLen(len(arg697))
    defer mbTrans698.Close()
    _, err699 := mbTrans698.WriteString(arg697)
    if err699 != nil {
      Usage()
      return
    }
    factory700 := thrift.NewTJSONProtocolFactory()
    jsProt701 := factory700.GetProtocol(mbTrans698)
    argvalue2 := rpc.NewISource()
    err702 := argvalue2.Read(context.Background(), jsProt701)
    if err702 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TakeOrdered(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "takeOrdered4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TakeOrdered4 requires 4 args")
      flag.Usage()
    }
    arg703 := flag.Arg(1)
    mbTrans704 := thrift.NewTMemoryBufferLen(len(arg703))
    defer mbTrans704.Close()
    _, err705 := mbTrans704.WriteString(arg703)
    if err705 != nil {
      Usage()
      return
    }
    factory706 := thrift.NewTJSONProtocolFactory()
    jsProt707 := factory706.GetProtocol(mbTrans704)
    argvalue0 := driver.NewIDataFrameId()
    err708 := argvalue0.Read(context.Background(), jsProt707)
    if err708 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err709 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err709 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg710 := flag.Arg(3)
    mbTrans711 := thrift.NewTMemoryBufferLen(len(arg710))
    defer mbTrans711.Close()
    _, err712 := mbTrans711.WriteString(arg710)
    if err712 != nil {
      Usage()
      return
    }
    factory713 := thrift.NewTJSONProtocolFactory()
    jsProt714 := factory713.GetProtocol(mbTrans711)
    argvalue2 := rpc.NewISource()
    err715 := argvalue2.Read(context.Background(), jsProt714)
    if err715 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg716 := flag.Arg(4)
    mbTrans717 := thrift.NewTMemoryBufferLen(len(arg716))
    defer mbTrans717.Close()
    _, err718 := mbTrans717.WriteString(arg716)
    if err718 != nil {
      Usage()
      return
    }
    factory719 := thrift.NewTJSONProtocolFactory()
    jsProt720 := factory719.GetProtocol(mbTrans717)
    argvalue3 := rpc.NewISource()
    err721 := argvalue3.Read(context.Background(), jsProt720)
    if err721 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TakeOrdered4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sample":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Sample requires 4 args")
      flag.Usage()
    }
    arg722 := flag.Arg(1)
    mbTrans723 := thrift.NewTMemoryBufferLen(len(arg722))
    defer mbTrans723.Close()
    _, err724 := mbTrans723.WriteString(arg722)
    if err724 != nil {
      Usage()
      return
    }
    factory725 := thrift.NewTJSONProtocolFactory()
    jsProt726 := factory725.GetProtocol(mbTrans723)
    argvalue0 := driver.NewIDataFrameId()
    err727 := argvalue0.Read(context.Background(), jsProt726)
    if err727 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err729 := (strconv.ParseFloat(flag.Arg(3), 64))
    if err729 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err730 := (strconv.Atoi(flag.Arg(4)))
    if err730 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.Sample(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeSample":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TakeSample requires 5 args")
      flag.Usage()
    }
    arg731 := flag.Arg(1)
    mbTrans732 := thrift.NewTMemoryBufferLen(len(arg731))
    defer mbTrans732.Close()
    _, err733 := mbTrans732.WriteString(arg731)
    if err733 != nil {
      Usage()
      return
    }
    factory734 := thrift.NewTJSONProtocolFactory()
    jsProt735 := factory734.GetProtocol(mbTrans732)
    argvalue0 := driver.NewIDataFrameId()
    err736 := argvalue0.Read(context.Background(), jsProt735)
    if err736 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err738 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err738 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err739 := (strconv.Atoi(flag.Arg(4)))
    if err739 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg740 := flag.Arg(5)
    mbTrans741 := thrift.NewTMemoryBufferLen(len(arg740))
    defer mbTrans741.Close()
    _, err742 := mbTrans741.WriteString(arg740)
    if err742 != nil {
      Usage()
      return
    }
    factory743 := thrift.NewTJSONProtocolFactory()
    jsProt744 := factory743.GetProtocol(mbTrans741)
    argvalue4 := rpc.NewISource()
    err745 := argvalue4.Read(context.Background(), jsProt744)
    if err745 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TakeSample(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Count requires 1 args")
      flag.Usage()
    }
    arg746 := flag.Arg(1)
    mbTrans747 := thrift.NewTMemoryBufferLen(len(arg746))
    defer mbTrans747.Close()
    _, err748 := mbTrans747.WriteString(arg746)
    if err748 != nil {
      Usage()
      return
    }
    factory749 := thrift.NewTJSONProtocolFactory()
    jsProt750 := factory749.GetProtocol(mbTrans747)
    argvalue0 := driver.NewIDataFrameId()
    err751 := argvalue0.Read(context.Background(), jsProt750)
    if err751 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Count(context.Background(), value0))
    fmt.Print("\n")
    break
  case "max":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Max requires 2 args")
      flag.Usage()
    }
    arg752 := flag.Arg(1)
    mbTrans753 := thrift.NewTMemoryBufferLen(len(arg752))
    defer mbTrans753.Close()
    _, err754 := mbTrans753.WriteString(arg752)
    if err754 != nil {
      Usage()
      return
    }
    factory755 := thrift.NewTJSONProtocolFactory()
    jsProt756 := factory755.GetProtocol(mbTrans753)
    argvalue0 := driver.NewIDataFrameId()
    err757 := argvalue0.Read(context.Background(), jsProt756)
    if err757 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg758 := flag.Arg(2)
    mbTrans759 := thrift.NewTMemoryBufferLen(len(arg758))
    defer mbTrans759.Close()
    _, err760 := mbTrans759.WriteString(arg758)
    if err760 != nil {
      Usage()
      return
    }
    factory761 := thrift.NewTJSONProtocolFactory()
    jsProt762 := factory761.GetProtocol(mbTrans759)
    argvalue1 := rpc.NewISource()
    err763 := argvalue1.Read(context.Background(), jsProt762)
    if err763 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Max(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "max3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Max3 requires 3 args")
      flag.Usage()
    }
    arg764 := flag.Arg(1)
    mbTrans765 := thrift.NewTMemoryBufferLen(len(arg764))
    defer mbTrans765.Close()
    _, err766 := mbTrans765.WriteString(arg764)
    if err766 != nil {
      Usage()
      return
    }
    factory767 := thrift.NewTJSONProtocolFactory()
    jsProt768 := factory767.GetProtocol(mbTrans765)
    argvalue0 := driver.NewIDataFrameId()
    err769 := argvalue0.Read(context.Background(), jsProt768)
    if err769 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg770 := flag.Arg(2)
    mbTrans771 := thrift.NewTMemoryBufferLen(len(arg770))
    defer mbTrans771.Close()
    _, err772 := mbTrans771.WriteString(arg770)
    if err772 != nil {
      Usage()
      return
    }
    factory773 := thrift.NewTJSONProtocolFactory()
    jsProt774 := factory773.GetProtocol(mbTrans771)
    argvalue1 := rpc.NewISource()
    err775 := argvalue1.Read(context.Background(), jsProt774)
    if err775 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg776 := flag.Arg(3)
    mbTrans777 := thrift.NewTMemoryBufferLen(len(arg776))
    defer mbTrans777.Close()
    _, err778 := mbTrans777.WriteString(arg776)
    if err778 != nil {
      Usage()
      return
    }
    factory779 := thrift.NewTJSONProtocolFactory()
    jsProt780 := factory779.GetProtocol(mbTrans777)
    argvalue2 := rpc.NewISource()
    err781 := argvalue2.Read(context.Background(), jsProt780)
    if err781 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Max3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "min":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Min requires 2 args")
      flag.Usage()
    }
    arg782 := flag.Arg(1)
    mbTrans783 := thrift.NewTMemoryBufferLen(len(arg782))
    defer mbTrans783.Close()
    _, err784 := mbTrans783.WriteString(arg782)
    if err784 != nil {
      Usage()
      return
    }
    factory785 := thrift.NewTJSONProtocolFactory()
    jsProt786 := factory785.GetProtocol(mbTrans783)
    argvalue0 := driver.NewIDataFrameId()
    err787 := argvalue0.Read(context.Background(), jsProt786)
    if err787 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg788 := flag.Arg(2)
    mbTrans789 := thrift.NewTMemoryBufferLen(len(arg788))
    defer mbTrans789.Close()
    _, err790 := mbTrans789.WriteString(arg788)
    if err790 != nil {
      Usage()
      return
    }
    factory791 := thrift.NewTJSONProtocolFactory()
    jsProt792 := factory791.GetProtocol(mbTrans789)
    argvalue1 := rpc.NewISource()
    err793 := argvalue1.Read(context.Background(), jsProt792)
    if err793 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Min(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "min3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Min3 requires 3 args")
      flag.Usage()
    }
    arg794 := flag.Arg(1)
    mbTrans795 := thrift.NewTMemoryBufferLen(len(arg794))
    defer mbTrans795.Close()
    _, err796 := mbTrans795.WriteString(arg794)
    if err796 != nil {
      Usage()
      return
    }
    factory797 := thrift.NewTJSONProtocolFactory()
    jsProt798 := factory797.GetProtocol(mbTrans795)
    argvalue0 := driver.NewIDataFrameId()
    err799 := argvalue0.Read(context.Background(), jsProt798)
    if err799 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg800 := flag.Arg(2)
    mbTrans801 := thrift.NewTMemoryBufferLen(len(arg800))
    defer mbTrans801.Close()
    _, err802 := mbTrans801.WriteString(arg800)
    if err802 != nil {
      Usage()
      return
    }
    factory803 := thrift.NewTJSONProtocolFactory()
    jsProt804 := factory803.GetProtocol(mbTrans801)
    argvalue1 := rpc.NewISource()
    err805 := argvalue1.Read(context.Background(), jsProt804)
    if err805 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg806 := flag.Arg(3)
    mbTrans807 := thrift.NewTMemoryBufferLen(len(arg806))
    defer mbTrans807.Close()
    _, err808 := mbTrans807.WriteString(arg806)
    if err808 != nil {
      Usage()
      return
    }
    factory809 := thrift.NewTJSONProtocolFactory()
    jsProt810 := factory809.GetProtocol(mbTrans807)
    argvalue2 := rpc.NewISource()
    err811 := argvalue2.Read(context.Background(), jsProt810)
    if err811 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Min3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "flatMapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FlatMapValues requires 2 args")
      flag.Usage()
    }
    arg812 := flag.Arg(1)
    mbTrans813 := thrift.NewTMemoryBufferLen(len(arg812))
    defer mbTrans813.Close()
    _, err814 := mbTrans813.WriteString(arg812)
    if err814 != nil {
      Usage()
      return
    }
    factory815 := thrift.NewTJSONProtocolFactory()
    jsProt816 := factory815.GetProtocol(mbTrans813)
    argvalue0 := driver.NewIDataFrameId()
    err817 := argvalue0.Read(context.Background(), jsProt816)
    if err817 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg818 := flag.Arg(2)
    mbTrans819 := thrift.NewTMemoryBufferLen(len(arg818))
    defer mbTrans819.Close()
    _, err820 := mbTrans819.WriteString(arg818)
    if err820 != nil {
      Usage()
      return
    }
    factory821 := thrift.NewTJSONProtocolFactory()
    jsProt822 := factory821.GetProtocol(mbTrans819)
    argvalue1 := rpc.NewISource()
    err823 := argvalue1.Read(context.Background(), jsProt822)
    if err823 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.FlatMapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapValues requires 2 args")
      flag.Usage()
    }
    arg824 := flag.Arg(1)
    mbTrans825 := thrift.NewTMemoryBufferLen(len(arg824))
    defer mbTrans825.Close()
    _, err826 := mbTrans825.WriteString(arg824)
    if err826 != nil {
      Usage()
      return
    }
    factory827 := thrift.NewTJSONProtocolFactory()
    jsProt828 := factory827.GetProtocol(mbTrans825)
    argvalue0 := driver.NewIDataFrameId()
    err829 := argvalue0.Read(context.Background(), jsProt828)
    if err829 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg830 := flag.Arg(2)
    mbTrans831 := thrift.NewTMemoryBufferLen(len(arg830))
    defer mbTrans831.Close()
    _, err832 := mbTrans831.WriteString(arg830)
    if err832 != nil {
      Usage()
      return
    }
    factory833 := thrift.NewTJSONProtocolFactory()
    jsProt834 := factory833.GetProtocol(mbTrans831)
    argvalue1 := rpc.NewISource()
    err835 := argvalue1.Read(context.Background(), jsProt834)
    if err835 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GroupByKey requires 1 args")
      flag.Usage()
    }
    arg836 := flag.Arg(1)
    mbTrans837 := thrift.NewTMemoryBufferLen(len(arg836))
    defer mbTrans837.Close()
    _, err838 := mbTrans837.WriteString(arg836)
    if err838 != nil {
      Usage()
      return
    }
    factory839 := thrift.NewTJSONProtocolFactory()
    jsProt840 := factory839.GetProtocol(mbTrans837)
    argvalue0 := driver.NewIDataFrameId()
    err841 := argvalue0.Read(context.Background(), jsProt840)
    if err841 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GroupByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2a requires 2 args")
      flag.Usage()
    }
    arg842 := flag.Arg(1)
    mbTrans843 := thrift.NewTMemoryBufferLen(len(arg842))
    defer mbTrans843.Close()
    _, err844 := mbTrans843.WriteString(arg842)
    if err844 != nil {
      Usage()
      return
    }
    factory845 := thrift.NewTJSONProtocolFactory()
    jsProt846 := factory845.GetProtocol(mbTrans843)
    argvalue0 := driver.NewIDataFrameId()
    err847 := argvalue0.Read(context.Background(), jsProt846)
    if err847 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err848 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err848 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2b requires 2 args")
      flag.Usage()
    }
    arg849 := flag.Arg(1)
    mbTrans850 := thrift.NewTMemoryBufferLen(len(arg849))
    defer mbTrans850.Close()
    _, err851 := mbTrans850.WriteString(arg849)
    if err851 != nil {
      Usage()
      return
    }
    factory852 := thrift.NewTJSONProtocolFactory()
    jsProt853 := factory852.GetProtocol(mbTrans850)
    argvalue0 := driver.NewIDataFrameId()
    err854 := argvalue0.Read(context.Background(), jsProt853)
    if err854 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg855 := flag.Arg(2)
    mbTrans856 := thrift.NewTMemoryBufferLen(len(arg855))
    defer mbTrans856.Close()
    _, err857 := mbTrans856.WriteString(arg855)
    if err857 != nil {
      Usage()
      return
    }
    factory858 := thrift.NewTJSONProtocolFactory()
    jsProt859 := factory858.GetProtocol(mbTrans856)
    argvalue1 := rpc.NewISource()
    err860 := argvalue1.Read(context.Background(), jsProt859)
    if err860 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupByKey3 requires 3 args")
      flag.Usage()
    }
    arg861 := flag.Arg(1)
    mbTrans862 := thrift.NewTMemoryBufferLen(len(arg861))
    defer mbTrans862.Close()
    _, err863 := mbTrans862.WriteString(arg861)
    if err863 != nil {
      Usage()
      return
    }
    factory864 := thrift.NewTJSONProtocolFactory()
    jsProt865 := factory864.GetProtocol(mbTrans862)
    argvalue0 := driver.NewIDataFrameId()
    err866 := argvalue0.Read(context.Background(), jsProt865)
    if err866 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err867 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err867 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg868 := flag.Arg(3)
    mbTrans869 := thrift.NewTMemoryBufferLen(len(arg868))
    defer mbTrans869.Close()
    _, err870 := mbTrans869.WriteString(arg868)
    if err870 != nil {
      Usage()
      return
    }
    factory871 := thrift.NewTJSONProtocolFactory()
    jsProt872 := factory871.GetProtocol(mbTrans869)
    argvalue2 := rpc.NewISource()
    err873 := argvalue2.Read(context.Background(), jsProt872)
    if err873 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupByKey3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReduceByKey requires 3 args")
      flag.Usage()
    }
    arg874 := flag.Arg(1)
    mbTrans875 := thrift.NewTMemoryBufferLen(len(arg874))
    defer mbTrans875.Close()
    _, err876 := mbTrans875.WriteString(arg874)
    if err876 != nil {
      Usage()
      return
    }
    factory877 := thrift.NewTJSONProtocolFactory()
    jsProt878 := factory877.GetProtocol(mbTrans875)
    argvalue0 := driver.NewIDataFrameId()
    err879 := argvalue0.Read(context.Background(), jsProt878)
    if err879 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg880 := flag.Arg(2)
    mbTrans881 := thrift.NewTMemoryBufferLen(len(arg880))
    defer mbTrans881.Close()
    _, err882 := mbTrans881.WriteString(arg880)
    if err882 != nil {
      Usage()
      return
    }
    factory883 := thrift.NewTJSONProtocolFactory()
    jsProt884 := factory883.GetProtocol(mbTrans881)
    argvalue1 := rpc.NewISource()
    err885 := argvalue1.Read(context.Background(), jsProt884)
    if err885 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.ReduceByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ReduceByKey4 requires 4 args")
      flag.Usage()
    }
    arg887 := flag.Arg(1)
    mbTrans888 := thrift.NewTMemoryBufferLen(len(arg887))
    defer mbTrans888.Close()
    _, err889 := mbTrans888.WriteString(arg887)
    if err889 != nil {
      Usage()
      return
    }
    factory890 := thrift.NewTJSONProtocolFactory()
    jsProt891 := factory890.GetProtocol(mbTrans888)
    argvalue0 := driver.NewIDataFrameId()
    err892 := argvalue0.Read(context.Background(), jsProt891)
    if err892 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg893 := flag.Arg(2)
    mbTrans894 := thrift.NewTMemoryBufferLen(len(arg893))
    defer mbTrans894.Close()
    _, err895 := mbTrans894.WriteString(arg893)
    if err895 != nil {
      Usage()
      return
    }
    factory896 := thrift.NewTJSONProtocolFactory()
    jsProt897 := factory896.GetProtocol(mbTrans894)
    argvalue1 := rpc.NewISource()
    err898 := argvalue1.Read(context.Background(), jsProt897)
    if err898 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err899 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err899 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.ReduceByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AggregateByKey requires 3 args")
      flag.Usage()
    }
    arg901 := flag.Arg(1)
    mbTrans902 := thrift.NewTMemoryBufferLen(len(arg901))
    defer mbTrans902.Close()
    _, err903 := mbTrans902.WriteString(arg901)
    if err903 != nil {
      Usage()
      return
    }
    factory904 := thrift.NewTJSONProtocolFactory()
    jsProt905 := factory904.GetProtocol(mbTrans902)
    argvalue0 := driver.NewIDataFrameId()
    err906 := argvalue0.Read(context.Background(), jsProt905)
    if err906 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg907 := flag.Arg(2)
    mbTrans908 := thrift.NewTMemoryBufferLen(len(arg907))
    defer mbTrans908.Close()
    _, err909 := mbTrans908.WriteString(arg907)
    if err909 != nil {
      Usage()
      return
    }
    factory910 := thrift.NewTJSONProtocolFactory()
    jsProt911 := factory910.GetProtocol(mbTrans908)
    argvalue1 := rpc.NewISource()
    err912 := argvalue1.Read(context.Background(), jsProt911)
    if err912 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg913 := flag.Arg(3)
    mbTrans914 := thrift.NewTMemoryBufferLen(len(arg913))
    defer mbTrans914.Close()
    _, err915 := mbTrans914.WriteString(arg913)
    if err915 != nil {
      Usage()
      return
    }
    factory916 := thrift.NewTJSONProtocolFactory()
    jsProt917 := factory916.GetProtocol(mbTrans914)
    argvalue2 := rpc.NewISource()
    err918 := argvalue2.Read(context.Background(), jsProt917)
    if err918 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AggregateByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey4a":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4a requires 4 args")
      flag.Usage()
    }
    arg919 := flag.Arg(1)
    mbTrans920 := thrift.NewTMemoryBufferLen(len(arg919))
    defer mbTrans920.Close()
    _, err921 := mbTrans920.WriteString(arg919)
    if err921 != nil {
      Usage()
      return
    }
    factory922 := thrift.NewTJSONProtocolFactory()
    jsProt923 := factory922.GetProtocol(mbTrans920)
    argvalue0 := driver.NewIDataFrameId()
    err924 := argvalue0.Read(context.Background(), jsProt923)
    if err924 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg925 := flag.Arg(2)
    mbTrans926 := thrift.NewTMemoryBufferLen(len(arg925))
    defer mbTrans926.Close()
    _, err927 := mbTrans926.WriteString(arg925)
    if err927 != nil {
      Usage()
      return
    }
    factory928 := thrift.NewTJSONProtocolFactory()
    jsProt929 := factory928.GetProtocol(mbTrans926)
    argvalue1 := rpc.NewISource()
    err930 := argvalue1.Read(context.Background(), jsProt929)
    if err930 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg931 := flag.Arg(3)
    mbTrans932 := thrift.NewTMemoryBufferLen(len(arg931))
    defer mbTrans932.Close()
    _, err933 := mbTrans932.WriteString(arg931)
    if err933 != nil {
      Usage()
      return
    }
    factory934 := thrift.NewTJSONProtocolFactory()
    jsProt935 := factory934.GetProtocol(mbTrans932)
    argvalue2 := rpc.NewISource()
    err936 := argvalue2.Read(context.Background(), jsProt935)
    if err936 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err937 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err937 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4a(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey4b":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4b requires 4 args")
      flag.Usage()
    }
    arg938 := flag.Arg(1)
    mbTrans939 := thrift.NewTMemoryBufferLen(len(arg938))
    defer mbTrans939.Close()
    _, err940 := mbTrans939.WriteString(arg938)
    if err940 != nil {
      Usage()
      return
    }
    factory941 := thrift.NewTJSONProtocolFactory()
    jsProt942 := factory941.GetProtocol(mbTrans939)
    argvalue0 := driver.NewIDataFrameId()
    err943 := argvalue0.Read(context.Background(), jsProt942)
    if err943 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg944 := flag.Arg(2)
    mbTrans945 := thrift.NewTMemoryBufferLen(len(arg944))
    defer mbTrans945.Close()
    _, err946 := mbTrans945.WriteString(arg944)
    if err946 != nil {
      Usage()
      return
    }
    factory947 := thrift.NewTJSONProtocolFactory()
    jsProt948 := factory947.GetProtocol(mbTrans945)
    argvalue1 := rpc.NewISource()
    err949 := argvalue1.Read(context.Background(), jsProt948)
    if err949 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg950 := flag.Arg(3)
    mbTrans951 := thrift.NewTMemoryBufferLen(len(arg950))
    defer mbTrans951.Close()
    _, err952 := mbTrans951.WriteString(arg950)
    if err952 != nil {
      Usage()
      return
    }
    factory953 := thrift.NewTJSONProtocolFactory()
    jsProt954 := factory953.GetProtocol(mbTrans951)
    argvalue2 := rpc.NewISource()
    err955 := argvalue2.Read(context.Background(), jsProt954)
    if err955 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg956 := flag.Arg(4)
    mbTrans957 := thrift.NewTMemoryBufferLen(len(arg956))
    defer mbTrans957.Close()
    _, err958 := mbTrans957.WriteString(arg956)
    if err958 != nil {
      Usage()
      return
    }
    factory959 := thrift.NewTJSONProtocolFactory()
    jsProt960 := factory959.GetProtocol(mbTrans957)
    argvalue3 := rpc.NewISource()
    err961 := argvalue3.Read(context.Background(), jsProt960)
    if err961 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4b(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AggregateByKey5 requires 5 args")
      flag.Usage()
    }
    arg962 := flag.Arg(1)
    mbTrans963 := thrift.NewTMemoryBufferLen(len(arg962))
    defer mbTrans963.Close()
    _, err964 := mbTrans963.WriteString(arg962)
    if err964 != nil {
      Usage()
      return
    }
    factory965 := thrift.NewTJSONProtocolFactory()
    jsProt966 := factory965.GetProtocol(mbTrans963)
    argvalue0 := driver.NewIDataFrameId()
    err967 := argvalue0.Read(context.Background(), jsProt966)
    if err967 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg968 := flag.Arg(2)
    mbTrans969 := thrift.NewTMemoryBufferLen(len(arg968))
    defer mbTrans969.Close()
    _, err970 := mbTrans969.WriteString(arg968)
    if err970 != nil {
      Usage()
      return
    }
    factory971 := thrift.NewTJSONProtocolFactory()
    jsProt972 := factory971.GetProtocol(mbTrans969)
    argvalue1 := rpc.NewISource()
    err973 := argvalue1.Read(context.Background(), jsProt972)
    if err973 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg974 := flag.Arg(3)
    mbTrans975 := thrift.NewTMemoryBufferLen(len(arg974))
    defer mbTrans975.Close()
    _, err976 := mbTrans975.WriteString(arg974)
    if err976 != nil {
      Usage()
      return
    }
    factory977 := thrift.NewTJSONProtocolFactory()
    jsProt978 := factory977.GetProtocol(mbTrans975)
    argvalue2 := rpc.NewISource()
    err979 := argvalue2.Read(context.Background(), jsProt978)
    if err979 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg980 := flag.Arg(4)
    mbTrans981 := thrift.NewTMemoryBufferLen(len(arg980))
    defer mbTrans981.Close()
    _, err982 := mbTrans981.WriteString(arg980)
    if err982 != nil {
      Usage()
      return
    }
    factory983 := thrift.NewTJSONProtocolFactory()
    jsProt984 := factory983.GetProtocol(mbTrans981)
    argvalue3 := rpc.NewISource()
    err985 := argvalue3.Read(context.Background(), jsProt984)
    if err985 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err986 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err986 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AggregateByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "foldByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FoldByKey requires 4 args")
      flag.Usage()
    }
    arg987 := flag.Arg(1)
    mbTrans988 := thrift.NewTMemoryBufferLen(len(arg987))
    defer mbTrans988.Close()
    _, err989 := mbTrans988.WriteString(arg987)
    if err989 != nil {
      Usage()
      return
    }
    factory990 := thrift.NewTJSONProtocolFactory()
    jsProt991 := factory990.GetProtocol(mbTrans988)
    argvalue0 := driver.NewIDataFrameId()
    err992 := argvalue0.Read(context.Background(), jsProt991)
    if err992 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg993 := flag.Arg(2)
    mbTrans994 := thrift.NewTMemoryBufferLen(len(arg993))
    defer mbTrans994.Close()
    _, err995 := mbTrans994.WriteString(arg993)
    if err995 != nil {
      Usage()
      return
    }
    factory996 := thrift.NewTJSONProtocolFactory()
    jsProt997 := factory996.GetProtocol(mbTrans994)
    argvalue1 := rpc.NewISource()
    err998 := argvalue1.Read(context.Background(), jsProt997)
    if err998 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg999 := flag.Arg(3)
    mbTrans1000 := thrift.NewTMemoryBufferLen(len(arg999))
    defer mbTrans1000.Close()
    _, err1001 := mbTrans1000.WriteString(arg999)
    if err1001 != nil {
      Usage()
      return
    }
    factory1002 := thrift.NewTJSONProtocolFactory()
    jsProt1003 := factory1002.GetProtocol(mbTrans1000)
    argvalue2 := rpc.NewISource()
    err1004 := argvalue2.Read(context.Background(), jsProt1003)
    if err1004 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.FoldByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "foldByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "FoldByKey5 requires 5 args")
      flag.Usage()
    }
    arg1006 := flag.Arg(1)
    mbTrans1007 := thrift.NewTMemoryBufferLen(len(arg1006))
    defer mbTrans1007.Close()
    _, err1008 := mbTrans1007.WriteString(arg1006)
    if err1008 != nil {
      Usage()
      return
    }
    factory1009 := thrift.NewTJSONProtocolFactory()
    jsProt1010 := factory1009.GetProtocol(mbTrans1007)
    argvalue0 := driver.NewIDataFrameId()
    err1011 := argvalue0.Read(context.Background(), jsProt1010)
    if err1011 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1012 := flag.Arg(2)
    mbTrans1013 := thrift.NewTMemoryBufferLen(len(arg1012))
    defer mbTrans1013.Close()
    _, err1014 := mbTrans1013.WriteString(arg1012)
    if err1014 != nil {
      Usage()
      return
    }
    factory1015 := thrift.NewTJSONProtocolFactory()
    jsProt1016 := factory1015.GetProtocol(mbTrans1013)
    argvalue1 := rpc.NewISource()
    err1017 := argvalue1.Read(context.Background(), jsProt1016)
    if err1017 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1018 := flag.Arg(3)
    mbTrans1019 := thrift.NewTMemoryBufferLen(len(arg1018))
    defer mbTrans1019.Close()
    _, err1020 := mbTrans1019.WriteString(arg1018)
    if err1020 != nil {
      Usage()
      return
    }
    factory1021 := thrift.NewTJSONProtocolFactory()
    jsProt1022 := factory1021.GetProtocol(mbTrans1019)
    argvalue2 := rpc.NewISource()
    err1023 := argvalue2.Read(context.Background(), jsProt1022)
    if err1023 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1024 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1024 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.FoldByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "sortByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey requires 2 args")
      flag.Usage()
    }
    arg1026 := flag.Arg(1)
    mbTrans1027 := thrift.NewTMemoryBufferLen(len(arg1026))
    defer mbTrans1027.Close()
    _, err1028 := mbTrans1027.WriteString(arg1026)
    if err1028 != nil {
      Usage()
      return
    }
    factory1029 := thrift.NewTJSONProtocolFactory()
    jsProt1030 := factory1029.GetProtocol(mbTrans1027)
    argvalue0 := driver.NewIDataFrameId()
    err1031 := argvalue0.Read(context.Background(), jsProt1030)
    if err1031 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3a requires 3 args")
      flag.Usage()
    }
    arg1033 := flag.Arg(1)
    mbTrans1034 := thrift.NewTMemoryBufferLen(len(arg1033))
    defer mbTrans1034.Close()
    _, err1035 := mbTrans1034.WriteString(arg1033)
    if err1035 != nil {
      Usage()
      return
    }
    factory1036 := thrift.NewTJSONProtocolFactory()
    jsProt1037 := factory1036.GetProtocol(mbTrans1034)
    argvalue0 := driver.NewIDataFrameId()
    err1038 := argvalue0.Read(context.Background(), jsProt1037)
    if err1038 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err1040 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1040 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortByKey3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3b requires 3 args")
      flag.Usage()
    }
    arg1041 := flag.Arg(1)
    mbTrans1042 := thrift.NewTMemoryBufferLen(len(arg1041))
    defer mbTrans1042.Close()
    _, err1043 := mbTrans1042.WriteString(arg1041)
    if err1043 != nil {
      Usage()
      return
    }
    factory1044 := thrift.NewTJSONProtocolFactory()
    jsProt1045 := factory1044.GetProtocol(mbTrans1042)
    argvalue0 := driver.NewIDataFrameId()
    err1046 := argvalue0.Read(context.Background(), jsProt1045)
    if err1046 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1047 := flag.Arg(2)
    mbTrans1048 := thrift.NewTMemoryBufferLen(len(arg1047))
    defer mbTrans1048.Close()
    _, err1049 := mbTrans1048.WriteString(arg1047)
    if err1049 != nil {
      Usage()
      return
    }
    factory1050 := thrift.NewTJSONProtocolFactory()
    jsProt1051 := factory1050.GetProtocol(mbTrans1048)
    argvalue1 := rpc.NewISource()
    err1052 := argvalue1.Read(context.Background(), jsProt1051)
    if err1052 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortByKey3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortByKey4 requires 4 args")
      flag.Usage()
    }
    arg1054 := flag.Arg(1)
    mbTrans1055 := thrift.NewTMemoryBufferLen(len(arg1054))
    defer mbTrans1055.Close()
    _, err1056 := mbTrans1055.WriteString(arg1054)
    if err1056 != nil {
      Usage()
      return
    }
    factory1057 := thrift.NewTJSONProtocolFactory()
    jsProt1058 := factory1057.GetProtocol(mbTrans1055)
    argvalue0 := driver.NewIDataFrameId()
    err1059 := argvalue0.Read(context.Background(), jsProt1058)
    if err1059 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1060 := flag.Arg(2)
    mbTrans1061 := thrift.NewTMemoryBufferLen(len(arg1060))
    defer mbTrans1061.Close()
    _, err1062 := mbTrans1061.WriteString(arg1060)
    if err1062 != nil {
      Usage()
      return
    }
    factory1063 := thrift.NewTJSONProtocolFactory()
    jsProt1064 := factory1063.GetProtocol(mbTrans1061)
    argvalue1 := rpc.NewISource()
    err1065 := argvalue1.Read(context.Background(), jsProt1064)
    if err1065 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err1067 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1067 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "keys":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Keys requires 2 args")
      flag.Usage()
    }
    arg1068 := flag.Arg(1)
    mbTrans1069 := thrift.NewTMemoryBufferLen(len(arg1068))
    defer mbTrans1069.Close()
    _, err1070 := mbTrans1069.WriteString(arg1068)
    if err1070 != nil {
      Usage()
      return
    }
    factory1071 := thrift.NewTJSONProtocolFactory()
    jsProt1072 := factory1071.GetProtocol(mbTrans1069)
    argvalue0 := driver.NewIDataFrameId()
    err1073 := argvalue0.Read(context.Background(), jsProt1072)
    if err1073 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1074 := flag.Arg(2)
    mbTrans1075 := thrift.NewTMemoryBufferLen(len(arg1074))
    defer mbTrans1075.Close()
    _, err1076 := mbTrans1075.WriteString(arg1074)
    if err1076 != nil {
      Usage()
      return
    }
    factory1077 := thrift.NewTJSONProtocolFactory()
    jsProt1078 := factory1077.GetProtocol(mbTrans1075)
    argvalue1 := rpc.NewISource()
    err1079 := argvalue1.Read(context.Background(), jsProt1078)
    if err1079 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Keys(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "values":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Values requires 2 args")
      flag.Usage()
    }
    arg1080 := flag.Arg(1)
    mbTrans1081 := thrift.NewTMemoryBufferLen(len(arg1080))
    defer mbTrans1081.Close()
    _, err1082 := mbTrans1081.WriteString(arg1080)
    if err1082 != nil {
      Usage()
      return
    }
    factory1083 := thrift.NewTJSONProtocolFactory()
    jsProt1084 := factory1083.GetProtocol(mbTrans1081)
    argvalue0 := driver.NewIDataFrameId()
    err1085 := argvalue0.Read(context.Background(), jsProt1084)
    if err1085 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1086 := flag.Arg(2)
    mbTrans1087 := thrift.NewTMemoryBufferLen(len(arg1086))
    defer mbTrans1087.Close()
    _, err1088 := mbTrans1087.WriteString(arg1086)
    if err1088 != nil {
      Usage()
      return
    }
    factory1089 := thrift.NewTJSONProtocolFactory()
    jsProt1090 := factory1089.GetProtocol(mbTrans1087)
    argvalue1 := rpc.NewISource()
    err1091 := argvalue1.Read(context.Background(), jsProt1090)
    if err1091 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Values(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sampleByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SampleByKey requires 4 args")
      flag.Usage()
    }
    arg1092 := flag.Arg(1)
    mbTrans1093 := thrift.NewTMemoryBufferLen(len(arg1092))
    defer mbTrans1093.Close()
    _, err1094 := mbTrans1093.WriteString(arg1092)
    if err1094 != nil {
      Usage()
      return
    }
    factory1095 := thrift.NewTJSONProtocolFactory()
    jsProt1096 := factory1095.GetProtocol(mbTrans1093)
    argvalue0 := driver.NewIDataFrameId()
    err1097 := argvalue0.Read(context.Background(), jsProt1096)
    if err1097 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    arg1099 := flag.Arg(3)
    mbTrans1100 := thrift.NewTMemoryBufferLen(len(arg1099))
    defer mbTrans1100.Close()
    _, err1101 := mbTrans1100.WriteString(arg1099)
    if err1101 != nil {
      Usage()
      return
    }
    factory1102 := thrift.NewTJSONProtocolFactory()
    jsProt1103 := factory1102.GetProtocol(mbTrans1100)
    argvalue2 := rpc.NewISource()
    err1104 := argvalue2.Read(context.Background(), jsProt1103)
    if err1104 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err1105 := (strconv.Atoi(flag.Arg(4)))
    if err1105 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SampleByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "countByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByKey requires 2 args")
      flag.Usage()
    }
    arg1106 := flag.Arg(1)
    mbTrans1107 := thrift.NewTMemoryBufferLen(len(arg1106))
    defer mbTrans1107.Close()
    _, err1108 := mbTrans1107.WriteString(arg1106)
    if err1108 != nil {
      Usage()
      return
    }
    factory1109 := thrift.NewTJSONProtocolFactory()
    jsProt1110 := factory1109.GetProtocol(mbTrans1107)
    argvalue0 := driver.NewIDataFrameId()
    err1111 := argvalue0.Read(context.Background(), jsProt1110)
    if err1111 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1112 := flag.Arg(2)
    mbTrans1113 := thrift.NewTMemoryBufferLen(len(arg1112))
    defer mbTrans1113.Close()
    _, err1114 := mbTrans1113.WriteString(arg1112)
    if err1114 != nil {
      Usage()
      return
    }
    factory1115 := thrift.NewTJSONProtocolFactory()
    jsProt1116 := factory1115.GetProtocol(mbTrans1113)
    argvalue1 := rpc.NewISource()
    err1117 := argvalue1.Read(context.Background(), jsProt1116)
    if err1117 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "countByValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByValue requires 2 args")
      flag.Usage()
    }
    arg1118 := flag.Arg(1)
    mbTrans1119 := thrift.NewTMemoryBufferLen(len(arg1118))
    defer mbTrans1119.Close()
    _, err1120 := mbTrans1119.WriteString(arg1118)
    if err1120 != nil {
      Usage()
      return
    }
    factory1121 := thrift.NewTJSONProtocolFactory()
    jsProt1122 := factory1121.GetProtocol(mbTrans1119)
    argvalue0 := driver.NewIDataFrameId()
    err1123 := argvalue0.Read(context.Background(), jsProt1122)
    if err1123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1124 := flag.Arg(2)
    mbTrans1125 := thrift.NewTMemoryBufferLen(len(arg1124))
    defer mbTrans1125.Close()
    _, err1126 := mbTrans1125.WriteString(arg1124)
    if err1126 != nil {
      Usage()
      return
    }
    factory1127 := thrift.NewTJSONProtocolFactory()
    jsProt1128 := factory1127.GetProtocol(mbTrans1125)
    argvalue1 := rpc.NewISource()
    err1129 := argvalue1.Read(context.Background(), jsProt1128)
    if err1129 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
