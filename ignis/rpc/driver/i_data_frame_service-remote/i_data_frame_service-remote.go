// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/driver"
)

var _ = rpc.GoUnusedProtection__
var _ = driver.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void setName(IDataFrameId id, string name)")
  fmt.Fprintln(os.Stderr, "  void persist(IDataFrameId id, i8 level)")
  fmt.Fprintln(os.Stderr, "  void cache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void unpersist(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void uncache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  i64 partitions(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void saveAsObjectFile(IDataFrameId id, string path, i8 compression)")
  fmt.Fprintln(os.Stderr, "  void saveAsTextFile(IDataFrameId id, string path)")
  fmt.Fprintln(os.Stderr, "  void saveAsJsonFile(IDataFrameId id, string path, bool pretty)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId repartition(IDataFrameId id, i64 numPartitions, bool preserveOrdering, bool global_)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionByRandom(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionByHash(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionBy(IDataFrameId id, ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId map_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId filter(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatmap(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId keyBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitions(IDataFrameId id, ISource src, bool preservesPartitioning)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitionsWithIndex(IDataFrameId id, ISource src, bool preservesPartitioning)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutorTo(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy2(IDataFrameId id, ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort2(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy3(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId union_(IDataFrameId id, IDataFrameId other, bool preserveOrder)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId union4(IDataFrameId id, IDataFrameId other, bool preserveOrder, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join(IDataFrameId id, IDataFrameId other)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join3a(IDataFrameId id, IDataFrameId other, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join3b(IDataFrameId id, IDataFrameId other, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join4(IDataFrameId id, IDataFrameId other, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct2a(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct2b(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct3(IDataFrameId id, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  i64 reduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeReduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 collect(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 aggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeAggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 fold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeFold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 take(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  void foreach_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachPartition(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  i64 top(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 top4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sample(IDataFrameId id, bool withReplacement, double fraction, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 takeSample(IDataFrameId id, bool withReplacement, i64 num, i32 seed, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 count(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  i64 max(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 max3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatMapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2a(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2b(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey3(IDataFrameId id, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey(IDataFrameId id, ISource src, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey4(IDataFrameId id, ISource src, i64 numPartitions, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey(IDataFrameId id, ISource zero, ISource seqOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4a(IDataFrameId id, ISource zero, ISource seqOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4b(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey5(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey(IDataFrameId id, ISource zero, ISource src, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey5(IDataFrameId id, ISource zero, ISource src, i64 numPartitions, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3a(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3b(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey4(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  i64 keys(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 values(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sampleByKey(IDataFrameId id, bool withReplacement, ISource fractions, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 countByKey(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 countByValue(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := driver.NewIDataFrameServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetName requires 2 args")
      flag.Usage()
    }
    arg248 := flag.Arg(1)
    mbTrans249 := thrift.NewTMemoryBufferLen(len(arg248))
    defer mbTrans249.Close()
    _, err250 := mbTrans249.WriteString(arg248)
    if err250 != nil {
      Usage()
      return
    }
    factory251 := thrift.NewTJSONProtocolFactory()
    jsProt252 := factory251.GetProtocol(mbTrans249)
    argvalue0 := driver.NewIDataFrameId()
    err253 := argvalue0.Read(context.Background(), jsProt252)
    if err253 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "persist":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Persist requires 2 args")
      flag.Usage()
    }
    arg255 := flag.Arg(1)
    mbTrans256 := thrift.NewTMemoryBufferLen(len(arg255))
    defer mbTrans256.Close()
    _, err257 := mbTrans256.WriteString(arg255)
    if err257 != nil {
      Usage()
      return
    }
    factory258 := thrift.NewTJSONProtocolFactory()
    jsProt259 := factory258.GetProtocol(mbTrans256)
    argvalue0 := driver.NewIDataFrameId()
    err260 := argvalue0.Read(context.Background(), jsProt259)
    if err260 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err261 := (strconv.Atoi(flag.Arg(2)))
    if err261 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    fmt.Print(client.Persist(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Cache requires 1 args")
      flag.Usage()
    }
    arg262 := flag.Arg(1)
    mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
    defer mbTrans263.Close()
    _, err264 := mbTrans263.WriteString(arg262)
    if err264 != nil {
      Usage()
      return
    }
    factory265 := thrift.NewTJSONProtocolFactory()
    jsProt266 := factory265.GetProtocol(mbTrans263)
    argvalue0 := driver.NewIDataFrameId()
    err267 := argvalue0.Read(context.Background(), jsProt266)
    if err267 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Cache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unpersist":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unpersist requires 1 args")
      flag.Usage()
    }
    arg268 := flag.Arg(1)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue0 := driver.NewIDataFrameId()
    err273 := argvalue0.Read(context.Background(), jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unpersist(context.Background(), value0))
    fmt.Print("\n")
    break
  case "uncache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Uncache requires 1 args")
      flag.Usage()
    }
    arg274 := flag.Arg(1)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil {
      Usage()
      return
    }
    factory277 := thrift.NewTJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    argvalue0 := driver.NewIDataFrameId()
    err279 := argvalue0.Read(context.Background(), jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Uncache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Partitions requires 1 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := driver.NewIDataFrameId()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Partitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "saveAsObjectFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsObjectFile requires 3 args")
      flag.Usage()
    }
    arg286 := flag.Arg(1)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue0 := driver.NewIDataFrameId()
    err291 := argvalue0.Read(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err293 := (strconv.Atoi(flag.Arg(3)))
    if err293 != nil {
      Usage()
      return
    }
    argvalue2 := int8(tmp2)
    value2 := argvalue2
    fmt.Print(client.SaveAsObjectFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "saveAsTextFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SaveAsTextFile requires 2 args")
      flag.Usage()
    }
    arg294 := flag.Arg(1)
    mbTrans295 := thrift.NewTMemoryBufferLen(len(arg294))
    defer mbTrans295.Close()
    _, err296 := mbTrans295.WriteString(arg294)
    if err296 != nil {
      Usage()
      return
    }
    factory297 := thrift.NewTJSONProtocolFactory()
    jsProt298 := factory297.GetProtocol(mbTrans295)
    argvalue0 := driver.NewIDataFrameId()
    err299 := argvalue0.Read(context.Background(), jsProt298)
    if err299 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SaveAsTextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "saveAsJsonFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsJsonFile requires 3 args")
      flag.Usage()
    }
    arg301 := flag.Arg(1)
    mbTrans302 := thrift.NewTMemoryBufferLen(len(arg301))
    defer mbTrans302.Close()
    _, err303 := mbTrans302.WriteString(arg301)
    if err303 != nil {
      Usage()
      return
    }
    factory304 := thrift.NewTJSONProtocolFactory()
    jsProt305 := factory304.GetProtocol(mbTrans302)
    argvalue0 := driver.NewIDataFrameId()
    err306 := argvalue0.Read(context.Background(), jsProt305)
    if err306 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SaveAsJsonFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "repartition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Repartition requires 4 args")
      flag.Usage()
    }
    arg309 := flag.Arg(1)
    mbTrans310 := thrift.NewTMemoryBufferLen(len(arg309))
    defer mbTrans310.Close()
    _, err311 := mbTrans310.WriteString(arg309)
    if err311 != nil {
      Usage()
      return
    }
    factory312 := thrift.NewTJSONProtocolFactory()
    jsProt313 := factory312.GetProtocol(mbTrans310)
    argvalue0 := driver.NewIDataFrameId()
    err314 := argvalue0.Read(context.Background(), jsProt313)
    if err314 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err315 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err315 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.Repartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "partitionByRandom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionByRandom requires 2 args")
      flag.Usage()
    }
    arg318 := flag.Arg(1)
    mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
    defer mbTrans319.Close()
    _, err320 := mbTrans319.WriteString(arg318)
    if err320 != nil {
      Usage()
      return
    }
    factory321 := thrift.NewTJSONProtocolFactory()
    jsProt322 := factory321.GetProtocol(mbTrans319)
    argvalue0 := driver.NewIDataFrameId()
    err323 := argvalue0.Read(context.Background(), jsProt322)
    if err323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err324 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err324 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionByRandom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionByHash":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionByHash requires 2 args")
      flag.Usage()
    }
    arg325 := flag.Arg(1)
    mbTrans326 := thrift.NewTMemoryBufferLen(len(arg325))
    defer mbTrans326.Close()
    _, err327 := mbTrans326.WriteString(arg325)
    if err327 != nil {
      Usage()
      return
    }
    factory328 := thrift.NewTJSONProtocolFactory()
    jsProt329 := factory328.GetProtocol(mbTrans326)
    argvalue0 := driver.NewIDataFrameId()
    err330 := argvalue0.Read(context.Background(), jsProt329)
    if err330 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err331 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err331 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionByHash(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionBy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionBy requires 3 args")
      flag.Usage()
    }
    arg332 := flag.Arg(1)
    mbTrans333 := thrift.NewTMemoryBufferLen(len(arg332))
    defer mbTrans333.Close()
    _, err334 := mbTrans333.WriteString(arg332)
    if err334 != nil {
      Usage()
      return
    }
    factory335 := thrift.NewTJSONProtocolFactory()
    jsProt336 := factory335.GetProtocol(mbTrans333)
    argvalue0 := driver.NewIDataFrameId()
    err337 := argvalue0.Read(context.Background(), jsProt336)
    if err337 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg338 := flag.Arg(2)
    mbTrans339 := thrift.NewTMemoryBufferLen(len(arg338))
    defer mbTrans339.Close()
    _, err340 := mbTrans339.WriteString(arg338)
    if err340 != nil {
      Usage()
      return
    }
    factory341 := thrift.NewTJSONProtocolFactory()
    jsProt342 := factory341.GetProtocol(mbTrans339)
    argvalue1 := rpc.NewISource()
    err343 := argvalue1.Read(context.Background(), jsProt342)
    if err343 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err344 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err344 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionBy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "map_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Map_ requires 2 args")
      flag.Usage()
    }
    arg345 := flag.Arg(1)
    mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
    defer mbTrans346.Close()
    _, err347 := mbTrans346.WriteString(arg345)
    if err347 != nil {
      Usage()
      return
    }
    factory348 := thrift.NewTJSONProtocolFactory()
    jsProt349 := factory348.GetProtocol(mbTrans346)
    argvalue0 := driver.NewIDataFrameId()
    err350 := argvalue0.Read(context.Background(), jsProt349)
    if err350 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg351 := flag.Arg(2)
    mbTrans352 := thrift.NewTMemoryBufferLen(len(arg351))
    defer mbTrans352.Close()
    _, err353 := mbTrans352.WriteString(arg351)
    if err353 != nil {
      Usage()
      return
    }
    factory354 := thrift.NewTJSONProtocolFactory()
    jsProt355 := factory354.GetProtocol(mbTrans352)
    argvalue1 := rpc.NewISource()
    err356 := argvalue1.Read(context.Background(), jsProt355)
    if err356 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Map_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "filter":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Filter requires 2 args")
      flag.Usage()
    }
    arg357 := flag.Arg(1)
    mbTrans358 := thrift.NewTMemoryBufferLen(len(arg357))
    defer mbTrans358.Close()
    _, err359 := mbTrans358.WriteString(arg357)
    if err359 != nil {
      Usage()
      return
    }
    factory360 := thrift.NewTJSONProtocolFactory()
    jsProt361 := factory360.GetProtocol(mbTrans358)
    argvalue0 := driver.NewIDataFrameId()
    err362 := argvalue0.Read(context.Background(), jsProt361)
    if err362 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg363 := flag.Arg(2)
    mbTrans364 := thrift.NewTMemoryBufferLen(len(arg363))
    defer mbTrans364.Close()
    _, err365 := mbTrans364.WriteString(arg363)
    if err365 != nil {
      Usage()
      return
    }
    factory366 := thrift.NewTJSONProtocolFactory()
    jsProt367 := factory366.GetProtocol(mbTrans364)
    argvalue1 := rpc.NewISource()
    err368 := argvalue1.Read(context.Background(), jsProt367)
    if err368 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Filter(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "flatmap":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Flatmap requires 2 args")
      flag.Usage()
    }
    arg369 := flag.Arg(1)
    mbTrans370 := thrift.NewTMemoryBufferLen(len(arg369))
    defer mbTrans370.Close()
    _, err371 := mbTrans370.WriteString(arg369)
    if err371 != nil {
      Usage()
      return
    }
    factory372 := thrift.NewTJSONProtocolFactory()
    jsProt373 := factory372.GetProtocol(mbTrans370)
    argvalue0 := driver.NewIDataFrameId()
    err374 := argvalue0.Read(context.Background(), jsProt373)
    if err374 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg375 := flag.Arg(2)
    mbTrans376 := thrift.NewTMemoryBufferLen(len(arg375))
    defer mbTrans376.Close()
    _, err377 := mbTrans376.WriteString(arg375)
    if err377 != nil {
      Usage()
      return
    }
    factory378 := thrift.NewTJSONProtocolFactory()
    jsProt379 := factory378.GetProtocol(mbTrans376)
    argvalue1 := rpc.NewISource()
    err380 := argvalue1.Read(context.Background(), jsProt379)
    if err380 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Flatmap(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "keyBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "KeyBy requires 2 args")
      flag.Usage()
    }
    arg381 := flag.Arg(1)
    mbTrans382 := thrift.NewTMemoryBufferLen(len(arg381))
    defer mbTrans382.Close()
    _, err383 := mbTrans382.WriteString(arg381)
    if err383 != nil {
      Usage()
      return
    }
    factory384 := thrift.NewTJSONProtocolFactory()
    jsProt385 := factory384.GetProtocol(mbTrans382)
    argvalue0 := driver.NewIDataFrameId()
    err386 := argvalue0.Read(context.Background(), jsProt385)
    if err386 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg387 := flag.Arg(2)
    mbTrans388 := thrift.NewTMemoryBufferLen(len(arg387))
    defer mbTrans388.Close()
    _, err389 := mbTrans388.WriteString(arg387)
    if err389 != nil {
      Usage()
      return
    }
    factory390 := thrift.NewTJSONProtocolFactory()
    jsProt391 := factory390.GetProtocol(mbTrans388)
    argvalue1 := rpc.NewISource()
    err392 := argvalue1.Read(context.Background(), jsProt391)
    if err392 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.KeyBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapPartitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MapPartitions requires 3 args")
      flag.Usage()
    }
    arg393 := flag.Arg(1)
    mbTrans394 := thrift.NewTMemoryBufferLen(len(arg393))
    defer mbTrans394.Close()
    _, err395 := mbTrans394.WriteString(arg393)
    if err395 != nil {
      Usage()
      return
    }
    factory396 := thrift.NewTJSONProtocolFactory()
    jsProt397 := factory396.GetProtocol(mbTrans394)
    argvalue0 := driver.NewIDataFrameId()
    err398 := argvalue0.Read(context.Background(), jsProt397)
    if err398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg399 := flag.Arg(2)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue1 := rpc.NewISource()
    err404 := argvalue1.Read(context.Background(), jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.MapPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "mapPartitionsWithIndex":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MapPartitionsWithIndex requires 3 args")
      flag.Usage()
    }
    arg406 := flag.Arg(1)
    mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
    defer mbTrans407.Close()
    _, err408 := mbTrans407.WriteString(arg406)
    if err408 != nil {
      Usage()
      return
    }
    factory409 := thrift.NewTJSONProtocolFactory()
    jsProt410 := factory409.GetProtocol(mbTrans407)
    argvalue0 := driver.NewIDataFrameId()
    err411 := argvalue0.Read(context.Background(), jsProt410)
    if err411 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg412 := flag.Arg(2)
    mbTrans413 := thrift.NewTMemoryBufferLen(len(arg412))
    defer mbTrans413.Close()
    _, err414 := mbTrans413.WriteString(arg412)
    if err414 != nil {
      Usage()
      return
    }
    factory415 := thrift.NewTJSONProtocolFactory()
    jsProt416 := factory415.GetProtocol(mbTrans413)
    argvalue1 := rpc.NewISource()
    err417 := argvalue1.Read(context.Background(), jsProt416)
    if err417 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.MapPartitionsWithIndex(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "mapExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutor requires 2 args")
      flag.Usage()
    }
    arg419 := flag.Arg(1)
    mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
    defer mbTrans420.Close()
    _, err421 := mbTrans420.WriteString(arg419)
    if err421 != nil {
      Usage()
      return
    }
    factory422 := thrift.NewTJSONProtocolFactory()
    jsProt423 := factory422.GetProtocol(mbTrans420)
    argvalue0 := driver.NewIDataFrameId()
    err424 := argvalue0.Read(context.Background(), jsProt423)
    if err424 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg425 := flag.Arg(2)
    mbTrans426 := thrift.NewTMemoryBufferLen(len(arg425))
    defer mbTrans426.Close()
    _, err427 := mbTrans426.WriteString(arg425)
    if err427 != nil {
      Usage()
      return
    }
    factory428 := thrift.NewTJSONProtocolFactory()
    jsProt429 := factory428.GetProtocol(mbTrans426)
    argvalue1 := rpc.NewISource()
    err430 := argvalue1.Read(context.Background(), jsProt429)
    if err430 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapExecutorTo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutorTo requires 2 args")
      flag.Usage()
    }
    arg431 := flag.Arg(1)
    mbTrans432 := thrift.NewTMemoryBufferLen(len(arg431))
    defer mbTrans432.Close()
    _, err433 := mbTrans432.WriteString(arg431)
    if err433 != nil {
      Usage()
      return
    }
    factory434 := thrift.NewTJSONProtocolFactory()
    jsProt435 := factory434.GetProtocol(mbTrans432)
    argvalue0 := driver.NewIDataFrameId()
    err436 := argvalue0.Read(context.Background(), jsProt435)
    if err436 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg437 := flag.Arg(2)
    mbTrans438 := thrift.NewTMemoryBufferLen(len(arg437))
    defer mbTrans438.Close()
    _, err439 := mbTrans438.WriteString(arg437)
    if err439 != nil {
      Usage()
      return
    }
    factory440 := thrift.NewTJSONProtocolFactory()
    jsProt441 := factory440.GetProtocol(mbTrans438)
    argvalue1 := rpc.NewISource()
    err442 := argvalue1.Read(context.Background(), jsProt441)
    if err442 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutorTo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupBy requires 2 args")
      flag.Usage()
    }
    arg443 := flag.Arg(1)
    mbTrans444 := thrift.NewTMemoryBufferLen(len(arg443))
    defer mbTrans444.Close()
    _, err445 := mbTrans444.WriteString(arg443)
    if err445 != nil {
      Usage()
      return
    }
    factory446 := thrift.NewTJSONProtocolFactory()
    jsProt447 := factory446.GetProtocol(mbTrans444)
    argvalue0 := driver.NewIDataFrameId()
    err448 := argvalue0.Read(context.Background(), jsProt447)
    if err448 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg449 := flag.Arg(2)
    mbTrans450 := thrift.NewTMemoryBufferLen(len(arg449))
    defer mbTrans450.Close()
    _, err451 := mbTrans450.WriteString(arg449)
    if err451 != nil {
      Usage()
      return
    }
    factory452 := thrift.NewTJSONProtocolFactory()
    jsProt453 := factory452.GetProtocol(mbTrans450)
    argvalue1 := rpc.NewISource()
    err454 := argvalue1.Read(context.Background(), jsProt453)
    if err454 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupBy2 requires 3 args")
      flag.Usage()
    }
    arg455 := flag.Arg(1)
    mbTrans456 := thrift.NewTMemoryBufferLen(len(arg455))
    defer mbTrans456.Close()
    _, err457 := mbTrans456.WriteString(arg455)
    if err457 != nil {
      Usage()
      return
    }
    factory458 := thrift.NewTJSONProtocolFactory()
    jsProt459 := factory458.GetProtocol(mbTrans456)
    argvalue0 := driver.NewIDataFrameId()
    err460 := argvalue0.Read(context.Background(), jsProt459)
    if err460 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg461 := flag.Arg(2)
    mbTrans462 := thrift.NewTMemoryBufferLen(len(arg461))
    defer mbTrans462.Close()
    _, err463 := mbTrans462.WriteString(arg461)
    if err463 != nil {
      Usage()
      return
    }
    factory464 := thrift.NewTJSONProtocolFactory()
    jsProt465 := factory464.GetProtocol(mbTrans462)
    argvalue1 := rpc.NewISource()
    err466 := argvalue1.Read(context.Background(), jsProt465)
    if err466 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err467 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err467 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupBy2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sort requires 2 args")
      flag.Usage()
    }
    arg468 := flag.Arg(1)
    mbTrans469 := thrift.NewTMemoryBufferLen(len(arg468))
    defer mbTrans469.Close()
    _, err470 := mbTrans469.WriteString(arg468)
    if err470 != nil {
      Usage()
      return
    }
    factory471 := thrift.NewTJSONProtocolFactory()
    jsProt472 := factory471.GetProtocol(mbTrans469)
    argvalue0 := driver.NewIDataFrameId()
    err473 := argvalue0.Read(context.Background(), jsProt472)
    if err473 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.Sort(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sort2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Sort2 requires 3 args")
      flag.Usage()
    }
    arg475 := flag.Arg(1)
    mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
    defer mbTrans476.Close()
    _, err477 := mbTrans476.WriteString(arg475)
    if err477 != nil {
      Usage()
      return
    }
    factory478 := thrift.NewTJSONProtocolFactory()
    jsProt479 := factory478.GetProtocol(mbTrans476)
    argvalue0 := driver.NewIDataFrameId()
    err480 := argvalue0.Read(context.Background(), jsProt479)
    if err480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err482 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err482 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Sort2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortBy requires 3 args")
      flag.Usage()
    }
    arg483 := flag.Arg(1)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil {
      Usage()
      return
    }
    factory486 := thrift.NewTJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    argvalue0 := driver.NewIDataFrameId()
    err488 := argvalue0.Read(context.Background(), jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg489 := flag.Arg(2)
    mbTrans490 := thrift.NewTMemoryBufferLen(len(arg489))
    defer mbTrans490.Close()
    _, err491 := mbTrans490.WriteString(arg489)
    if err491 != nil {
      Usage()
      return
    }
    factory492 := thrift.NewTJSONProtocolFactory()
    jsProt493 := factory492.GetProtocol(mbTrans490)
    argvalue1 := rpc.NewISource()
    err494 := argvalue1.Read(context.Background(), jsProt493)
    if err494 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortBy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy3":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortBy3 requires 4 args")
      flag.Usage()
    }
    arg496 := flag.Arg(1)
    mbTrans497 := thrift.NewTMemoryBufferLen(len(arg496))
    defer mbTrans497.Close()
    _, err498 := mbTrans497.WriteString(arg496)
    if err498 != nil {
      Usage()
      return
    }
    factory499 := thrift.NewTJSONProtocolFactory()
    jsProt500 := factory499.GetProtocol(mbTrans497)
    argvalue0 := driver.NewIDataFrameId()
    err501 := argvalue0.Read(context.Background(), jsProt500)
    if err501 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg502 := flag.Arg(2)
    mbTrans503 := thrift.NewTMemoryBufferLen(len(arg502))
    defer mbTrans503.Close()
    _, err504 := mbTrans503.WriteString(arg502)
    if err504 != nil {
      Usage()
      return
    }
    factory505 := thrift.NewTJSONProtocolFactory()
    jsProt506 := factory505.GetProtocol(mbTrans503)
    argvalue1 := rpc.NewISource()
    err507 := argvalue1.Read(context.Background(), jsProt506)
    if err507 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err509 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err509 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortBy3(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "union_":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Union_ requires 3 args")
      flag.Usage()
    }
    arg510 := flag.Arg(1)
    mbTrans511 := thrift.NewTMemoryBufferLen(len(arg510))
    defer mbTrans511.Close()
    _, err512 := mbTrans511.WriteString(arg510)
    if err512 != nil {
      Usage()
      return
    }
    factory513 := thrift.NewTJSONProtocolFactory()
    jsProt514 := factory513.GetProtocol(mbTrans511)
    argvalue0 := driver.NewIDataFrameId()
    err515 := argvalue0.Read(context.Background(), jsProt514)
    if err515 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg516 := flag.Arg(2)
    mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
    defer mbTrans517.Close()
    _, err518 := mbTrans517.WriteString(arg516)
    if err518 != nil {
      Usage()
      return
    }
    factory519 := thrift.NewTJSONProtocolFactory()
    jsProt520 := factory519.GetProtocol(mbTrans517)
    argvalue1 := driver.NewIDataFrameId()
    err521 := argvalue1.Read(context.Background(), jsProt520)
    if err521 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.Union_(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "union4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Union4 requires 4 args")
      flag.Usage()
    }
    arg523 := flag.Arg(1)
    mbTrans524 := thrift.NewTMemoryBufferLen(len(arg523))
    defer mbTrans524.Close()
    _, err525 := mbTrans524.WriteString(arg523)
    if err525 != nil {
      Usage()
      return
    }
    factory526 := thrift.NewTJSONProtocolFactory()
    jsProt527 := factory526.GetProtocol(mbTrans524)
    argvalue0 := driver.NewIDataFrameId()
    err528 := argvalue0.Read(context.Background(), jsProt527)
    if err528 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg529 := flag.Arg(2)
    mbTrans530 := thrift.NewTMemoryBufferLen(len(arg529))
    defer mbTrans530.Close()
    _, err531 := mbTrans530.WriteString(arg529)
    if err531 != nil {
      Usage()
      return
    }
    factory532 := thrift.NewTJSONProtocolFactory()
    jsProt533 := factory532.GetProtocol(mbTrans530)
    argvalue1 := driver.NewIDataFrameId()
    err534 := argvalue1.Read(context.Background(), jsProt533)
    if err534 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg536 := flag.Arg(4)
    mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
    defer mbTrans537.Close()
    _, err538 := mbTrans537.WriteString(arg536)
    if err538 != nil {
      Usage()
      return
    }
    factory539 := thrift.NewTJSONProtocolFactory()
    jsProt540 := factory539.GetProtocol(mbTrans537)
    argvalue3 := rpc.NewISource()
    err541 := argvalue3.Read(context.Background(), jsProt540)
    if err541 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Union4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "join":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Join requires 2 args")
      flag.Usage()
    }
    arg542 := flag.Arg(1)
    mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
    defer mbTrans543.Close()
    _, err544 := mbTrans543.WriteString(arg542)
    if err544 != nil {
      Usage()
      return
    }
    factory545 := thrift.NewTJSONProtocolFactory()
    jsProt546 := factory545.GetProtocol(mbTrans543)
    argvalue0 := driver.NewIDataFrameId()
    err547 := argvalue0.Read(context.Background(), jsProt546)
    if err547 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg548 := flag.Arg(2)
    mbTrans549 := thrift.NewTMemoryBufferLen(len(arg548))
    defer mbTrans549.Close()
    _, err550 := mbTrans549.WriteString(arg548)
    if err550 != nil {
      Usage()
      return
    }
    factory551 := thrift.NewTJSONProtocolFactory()
    jsProt552 := factory551.GetProtocol(mbTrans549)
    argvalue1 := driver.NewIDataFrameId()
    err553 := argvalue1.Read(context.Background(), jsProt552)
    if err553 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Join(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "join3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3a requires 3 args")
      flag.Usage()
    }
    arg554 := flag.Arg(1)
    mbTrans555 := thrift.NewTMemoryBufferLen(len(arg554))
    defer mbTrans555.Close()
    _, err556 := mbTrans555.WriteString(arg554)
    if err556 != nil {
      Usage()
      return
    }
    factory557 := thrift.NewTJSONProtocolFactory()
    jsProt558 := factory557.GetProtocol(mbTrans555)
    argvalue0 := driver.NewIDataFrameId()
    err559 := argvalue0.Read(context.Background(), jsProt558)
    if err559 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg560 := flag.Arg(2)
    mbTrans561 := thrift.NewTMemoryBufferLen(len(arg560))
    defer mbTrans561.Close()
    _, err562 := mbTrans561.WriteString(arg560)
    if err562 != nil {
      Usage()
      return
    }
    factory563 := thrift.NewTJSONProtocolFactory()
    jsProt564 := factory563.GetProtocol(mbTrans561)
    argvalue1 := driver.NewIDataFrameId()
    err565 := argvalue1.Read(context.Background(), jsProt564)
    if err565 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err566 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err566 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3b requires 3 args")
      flag.Usage()
    }
    arg567 := flag.Arg(1)
    mbTrans568 := thrift.NewTMemoryBufferLen(len(arg567))
    defer mbTrans568.Close()
    _, err569 := mbTrans568.WriteString(arg567)
    if err569 != nil {
      Usage()
      return
    }
    factory570 := thrift.NewTJSONProtocolFactory()
    jsProt571 := factory570.GetProtocol(mbTrans568)
    argvalue0 := driver.NewIDataFrameId()
    err572 := argvalue0.Read(context.Background(), jsProt571)
    if err572 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg573 := flag.Arg(2)
    mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
    defer mbTrans574.Close()
    _, err575 := mbTrans574.WriteString(arg573)
    if err575 != nil {
      Usage()
      return
    }
    factory576 := thrift.NewTJSONProtocolFactory()
    jsProt577 := factory576.GetProtocol(mbTrans574)
    argvalue1 := driver.NewIDataFrameId()
    err578 := argvalue1.Read(context.Background(), jsProt577)
    if err578 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg579 := flag.Arg(3)
    mbTrans580 := thrift.NewTMemoryBufferLen(len(arg579))
    defer mbTrans580.Close()
    _, err581 := mbTrans580.WriteString(arg579)
    if err581 != nil {
      Usage()
      return
    }
    factory582 := thrift.NewTJSONProtocolFactory()
    jsProt583 := factory582.GetProtocol(mbTrans580)
    argvalue2 := rpc.NewISource()
    err584 := argvalue2.Read(context.Background(), jsProt583)
    if err584 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Join4 requires 4 args")
      flag.Usage()
    }
    arg585 := flag.Arg(1)
    mbTrans586 := thrift.NewTMemoryBufferLen(len(arg585))
    defer mbTrans586.Close()
    _, err587 := mbTrans586.WriteString(arg585)
    if err587 != nil {
      Usage()
      return
    }
    factory588 := thrift.NewTJSONProtocolFactory()
    jsProt589 := factory588.GetProtocol(mbTrans586)
    argvalue0 := driver.NewIDataFrameId()
    err590 := argvalue0.Read(context.Background(), jsProt589)
    if err590 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg591 := flag.Arg(2)
    mbTrans592 := thrift.NewTMemoryBufferLen(len(arg591))
    defer mbTrans592.Close()
    _, err593 := mbTrans592.WriteString(arg591)
    if err593 != nil {
      Usage()
      return
    }
    factory594 := thrift.NewTJSONProtocolFactory()
    jsProt595 := factory594.GetProtocol(mbTrans592)
    argvalue1 := driver.NewIDataFrameId()
    err596 := argvalue1.Read(context.Background(), jsProt595)
    if err596 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err597 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err597 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg598 := flag.Arg(4)
    mbTrans599 := thrift.NewTMemoryBufferLen(len(arg598))
    defer mbTrans599.Close()
    _, err600 := mbTrans599.WriteString(arg598)
    if err600 != nil {
      Usage()
      return
    }
    factory601 := thrift.NewTJSONProtocolFactory()
    jsProt602 := factory601.GetProtocol(mbTrans599)
    argvalue3 := rpc.NewISource()
    err603 := argvalue3.Read(context.Background(), jsProt602)
    if err603 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Join4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "distinct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Distinct requires 1 args")
      flag.Usage()
    }
    arg604 := flag.Arg(1)
    mbTrans605 := thrift.NewTMemoryBufferLen(len(arg604))
    defer mbTrans605.Close()
    _, err606 := mbTrans605.WriteString(arg604)
    if err606 != nil {
      Usage()
      return
    }
    factory607 := thrift.NewTJSONProtocolFactory()
    jsProt608 := factory607.GetProtocol(mbTrans605)
    argvalue0 := driver.NewIDataFrameId()
    err609 := argvalue0.Read(context.Background(), jsProt608)
    if err609 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Distinct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "distinct2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2a requires 2 args")
      flag.Usage()
    }
    arg610 := flag.Arg(1)
    mbTrans611 := thrift.NewTMemoryBufferLen(len(arg610))
    defer mbTrans611.Close()
    _, err612 := mbTrans611.WriteString(arg610)
    if err612 != nil {
      Usage()
      return
    }
    factory613 := thrift.NewTJSONProtocolFactory()
    jsProt614 := factory613.GetProtocol(mbTrans611)
    argvalue0 := driver.NewIDataFrameId()
    err615 := argvalue0.Read(context.Background(), jsProt614)
    if err615 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err616 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err616 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "distinct2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2b requires 2 args")
      flag.Usage()
    }
    arg617 := flag.Arg(1)
    mbTrans618 := thrift.NewTMemoryBufferLen(len(arg617))
    defer mbTrans618.Close()
    _, err619 := mbTrans618.WriteString(arg617)
    if err619 != nil {
      Usage()
      return
    }
    factory620 := thrift.NewTJSONProtocolFactory()
    jsProt621 := factory620.GetProtocol(mbTrans618)
    argvalue0 := driver.NewIDataFrameId()
    err622 := argvalue0.Read(context.Background(), jsProt621)
    if err622 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg623 := flag.Arg(2)
    mbTrans624 := thrift.NewTMemoryBufferLen(len(arg623))
    defer mbTrans624.Close()
    _, err625 := mbTrans624.WriteString(arg623)
    if err625 != nil {
      Usage()
      return
    }
    factory626 := thrift.NewTJSONProtocolFactory()
    jsProt627 := factory626.GetProtocol(mbTrans624)
    argvalue1 := rpc.NewISource()
    err628 := argvalue1.Read(context.Background(), jsProt627)
    if err628 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "distinct3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Distinct3 requires 3 args")
      flag.Usage()
    }
    arg629 := flag.Arg(1)
    mbTrans630 := thrift.NewTMemoryBufferLen(len(arg629))
    defer mbTrans630.Close()
    _, err631 := mbTrans630.WriteString(arg629)
    if err631 != nil {
      Usage()
      return
    }
    factory632 := thrift.NewTJSONProtocolFactory()
    jsProt633 := factory632.GetProtocol(mbTrans630)
    argvalue0 := driver.NewIDataFrameId()
    err634 := argvalue0.Read(context.Background(), jsProt633)
    if err634 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err635 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err635 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg636 := flag.Arg(3)
    mbTrans637 := thrift.NewTMemoryBufferLen(len(arg636))
    defer mbTrans637.Close()
    _, err638 := mbTrans637.WriteString(arg636)
    if err638 != nil {
      Usage()
      return
    }
    factory639 := thrift.NewTJSONProtocolFactory()
    jsProt640 := factory639.GetProtocol(mbTrans637)
    argvalue2 := rpc.NewISource()
    err641 := argvalue2.Read(context.Background(), jsProt640)
    if err641 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Distinct3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Reduce requires 3 args")
      flag.Usage()
    }
    arg642 := flag.Arg(1)
    mbTrans643 := thrift.NewTMemoryBufferLen(len(arg642))
    defer mbTrans643.Close()
    _, err644 := mbTrans643.WriteString(arg642)
    if err644 != nil {
      Usage()
      return
    }
    factory645 := thrift.NewTJSONProtocolFactory()
    jsProt646 := factory645.GetProtocol(mbTrans643)
    argvalue0 := driver.NewIDataFrameId()
    err647 := argvalue0.Read(context.Background(), jsProt646)
    if err647 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg648 := flag.Arg(2)
    mbTrans649 := thrift.NewTMemoryBufferLen(len(arg648))
    defer mbTrans649.Close()
    _, err650 := mbTrans649.WriteString(arg648)
    if err650 != nil {
      Usage()
      return
    }
    factory651 := thrift.NewTJSONProtocolFactory()
    jsProt652 := factory651.GetProtocol(mbTrans649)
    argvalue1 := rpc.NewISource()
    err653 := argvalue1.Read(context.Background(), jsProt652)
    if err653 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg654 := flag.Arg(3)
    mbTrans655 := thrift.NewTMemoryBufferLen(len(arg654))
    defer mbTrans655.Close()
    _, err656 := mbTrans655.WriteString(arg654)
    if err656 != nil {
      Usage()
      return
    }
    factory657 := thrift.NewTJSONProtocolFactory()
    jsProt658 := factory657.GetProtocol(mbTrans655)
    argvalue2 := rpc.NewISource()
    err659 := argvalue2.Read(context.Background(), jsProt658)
    if err659 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Reduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "treeReduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TreeReduce requires 3 args")
      flag.Usage()
    }
    arg660 := flag.Arg(1)
    mbTrans661 := thrift.NewTMemoryBufferLen(len(arg660))
    defer mbTrans661.Close()
    _, err662 := mbTrans661.WriteString(arg660)
    if err662 != nil {
      Usage()
      return
    }
    factory663 := thrift.NewTJSONProtocolFactory()
    jsProt664 := factory663.GetProtocol(mbTrans661)
    argvalue0 := driver.NewIDataFrameId()
    err665 := argvalue0.Read(context.Background(), jsProt664)
    if err665 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg666 := flag.Arg(2)
    mbTrans667 := thrift.NewTMemoryBufferLen(len(arg666))
    defer mbTrans667.Close()
    _, err668 := mbTrans667.WriteString(arg666)
    if err668 != nil {
      Usage()
      return
    }
    factory669 := thrift.NewTJSONProtocolFactory()
    jsProt670 := factory669.GetProtocol(mbTrans667)
    argvalue1 := rpc.NewISource()
    err671 := argvalue1.Read(context.Background(), jsProt670)
    if err671 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg672 := flag.Arg(3)
    mbTrans673 := thrift.NewTMemoryBufferLen(len(arg672))
    defer mbTrans673.Close()
    _, err674 := mbTrans673.WriteString(arg672)
    if err674 != nil {
      Usage()
      return
    }
    factory675 := thrift.NewTJSONProtocolFactory()
    jsProt676 := factory675.GetProtocol(mbTrans673)
    argvalue2 := rpc.NewISource()
    err677 := argvalue2.Read(context.Background(), jsProt676)
    if err677 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TreeReduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "collect":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Collect requires 2 args")
      flag.Usage()
    }
    arg678 := flag.Arg(1)
    mbTrans679 := thrift.NewTMemoryBufferLen(len(arg678))
    defer mbTrans679.Close()
    _, err680 := mbTrans679.WriteString(arg678)
    if err680 != nil {
      Usage()
      return
    }
    factory681 := thrift.NewTJSONProtocolFactory()
    jsProt682 := factory681.GetProtocol(mbTrans679)
    argvalue0 := driver.NewIDataFrameId()
    err683 := argvalue0.Read(context.Background(), jsProt682)
    if err683 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg684 := flag.Arg(2)
    mbTrans685 := thrift.NewTMemoryBufferLen(len(arg684))
    defer mbTrans685.Close()
    _, err686 := mbTrans685.WriteString(arg684)
    if err686 != nil {
      Usage()
      return
    }
    factory687 := thrift.NewTJSONProtocolFactory()
    jsProt688 := factory687.GetProtocol(mbTrans685)
    argvalue1 := rpc.NewISource()
    err689 := argvalue1.Read(context.Background(), jsProt688)
    if err689 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Collect(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "aggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "Aggregate requires 5 args")
      flag.Usage()
    }
    arg690 := flag.Arg(1)
    mbTrans691 := thrift.NewTMemoryBufferLen(len(arg690))
    defer mbTrans691.Close()
    _, err692 := mbTrans691.WriteString(arg690)
    if err692 != nil {
      Usage()
      return
    }
    factory693 := thrift.NewTJSONProtocolFactory()
    jsProt694 := factory693.GetProtocol(mbTrans691)
    argvalue0 := driver.NewIDataFrameId()
    err695 := argvalue0.Read(context.Background(), jsProt694)
    if err695 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg696 := flag.Arg(2)
    mbTrans697 := thrift.NewTMemoryBufferLen(len(arg696))
    defer mbTrans697.Close()
    _, err698 := mbTrans697.WriteString(arg696)
    if err698 != nil {
      Usage()
      return
    }
    factory699 := thrift.NewTJSONProtocolFactory()
    jsProt700 := factory699.GetProtocol(mbTrans697)
    argvalue1 := rpc.NewISource()
    err701 := argvalue1.Read(context.Background(), jsProt700)
    if err701 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg702 := flag.Arg(3)
    mbTrans703 := thrift.NewTMemoryBufferLen(len(arg702))
    defer mbTrans703.Close()
    _, err704 := mbTrans703.WriteString(arg702)
    if err704 != nil {
      Usage()
      return
    }
    factory705 := thrift.NewTJSONProtocolFactory()
    jsProt706 := factory705.GetProtocol(mbTrans703)
    argvalue2 := rpc.NewISource()
    err707 := argvalue2.Read(context.Background(), jsProt706)
    if err707 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg708 := flag.Arg(4)
    mbTrans709 := thrift.NewTMemoryBufferLen(len(arg708))
    defer mbTrans709.Close()
    _, err710 := mbTrans709.WriteString(arg708)
    if err710 != nil {
      Usage()
      return
    }
    factory711 := thrift.NewTJSONProtocolFactory()
    jsProt712 := factory711.GetProtocol(mbTrans709)
    argvalue3 := rpc.NewISource()
    err713 := argvalue3.Read(context.Background(), jsProt712)
    if err713 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg714 := flag.Arg(5)
    mbTrans715 := thrift.NewTMemoryBufferLen(len(arg714))
    defer mbTrans715.Close()
    _, err716 := mbTrans715.WriteString(arg714)
    if err716 != nil {
      Usage()
      return
    }
    factory717 := thrift.NewTJSONProtocolFactory()
    jsProt718 := factory717.GetProtocol(mbTrans715)
    argvalue4 := rpc.NewISource()
    err719 := argvalue4.Read(context.Background(), jsProt718)
    if err719 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.Aggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "treeAggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TreeAggregate requires 5 args")
      flag.Usage()
    }
    arg720 := flag.Arg(1)
    mbTrans721 := thrift.NewTMemoryBufferLen(len(arg720))
    defer mbTrans721.Close()
    _, err722 := mbTrans721.WriteString(arg720)
    if err722 != nil {
      Usage()
      return
    }
    factory723 := thrift.NewTJSONProtocolFactory()
    jsProt724 := factory723.GetProtocol(mbTrans721)
    argvalue0 := driver.NewIDataFrameId()
    err725 := argvalue0.Read(context.Background(), jsProt724)
    if err725 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg726 := flag.Arg(2)
    mbTrans727 := thrift.NewTMemoryBufferLen(len(arg726))
    defer mbTrans727.Close()
    _, err728 := mbTrans727.WriteString(arg726)
    if err728 != nil {
      Usage()
      return
    }
    factory729 := thrift.NewTJSONProtocolFactory()
    jsProt730 := factory729.GetProtocol(mbTrans727)
    argvalue1 := rpc.NewISource()
    err731 := argvalue1.Read(context.Background(), jsProt730)
    if err731 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg732 := flag.Arg(3)
    mbTrans733 := thrift.NewTMemoryBufferLen(len(arg732))
    defer mbTrans733.Close()
    _, err734 := mbTrans733.WriteString(arg732)
    if err734 != nil {
      Usage()
      return
    }
    factory735 := thrift.NewTJSONProtocolFactory()
    jsProt736 := factory735.GetProtocol(mbTrans733)
    argvalue2 := rpc.NewISource()
    err737 := argvalue2.Read(context.Background(), jsProt736)
    if err737 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg738 := flag.Arg(4)
    mbTrans739 := thrift.NewTMemoryBufferLen(len(arg738))
    defer mbTrans739.Close()
    _, err740 := mbTrans739.WriteString(arg738)
    if err740 != nil {
      Usage()
      return
    }
    factory741 := thrift.NewTJSONProtocolFactory()
    jsProt742 := factory741.GetProtocol(mbTrans739)
    argvalue3 := rpc.NewISource()
    err743 := argvalue3.Read(context.Background(), jsProt742)
    if err743 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg744 := flag.Arg(5)
    mbTrans745 := thrift.NewTMemoryBufferLen(len(arg744))
    defer mbTrans745.Close()
    _, err746 := mbTrans745.WriteString(arg744)
    if err746 != nil {
      Usage()
      return
    }
    factory747 := thrift.NewTJSONProtocolFactory()
    jsProt748 := factory747.GetProtocol(mbTrans745)
    argvalue4 := rpc.NewISource()
    err749 := argvalue4.Read(context.Background(), jsProt748)
    if err749 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TreeAggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "fold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Fold requires 4 args")
      flag.Usage()
    }
    arg750 := flag.Arg(1)
    mbTrans751 := thrift.NewTMemoryBufferLen(len(arg750))
    defer mbTrans751.Close()
    _, err752 := mbTrans751.WriteString(arg750)
    if err752 != nil {
      Usage()
      return
    }
    factory753 := thrift.NewTJSONProtocolFactory()
    jsProt754 := factory753.GetProtocol(mbTrans751)
    argvalue0 := driver.NewIDataFrameId()
    err755 := argvalue0.Read(context.Background(), jsProt754)
    if err755 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg756 := flag.Arg(2)
    mbTrans757 := thrift.NewTMemoryBufferLen(len(arg756))
    defer mbTrans757.Close()
    _, err758 := mbTrans757.WriteString(arg756)
    if err758 != nil {
      Usage()
      return
    }
    factory759 := thrift.NewTJSONProtocolFactory()
    jsProt760 := factory759.GetProtocol(mbTrans757)
    argvalue1 := rpc.NewISource()
    err761 := argvalue1.Read(context.Background(), jsProt760)
    if err761 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg762 := flag.Arg(3)
    mbTrans763 := thrift.NewTMemoryBufferLen(len(arg762))
    defer mbTrans763.Close()
    _, err764 := mbTrans763.WriteString(arg762)
    if err764 != nil {
      Usage()
      return
    }
    factory765 := thrift.NewTJSONProtocolFactory()
    jsProt766 := factory765.GetProtocol(mbTrans763)
    argvalue2 := rpc.NewISource()
    err767 := argvalue2.Read(context.Background(), jsProt766)
    if err767 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg768 := flag.Arg(4)
    mbTrans769 := thrift.NewTMemoryBufferLen(len(arg768))
    defer mbTrans769.Close()
    _, err770 := mbTrans769.WriteString(arg768)
    if err770 != nil {
      Usage()
      return
    }
    factory771 := thrift.NewTJSONProtocolFactory()
    jsProt772 := factory771.GetProtocol(mbTrans769)
    argvalue3 := rpc.NewISource()
    err773 := argvalue3.Read(context.Background(), jsProt772)
    if err773 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Fold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "treeFold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TreeFold requires 4 args")
      flag.Usage()
    }
    arg774 := flag.Arg(1)
    mbTrans775 := thrift.NewTMemoryBufferLen(len(arg774))
    defer mbTrans775.Close()
    _, err776 := mbTrans775.WriteString(arg774)
    if err776 != nil {
      Usage()
      return
    }
    factory777 := thrift.NewTJSONProtocolFactory()
    jsProt778 := factory777.GetProtocol(mbTrans775)
    argvalue0 := driver.NewIDataFrameId()
    err779 := argvalue0.Read(context.Background(), jsProt778)
    if err779 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg780 := flag.Arg(2)
    mbTrans781 := thrift.NewTMemoryBufferLen(len(arg780))
    defer mbTrans781.Close()
    _, err782 := mbTrans781.WriteString(arg780)
    if err782 != nil {
      Usage()
      return
    }
    factory783 := thrift.NewTJSONProtocolFactory()
    jsProt784 := factory783.GetProtocol(mbTrans781)
    argvalue1 := rpc.NewISource()
    err785 := argvalue1.Read(context.Background(), jsProt784)
    if err785 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg786 := flag.Arg(3)
    mbTrans787 := thrift.NewTMemoryBufferLen(len(arg786))
    defer mbTrans787.Close()
    _, err788 := mbTrans787.WriteString(arg786)
    if err788 != nil {
      Usage()
      return
    }
    factory789 := thrift.NewTJSONProtocolFactory()
    jsProt790 := factory789.GetProtocol(mbTrans787)
    argvalue2 := rpc.NewISource()
    err791 := argvalue2.Read(context.Background(), jsProt790)
    if err791 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg792 := flag.Arg(4)
    mbTrans793 := thrift.NewTMemoryBufferLen(len(arg792))
    defer mbTrans793.Close()
    _, err794 := mbTrans793.WriteString(arg792)
    if err794 != nil {
      Usage()
      return
    }
    factory795 := thrift.NewTJSONProtocolFactory()
    jsProt796 := factory795.GetProtocol(mbTrans793)
    argvalue3 := rpc.NewISource()
    err797 := argvalue3.Read(context.Background(), jsProt796)
    if err797 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TreeFold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "take":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Take requires 3 args")
      flag.Usage()
    }
    arg798 := flag.Arg(1)
    mbTrans799 := thrift.NewTMemoryBufferLen(len(arg798))
    defer mbTrans799.Close()
    _, err800 := mbTrans799.WriteString(arg798)
    if err800 != nil {
      Usage()
      return
    }
    factory801 := thrift.NewTJSONProtocolFactory()
    jsProt802 := factory801.GetProtocol(mbTrans799)
    argvalue0 := driver.NewIDataFrameId()
    err803 := argvalue0.Read(context.Background(), jsProt802)
    if err803 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err804 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err804 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg805 := flag.Arg(3)
    mbTrans806 := thrift.NewTMemoryBufferLen(len(arg805))
    defer mbTrans806.Close()
    _, err807 := mbTrans806.WriteString(arg805)
    if err807 != nil {
      Usage()
      return
    }
    factory808 := thrift.NewTJSONProtocolFactory()
    jsProt809 := factory808.GetProtocol(mbTrans806)
    argvalue2 := rpc.NewISource()
    err810 := argvalue2.Read(context.Background(), jsProt809)
    if err810 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Take(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "foreach_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Foreach_ requires 2 args")
      flag.Usage()
    }
    arg811 := flag.Arg(1)
    mbTrans812 := thrift.NewTMemoryBufferLen(len(arg811))
    defer mbTrans812.Close()
    _, err813 := mbTrans812.WriteString(arg811)
    if err813 != nil {
      Usage()
      return
    }
    factory814 := thrift.NewTJSONProtocolFactory()
    jsProt815 := factory814.GetProtocol(mbTrans812)
    argvalue0 := driver.NewIDataFrameId()
    err816 := argvalue0.Read(context.Background(), jsProt815)
    if err816 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg817 := flag.Arg(2)
    mbTrans818 := thrift.NewTMemoryBufferLen(len(arg817))
    defer mbTrans818.Close()
    _, err819 := mbTrans818.WriteString(arg817)
    if err819 != nil {
      Usage()
      return
    }
    factory820 := thrift.NewTJSONProtocolFactory()
    jsProt821 := factory820.GetProtocol(mbTrans818)
    argvalue1 := rpc.NewISource()
    err822 := argvalue1.Read(context.Background(), jsProt821)
    if err822 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Foreach_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachPartition":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachPartition requires 2 args")
      flag.Usage()
    }
    arg823 := flag.Arg(1)
    mbTrans824 := thrift.NewTMemoryBufferLen(len(arg823))
    defer mbTrans824.Close()
    _, err825 := mbTrans824.WriteString(arg823)
    if err825 != nil {
      Usage()
      return
    }
    factory826 := thrift.NewTJSONProtocolFactory()
    jsProt827 := factory826.GetProtocol(mbTrans824)
    argvalue0 := driver.NewIDataFrameId()
    err828 := argvalue0.Read(context.Background(), jsProt827)
    if err828 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg829 := flag.Arg(2)
    mbTrans830 := thrift.NewTMemoryBufferLen(len(arg829))
    defer mbTrans830.Close()
    _, err831 := mbTrans830.WriteString(arg829)
    if err831 != nil {
      Usage()
      return
    }
    factory832 := thrift.NewTJSONProtocolFactory()
    jsProt833 := factory832.GetProtocol(mbTrans830)
    argvalue1 := rpc.NewISource()
    err834 := argvalue1.Read(context.Background(), jsProt833)
    if err834 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachPartition(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachExecutor requires 2 args")
      flag.Usage()
    }
    arg835 := flag.Arg(1)
    mbTrans836 := thrift.NewTMemoryBufferLen(len(arg835))
    defer mbTrans836.Close()
    _, err837 := mbTrans836.WriteString(arg835)
    if err837 != nil {
      Usage()
      return
    }
    factory838 := thrift.NewTJSONProtocolFactory()
    jsProt839 := factory838.GetProtocol(mbTrans836)
    argvalue0 := driver.NewIDataFrameId()
    err840 := argvalue0.Read(context.Background(), jsProt839)
    if err840 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg841 := flag.Arg(2)
    mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
    defer mbTrans842.Close()
    _, err843 := mbTrans842.WriteString(arg841)
    if err843 != nil {
      Usage()
      return
    }
    factory844 := thrift.NewTJSONProtocolFactory()
    jsProt845 := factory844.GetProtocol(mbTrans842)
    argvalue1 := rpc.NewISource()
    err846 := argvalue1.Read(context.Background(), jsProt845)
    if err846 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "top":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Top requires 3 args")
      flag.Usage()
    }
    arg847 := flag.Arg(1)
    mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
    defer mbTrans848.Close()
    _, err849 := mbTrans848.WriteString(arg847)
    if err849 != nil {
      Usage()
      return
    }
    factory850 := thrift.NewTJSONProtocolFactory()
    jsProt851 := factory850.GetProtocol(mbTrans848)
    argvalue0 := driver.NewIDataFrameId()
    err852 := argvalue0.Read(context.Background(), jsProt851)
    if err852 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err853 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err853 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg854 := flag.Arg(3)
    mbTrans855 := thrift.NewTMemoryBufferLen(len(arg854))
    defer mbTrans855.Close()
    _, err856 := mbTrans855.WriteString(arg854)
    if err856 != nil {
      Usage()
      return
    }
    factory857 := thrift.NewTJSONProtocolFactory()
    jsProt858 := factory857.GetProtocol(mbTrans855)
    argvalue2 := rpc.NewISource()
    err859 := argvalue2.Read(context.Background(), jsProt858)
    if err859 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Top(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "top4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Top4 requires 4 args")
      flag.Usage()
    }
    arg860 := flag.Arg(1)
    mbTrans861 := thrift.NewTMemoryBufferLen(len(arg860))
    defer mbTrans861.Close()
    _, err862 := mbTrans861.WriteString(arg860)
    if err862 != nil {
      Usage()
      return
    }
    factory863 := thrift.NewTJSONProtocolFactory()
    jsProt864 := factory863.GetProtocol(mbTrans861)
    argvalue0 := driver.NewIDataFrameId()
    err865 := argvalue0.Read(context.Background(), jsProt864)
    if err865 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err866 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err866 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg867 := flag.Arg(3)
    mbTrans868 := thrift.NewTMemoryBufferLen(len(arg867))
    defer mbTrans868.Close()
    _, err869 := mbTrans868.WriteString(arg867)
    if err869 != nil {
      Usage()
      return
    }
    factory870 := thrift.NewTJSONProtocolFactory()
    jsProt871 := factory870.GetProtocol(mbTrans868)
    argvalue2 := rpc.NewISource()
    err872 := argvalue2.Read(context.Background(), jsProt871)
    if err872 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg873 := flag.Arg(4)
    mbTrans874 := thrift.NewTMemoryBufferLen(len(arg873))
    defer mbTrans874.Close()
    _, err875 := mbTrans874.WriteString(arg873)
    if err875 != nil {
      Usage()
      return
    }
    factory876 := thrift.NewTJSONProtocolFactory()
    jsProt877 := factory876.GetProtocol(mbTrans874)
    argvalue3 := rpc.NewISource()
    err878 := argvalue3.Read(context.Background(), jsProt877)
    if err878 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Top4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeOrdered":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TakeOrdered requires 3 args")
      flag.Usage()
    }
    arg879 := flag.Arg(1)
    mbTrans880 := thrift.NewTMemoryBufferLen(len(arg879))
    defer mbTrans880.Close()
    _, err881 := mbTrans880.WriteString(arg879)
    if err881 != nil {
      Usage()
      return
    }
    factory882 := thrift.NewTJSONProtocolFactory()
    jsProt883 := factory882.GetProtocol(mbTrans880)
    argvalue0 := driver.NewIDataFrameId()
    err884 := argvalue0.Read(context.Background(), jsProt883)
    if err884 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err885 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err885 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg886 := flag.Arg(3)
    mbTrans887 := thrift.NewTMemoryBufferLen(len(arg886))
    defer mbTrans887.Close()
    _, err888 := mbTrans887.WriteString(arg886)
    if err888 != nil {
      Usage()
      return
    }
    factory889 := thrift.NewTJSONProtocolFactory()
    jsProt890 := factory889.GetProtocol(mbTrans887)
    argvalue2 := rpc.NewISource()
    err891 := argvalue2.Read(context.Background(), jsProt890)
    if err891 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TakeOrdered(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "takeOrdered4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TakeOrdered4 requires 4 args")
      flag.Usage()
    }
    arg892 := flag.Arg(1)
    mbTrans893 := thrift.NewTMemoryBufferLen(len(arg892))
    defer mbTrans893.Close()
    _, err894 := mbTrans893.WriteString(arg892)
    if err894 != nil {
      Usage()
      return
    }
    factory895 := thrift.NewTJSONProtocolFactory()
    jsProt896 := factory895.GetProtocol(mbTrans893)
    argvalue0 := driver.NewIDataFrameId()
    err897 := argvalue0.Read(context.Background(), jsProt896)
    if err897 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err898 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err898 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg899 := flag.Arg(3)
    mbTrans900 := thrift.NewTMemoryBufferLen(len(arg899))
    defer mbTrans900.Close()
    _, err901 := mbTrans900.WriteString(arg899)
    if err901 != nil {
      Usage()
      return
    }
    factory902 := thrift.NewTJSONProtocolFactory()
    jsProt903 := factory902.GetProtocol(mbTrans900)
    argvalue2 := rpc.NewISource()
    err904 := argvalue2.Read(context.Background(), jsProt903)
    if err904 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg905 := flag.Arg(4)
    mbTrans906 := thrift.NewTMemoryBufferLen(len(arg905))
    defer mbTrans906.Close()
    _, err907 := mbTrans906.WriteString(arg905)
    if err907 != nil {
      Usage()
      return
    }
    factory908 := thrift.NewTJSONProtocolFactory()
    jsProt909 := factory908.GetProtocol(mbTrans906)
    argvalue3 := rpc.NewISource()
    err910 := argvalue3.Read(context.Background(), jsProt909)
    if err910 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TakeOrdered4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sample":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Sample requires 4 args")
      flag.Usage()
    }
    arg911 := flag.Arg(1)
    mbTrans912 := thrift.NewTMemoryBufferLen(len(arg911))
    defer mbTrans912.Close()
    _, err913 := mbTrans912.WriteString(arg911)
    if err913 != nil {
      Usage()
      return
    }
    factory914 := thrift.NewTJSONProtocolFactory()
    jsProt915 := factory914.GetProtocol(mbTrans912)
    argvalue0 := driver.NewIDataFrameId()
    err916 := argvalue0.Read(context.Background(), jsProt915)
    if err916 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err918 := (strconv.ParseFloat(flag.Arg(3), 64))
    if err918 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err919 := (strconv.Atoi(flag.Arg(4)))
    if err919 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.Sample(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeSample":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TakeSample requires 5 args")
      flag.Usage()
    }
    arg920 := flag.Arg(1)
    mbTrans921 := thrift.NewTMemoryBufferLen(len(arg920))
    defer mbTrans921.Close()
    _, err922 := mbTrans921.WriteString(arg920)
    if err922 != nil {
      Usage()
      return
    }
    factory923 := thrift.NewTJSONProtocolFactory()
    jsProt924 := factory923.GetProtocol(mbTrans921)
    argvalue0 := driver.NewIDataFrameId()
    err925 := argvalue0.Read(context.Background(), jsProt924)
    if err925 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err927 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err927 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err928 := (strconv.Atoi(flag.Arg(4)))
    if err928 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg929 := flag.Arg(5)
    mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
    defer mbTrans930.Close()
    _, err931 := mbTrans930.WriteString(arg929)
    if err931 != nil {
      Usage()
      return
    }
    factory932 := thrift.NewTJSONProtocolFactory()
    jsProt933 := factory932.GetProtocol(mbTrans930)
    argvalue4 := rpc.NewISource()
    err934 := argvalue4.Read(context.Background(), jsProt933)
    if err934 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TakeSample(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Count requires 1 args")
      flag.Usage()
    }
    arg935 := flag.Arg(1)
    mbTrans936 := thrift.NewTMemoryBufferLen(len(arg935))
    defer mbTrans936.Close()
    _, err937 := mbTrans936.WriteString(arg935)
    if err937 != nil {
      Usage()
      return
    }
    factory938 := thrift.NewTJSONProtocolFactory()
    jsProt939 := factory938.GetProtocol(mbTrans936)
    argvalue0 := driver.NewIDataFrameId()
    err940 := argvalue0.Read(context.Background(), jsProt939)
    if err940 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Count(context.Background(), value0))
    fmt.Print("\n")
    break
  case "max":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Max requires 2 args")
      flag.Usage()
    }
    arg941 := flag.Arg(1)
    mbTrans942 := thrift.NewTMemoryBufferLen(len(arg941))
    defer mbTrans942.Close()
    _, err943 := mbTrans942.WriteString(arg941)
    if err943 != nil {
      Usage()
      return
    }
    factory944 := thrift.NewTJSONProtocolFactory()
    jsProt945 := factory944.GetProtocol(mbTrans942)
    argvalue0 := driver.NewIDataFrameId()
    err946 := argvalue0.Read(context.Background(), jsProt945)
    if err946 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg947 := flag.Arg(2)
    mbTrans948 := thrift.NewTMemoryBufferLen(len(arg947))
    defer mbTrans948.Close()
    _, err949 := mbTrans948.WriteString(arg947)
    if err949 != nil {
      Usage()
      return
    }
    factory950 := thrift.NewTJSONProtocolFactory()
    jsProt951 := factory950.GetProtocol(mbTrans948)
    argvalue1 := rpc.NewISource()
    err952 := argvalue1.Read(context.Background(), jsProt951)
    if err952 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Max(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "max3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Max3 requires 3 args")
      flag.Usage()
    }
    arg953 := flag.Arg(1)
    mbTrans954 := thrift.NewTMemoryBufferLen(len(arg953))
    defer mbTrans954.Close()
    _, err955 := mbTrans954.WriteString(arg953)
    if err955 != nil {
      Usage()
      return
    }
    factory956 := thrift.NewTJSONProtocolFactory()
    jsProt957 := factory956.GetProtocol(mbTrans954)
    argvalue0 := driver.NewIDataFrameId()
    err958 := argvalue0.Read(context.Background(), jsProt957)
    if err958 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg959 := flag.Arg(2)
    mbTrans960 := thrift.NewTMemoryBufferLen(len(arg959))
    defer mbTrans960.Close()
    _, err961 := mbTrans960.WriteString(arg959)
    if err961 != nil {
      Usage()
      return
    }
    factory962 := thrift.NewTJSONProtocolFactory()
    jsProt963 := factory962.GetProtocol(mbTrans960)
    argvalue1 := rpc.NewISource()
    err964 := argvalue1.Read(context.Background(), jsProt963)
    if err964 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg965 := flag.Arg(3)
    mbTrans966 := thrift.NewTMemoryBufferLen(len(arg965))
    defer mbTrans966.Close()
    _, err967 := mbTrans966.WriteString(arg965)
    if err967 != nil {
      Usage()
      return
    }
    factory968 := thrift.NewTJSONProtocolFactory()
    jsProt969 := factory968.GetProtocol(mbTrans966)
    argvalue2 := rpc.NewISource()
    err970 := argvalue2.Read(context.Background(), jsProt969)
    if err970 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Max3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "min":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Min requires 2 args")
      flag.Usage()
    }
    arg971 := flag.Arg(1)
    mbTrans972 := thrift.NewTMemoryBufferLen(len(arg971))
    defer mbTrans972.Close()
    _, err973 := mbTrans972.WriteString(arg971)
    if err973 != nil {
      Usage()
      return
    }
    factory974 := thrift.NewTJSONProtocolFactory()
    jsProt975 := factory974.GetProtocol(mbTrans972)
    argvalue0 := driver.NewIDataFrameId()
    err976 := argvalue0.Read(context.Background(), jsProt975)
    if err976 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg977 := flag.Arg(2)
    mbTrans978 := thrift.NewTMemoryBufferLen(len(arg977))
    defer mbTrans978.Close()
    _, err979 := mbTrans978.WriteString(arg977)
    if err979 != nil {
      Usage()
      return
    }
    factory980 := thrift.NewTJSONProtocolFactory()
    jsProt981 := factory980.GetProtocol(mbTrans978)
    argvalue1 := rpc.NewISource()
    err982 := argvalue1.Read(context.Background(), jsProt981)
    if err982 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Min(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "min3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Min3 requires 3 args")
      flag.Usage()
    }
    arg983 := flag.Arg(1)
    mbTrans984 := thrift.NewTMemoryBufferLen(len(arg983))
    defer mbTrans984.Close()
    _, err985 := mbTrans984.WriteString(arg983)
    if err985 != nil {
      Usage()
      return
    }
    factory986 := thrift.NewTJSONProtocolFactory()
    jsProt987 := factory986.GetProtocol(mbTrans984)
    argvalue0 := driver.NewIDataFrameId()
    err988 := argvalue0.Read(context.Background(), jsProt987)
    if err988 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg989 := flag.Arg(2)
    mbTrans990 := thrift.NewTMemoryBufferLen(len(arg989))
    defer mbTrans990.Close()
    _, err991 := mbTrans990.WriteString(arg989)
    if err991 != nil {
      Usage()
      return
    }
    factory992 := thrift.NewTJSONProtocolFactory()
    jsProt993 := factory992.GetProtocol(mbTrans990)
    argvalue1 := rpc.NewISource()
    err994 := argvalue1.Read(context.Background(), jsProt993)
    if err994 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg995 := flag.Arg(3)
    mbTrans996 := thrift.NewTMemoryBufferLen(len(arg995))
    defer mbTrans996.Close()
    _, err997 := mbTrans996.WriteString(arg995)
    if err997 != nil {
      Usage()
      return
    }
    factory998 := thrift.NewTJSONProtocolFactory()
    jsProt999 := factory998.GetProtocol(mbTrans996)
    argvalue2 := rpc.NewISource()
    err1000 := argvalue2.Read(context.Background(), jsProt999)
    if err1000 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Min3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "flatMapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FlatMapValues requires 2 args")
      flag.Usage()
    }
    arg1001 := flag.Arg(1)
    mbTrans1002 := thrift.NewTMemoryBufferLen(len(arg1001))
    defer mbTrans1002.Close()
    _, err1003 := mbTrans1002.WriteString(arg1001)
    if err1003 != nil {
      Usage()
      return
    }
    factory1004 := thrift.NewTJSONProtocolFactory()
    jsProt1005 := factory1004.GetProtocol(mbTrans1002)
    argvalue0 := driver.NewIDataFrameId()
    err1006 := argvalue0.Read(context.Background(), jsProt1005)
    if err1006 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1007 := flag.Arg(2)
    mbTrans1008 := thrift.NewTMemoryBufferLen(len(arg1007))
    defer mbTrans1008.Close()
    _, err1009 := mbTrans1008.WriteString(arg1007)
    if err1009 != nil {
      Usage()
      return
    }
    factory1010 := thrift.NewTJSONProtocolFactory()
    jsProt1011 := factory1010.GetProtocol(mbTrans1008)
    argvalue1 := rpc.NewISource()
    err1012 := argvalue1.Read(context.Background(), jsProt1011)
    if err1012 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.FlatMapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapValues requires 2 args")
      flag.Usage()
    }
    arg1013 := flag.Arg(1)
    mbTrans1014 := thrift.NewTMemoryBufferLen(len(arg1013))
    defer mbTrans1014.Close()
    _, err1015 := mbTrans1014.WriteString(arg1013)
    if err1015 != nil {
      Usage()
      return
    }
    factory1016 := thrift.NewTJSONProtocolFactory()
    jsProt1017 := factory1016.GetProtocol(mbTrans1014)
    argvalue0 := driver.NewIDataFrameId()
    err1018 := argvalue0.Read(context.Background(), jsProt1017)
    if err1018 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1019 := flag.Arg(2)
    mbTrans1020 := thrift.NewTMemoryBufferLen(len(arg1019))
    defer mbTrans1020.Close()
    _, err1021 := mbTrans1020.WriteString(arg1019)
    if err1021 != nil {
      Usage()
      return
    }
    factory1022 := thrift.NewTJSONProtocolFactory()
    jsProt1023 := factory1022.GetProtocol(mbTrans1020)
    argvalue1 := rpc.NewISource()
    err1024 := argvalue1.Read(context.Background(), jsProt1023)
    if err1024 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GroupByKey requires 1 args")
      flag.Usage()
    }
    arg1025 := flag.Arg(1)
    mbTrans1026 := thrift.NewTMemoryBufferLen(len(arg1025))
    defer mbTrans1026.Close()
    _, err1027 := mbTrans1026.WriteString(arg1025)
    if err1027 != nil {
      Usage()
      return
    }
    factory1028 := thrift.NewTJSONProtocolFactory()
    jsProt1029 := factory1028.GetProtocol(mbTrans1026)
    argvalue0 := driver.NewIDataFrameId()
    err1030 := argvalue0.Read(context.Background(), jsProt1029)
    if err1030 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GroupByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2a requires 2 args")
      flag.Usage()
    }
    arg1031 := flag.Arg(1)
    mbTrans1032 := thrift.NewTMemoryBufferLen(len(arg1031))
    defer mbTrans1032.Close()
    _, err1033 := mbTrans1032.WriteString(arg1031)
    if err1033 != nil {
      Usage()
      return
    }
    factory1034 := thrift.NewTJSONProtocolFactory()
    jsProt1035 := factory1034.GetProtocol(mbTrans1032)
    argvalue0 := driver.NewIDataFrameId()
    err1036 := argvalue0.Read(context.Background(), jsProt1035)
    if err1036 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1037 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1037 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2b requires 2 args")
      flag.Usage()
    }
    arg1038 := flag.Arg(1)
    mbTrans1039 := thrift.NewTMemoryBufferLen(len(arg1038))
    defer mbTrans1039.Close()
    _, err1040 := mbTrans1039.WriteString(arg1038)
    if err1040 != nil {
      Usage()
      return
    }
    factory1041 := thrift.NewTJSONProtocolFactory()
    jsProt1042 := factory1041.GetProtocol(mbTrans1039)
    argvalue0 := driver.NewIDataFrameId()
    err1043 := argvalue0.Read(context.Background(), jsProt1042)
    if err1043 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1044 := flag.Arg(2)
    mbTrans1045 := thrift.NewTMemoryBufferLen(len(arg1044))
    defer mbTrans1045.Close()
    _, err1046 := mbTrans1045.WriteString(arg1044)
    if err1046 != nil {
      Usage()
      return
    }
    factory1047 := thrift.NewTJSONProtocolFactory()
    jsProt1048 := factory1047.GetProtocol(mbTrans1045)
    argvalue1 := rpc.NewISource()
    err1049 := argvalue1.Read(context.Background(), jsProt1048)
    if err1049 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupByKey3 requires 3 args")
      flag.Usage()
    }
    arg1050 := flag.Arg(1)
    mbTrans1051 := thrift.NewTMemoryBufferLen(len(arg1050))
    defer mbTrans1051.Close()
    _, err1052 := mbTrans1051.WriteString(arg1050)
    if err1052 != nil {
      Usage()
      return
    }
    factory1053 := thrift.NewTJSONProtocolFactory()
    jsProt1054 := factory1053.GetProtocol(mbTrans1051)
    argvalue0 := driver.NewIDataFrameId()
    err1055 := argvalue0.Read(context.Background(), jsProt1054)
    if err1055 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1056 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1056 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1057 := flag.Arg(3)
    mbTrans1058 := thrift.NewTMemoryBufferLen(len(arg1057))
    defer mbTrans1058.Close()
    _, err1059 := mbTrans1058.WriteString(arg1057)
    if err1059 != nil {
      Usage()
      return
    }
    factory1060 := thrift.NewTJSONProtocolFactory()
    jsProt1061 := factory1060.GetProtocol(mbTrans1058)
    argvalue2 := rpc.NewISource()
    err1062 := argvalue2.Read(context.Background(), jsProt1061)
    if err1062 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupByKey3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReduceByKey requires 3 args")
      flag.Usage()
    }
    arg1063 := flag.Arg(1)
    mbTrans1064 := thrift.NewTMemoryBufferLen(len(arg1063))
    defer mbTrans1064.Close()
    _, err1065 := mbTrans1064.WriteString(arg1063)
    if err1065 != nil {
      Usage()
      return
    }
    factory1066 := thrift.NewTJSONProtocolFactory()
    jsProt1067 := factory1066.GetProtocol(mbTrans1064)
    argvalue0 := driver.NewIDataFrameId()
    err1068 := argvalue0.Read(context.Background(), jsProt1067)
    if err1068 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1069 := flag.Arg(2)
    mbTrans1070 := thrift.NewTMemoryBufferLen(len(arg1069))
    defer mbTrans1070.Close()
    _, err1071 := mbTrans1070.WriteString(arg1069)
    if err1071 != nil {
      Usage()
      return
    }
    factory1072 := thrift.NewTJSONProtocolFactory()
    jsProt1073 := factory1072.GetProtocol(mbTrans1070)
    argvalue1 := rpc.NewISource()
    err1074 := argvalue1.Read(context.Background(), jsProt1073)
    if err1074 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.ReduceByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ReduceByKey4 requires 4 args")
      flag.Usage()
    }
    arg1076 := flag.Arg(1)
    mbTrans1077 := thrift.NewTMemoryBufferLen(len(arg1076))
    defer mbTrans1077.Close()
    _, err1078 := mbTrans1077.WriteString(arg1076)
    if err1078 != nil {
      Usage()
      return
    }
    factory1079 := thrift.NewTJSONProtocolFactory()
    jsProt1080 := factory1079.GetProtocol(mbTrans1077)
    argvalue0 := driver.NewIDataFrameId()
    err1081 := argvalue0.Read(context.Background(), jsProt1080)
    if err1081 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1082 := flag.Arg(2)
    mbTrans1083 := thrift.NewTMemoryBufferLen(len(arg1082))
    defer mbTrans1083.Close()
    _, err1084 := mbTrans1083.WriteString(arg1082)
    if err1084 != nil {
      Usage()
      return
    }
    factory1085 := thrift.NewTJSONProtocolFactory()
    jsProt1086 := factory1085.GetProtocol(mbTrans1083)
    argvalue1 := rpc.NewISource()
    err1087 := argvalue1.Read(context.Background(), jsProt1086)
    if err1087 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err1088 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1088 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.ReduceByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AggregateByKey requires 3 args")
      flag.Usage()
    }
    arg1090 := flag.Arg(1)
    mbTrans1091 := thrift.NewTMemoryBufferLen(len(arg1090))
    defer mbTrans1091.Close()
    _, err1092 := mbTrans1091.WriteString(arg1090)
    if err1092 != nil {
      Usage()
      return
    }
    factory1093 := thrift.NewTJSONProtocolFactory()
    jsProt1094 := factory1093.GetProtocol(mbTrans1091)
    argvalue0 := driver.NewIDataFrameId()
    err1095 := argvalue0.Read(context.Background(), jsProt1094)
    if err1095 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1096 := flag.Arg(2)
    mbTrans1097 := thrift.NewTMemoryBufferLen(len(arg1096))
    defer mbTrans1097.Close()
    _, err1098 := mbTrans1097.WriteString(arg1096)
    if err1098 != nil {
      Usage()
      return
    }
    factory1099 := thrift.NewTJSONProtocolFactory()
    jsProt1100 := factory1099.GetProtocol(mbTrans1097)
    argvalue1 := rpc.NewISource()
    err1101 := argvalue1.Read(context.Background(), jsProt1100)
    if err1101 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1102 := flag.Arg(3)
    mbTrans1103 := thrift.NewTMemoryBufferLen(len(arg1102))
    defer mbTrans1103.Close()
    _, err1104 := mbTrans1103.WriteString(arg1102)
    if err1104 != nil {
      Usage()
      return
    }
    factory1105 := thrift.NewTJSONProtocolFactory()
    jsProt1106 := factory1105.GetProtocol(mbTrans1103)
    argvalue2 := rpc.NewISource()
    err1107 := argvalue2.Read(context.Background(), jsProt1106)
    if err1107 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AggregateByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey4a":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4a requires 4 args")
      flag.Usage()
    }
    arg1108 := flag.Arg(1)
    mbTrans1109 := thrift.NewTMemoryBufferLen(len(arg1108))
    defer mbTrans1109.Close()
    _, err1110 := mbTrans1109.WriteString(arg1108)
    if err1110 != nil {
      Usage()
      return
    }
    factory1111 := thrift.NewTJSONProtocolFactory()
    jsProt1112 := factory1111.GetProtocol(mbTrans1109)
    argvalue0 := driver.NewIDataFrameId()
    err1113 := argvalue0.Read(context.Background(), jsProt1112)
    if err1113 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1114 := flag.Arg(2)
    mbTrans1115 := thrift.NewTMemoryBufferLen(len(arg1114))
    defer mbTrans1115.Close()
    _, err1116 := mbTrans1115.WriteString(arg1114)
    if err1116 != nil {
      Usage()
      return
    }
    factory1117 := thrift.NewTJSONProtocolFactory()
    jsProt1118 := factory1117.GetProtocol(mbTrans1115)
    argvalue1 := rpc.NewISource()
    err1119 := argvalue1.Read(context.Background(), jsProt1118)
    if err1119 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1120 := flag.Arg(3)
    mbTrans1121 := thrift.NewTMemoryBufferLen(len(arg1120))
    defer mbTrans1121.Close()
    _, err1122 := mbTrans1121.WriteString(arg1120)
    if err1122 != nil {
      Usage()
      return
    }
    factory1123 := thrift.NewTJSONProtocolFactory()
    jsProt1124 := factory1123.GetProtocol(mbTrans1121)
    argvalue2 := rpc.NewISource()
    err1125 := argvalue2.Read(context.Background(), jsProt1124)
    if err1125 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1126 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1126 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4a(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey4b":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4b requires 4 args")
      flag.Usage()
    }
    arg1127 := flag.Arg(1)
    mbTrans1128 := thrift.NewTMemoryBufferLen(len(arg1127))
    defer mbTrans1128.Close()
    _, err1129 := mbTrans1128.WriteString(arg1127)
    if err1129 != nil {
      Usage()
      return
    }
    factory1130 := thrift.NewTJSONProtocolFactory()
    jsProt1131 := factory1130.GetProtocol(mbTrans1128)
    argvalue0 := driver.NewIDataFrameId()
    err1132 := argvalue0.Read(context.Background(), jsProt1131)
    if err1132 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1133 := flag.Arg(2)
    mbTrans1134 := thrift.NewTMemoryBufferLen(len(arg1133))
    defer mbTrans1134.Close()
    _, err1135 := mbTrans1134.WriteString(arg1133)
    if err1135 != nil {
      Usage()
      return
    }
    factory1136 := thrift.NewTJSONProtocolFactory()
    jsProt1137 := factory1136.GetProtocol(mbTrans1134)
    argvalue1 := rpc.NewISource()
    err1138 := argvalue1.Read(context.Background(), jsProt1137)
    if err1138 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1139 := flag.Arg(3)
    mbTrans1140 := thrift.NewTMemoryBufferLen(len(arg1139))
    defer mbTrans1140.Close()
    _, err1141 := mbTrans1140.WriteString(arg1139)
    if err1141 != nil {
      Usage()
      return
    }
    factory1142 := thrift.NewTJSONProtocolFactory()
    jsProt1143 := factory1142.GetProtocol(mbTrans1140)
    argvalue2 := rpc.NewISource()
    err1144 := argvalue2.Read(context.Background(), jsProt1143)
    if err1144 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1145 := flag.Arg(4)
    mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
    defer mbTrans1146.Close()
    _, err1147 := mbTrans1146.WriteString(arg1145)
    if err1147 != nil {
      Usage()
      return
    }
    factory1148 := thrift.NewTJSONProtocolFactory()
    jsProt1149 := factory1148.GetProtocol(mbTrans1146)
    argvalue3 := rpc.NewISource()
    err1150 := argvalue3.Read(context.Background(), jsProt1149)
    if err1150 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4b(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AggregateByKey5 requires 5 args")
      flag.Usage()
    }
    arg1151 := flag.Arg(1)
    mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
    defer mbTrans1152.Close()
    _, err1153 := mbTrans1152.WriteString(arg1151)
    if err1153 != nil {
      Usage()
      return
    }
    factory1154 := thrift.NewTJSONProtocolFactory()
    jsProt1155 := factory1154.GetProtocol(mbTrans1152)
    argvalue0 := driver.NewIDataFrameId()
    err1156 := argvalue0.Read(context.Background(), jsProt1155)
    if err1156 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1157 := flag.Arg(2)
    mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
    defer mbTrans1158.Close()
    _, err1159 := mbTrans1158.WriteString(arg1157)
    if err1159 != nil {
      Usage()
      return
    }
    factory1160 := thrift.NewTJSONProtocolFactory()
    jsProt1161 := factory1160.GetProtocol(mbTrans1158)
    argvalue1 := rpc.NewISource()
    err1162 := argvalue1.Read(context.Background(), jsProt1161)
    if err1162 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1163 := flag.Arg(3)
    mbTrans1164 := thrift.NewTMemoryBufferLen(len(arg1163))
    defer mbTrans1164.Close()
    _, err1165 := mbTrans1164.WriteString(arg1163)
    if err1165 != nil {
      Usage()
      return
    }
    factory1166 := thrift.NewTJSONProtocolFactory()
    jsProt1167 := factory1166.GetProtocol(mbTrans1164)
    argvalue2 := rpc.NewISource()
    err1168 := argvalue2.Read(context.Background(), jsProt1167)
    if err1168 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1169 := flag.Arg(4)
    mbTrans1170 := thrift.NewTMemoryBufferLen(len(arg1169))
    defer mbTrans1170.Close()
    _, err1171 := mbTrans1170.WriteString(arg1169)
    if err1171 != nil {
      Usage()
      return
    }
    factory1172 := thrift.NewTJSONProtocolFactory()
    jsProt1173 := factory1172.GetProtocol(mbTrans1170)
    argvalue3 := rpc.NewISource()
    err1174 := argvalue3.Read(context.Background(), jsProt1173)
    if err1174 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err1175 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err1175 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AggregateByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "foldByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FoldByKey requires 4 args")
      flag.Usage()
    }
    arg1176 := flag.Arg(1)
    mbTrans1177 := thrift.NewTMemoryBufferLen(len(arg1176))
    defer mbTrans1177.Close()
    _, err1178 := mbTrans1177.WriteString(arg1176)
    if err1178 != nil {
      Usage()
      return
    }
    factory1179 := thrift.NewTJSONProtocolFactory()
    jsProt1180 := factory1179.GetProtocol(mbTrans1177)
    argvalue0 := driver.NewIDataFrameId()
    err1181 := argvalue0.Read(context.Background(), jsProt1180)
    if err1181 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1182 := flag.Arg(2)
    mbTrans1183 := thrift.NewTMemoryBufferLen(len(arg1182))
    defer mbTrans1183.Close()
    _, err1184 := mbTrans1183.WriteString(arg1182)
    if err1184 != nil {
      Usage()
      return
    }
    factory1185 := thrift.NewTJSONProtocolFactory()
    jsProt1186 := factory1185.GetProtocol(mbTrans1183)
    argvalue1 := rpc.NewISource()
    err1187 := argvalue1.Read(context.Background(), jsProt1186)
    if err1187 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1188 := flag.Arg(3)
    mbTrans1189 := thrift.NewTMemoryBufferLen(len(arg1188))
    defer mbTrans1189.Close()
    _, err1190 := mbTrans1189.WriteString(arg1188)
    if err1190 != nil {
      Usage()
      return
    }
    factory1191 := thrift.NewTJSONProtocolFactory()
    jsProt1192 := factory1191.GetProtocol(mbTrans1189)
    argvalue2 := rpc.NewISource()
    err1193 := argvalue2.Read(context.Background(), jsProt1192)
    if err1193 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.FoldByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "foldByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "FoldByKey5 requires 5 args")
      flag.Usage()
    }
    arg1195 := flag.Arg(1)
    mbTrans1196 := thrift.NewTMemoryBufferLen(len(arg1195))
    defer mbTrans1196.Close()
    _, err1197 := mbTrans1196.WriteString(arg1195)
    if err1197 != nil {
      Usage()
      return
    }
    factory1198 := thrift.NewTJSONProtocolFactory()
    jsProt1199 := factory1198.GetProtocol(mbTrans1196)
    argvalue0 := driver.NewIDataFrameId()
    err1200 := argvalue0.Read(context.Background(), jsProt1199)
    if err1200 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1201 := flag.Arg(2)
    mbTrans1202 := thrift.NewTMemoryBufferLen(len(arg1201))
    defer mbTrans1202.Close()
    _, err1203 := mbTrans1202.WriteString(arg1201)
    if err1203 != nil {
      Usage()
      return
    }
    factory1204 := thrift.NewTJSONProtocolFactory()
    jsProt1205 := factory1204.GetProtocol(mbTrans1202)
    argvalue1 := rpc.NewISource()
    err1206 := argvalue1.Read(context.Background(), jsProt1205)
    if err1206 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1207 := flag.Arg(3)
    mbTrans1208 := thrift.NewTMemoryBufferLen(len(arg1207))
    defer mbTrans1208.Close()
    _, err1209 := mbTrans1208.WriteString(arg1207)
    if err1209 != nil {
      Usage()
      return
    }
    factory1210 := thrift.NewTJSONProtocolFactory()
    jsProt1211 := factory1210.GetProtocol(mbTrans1208)
    argvalue2 := rpc.NewISource()
    err1212 := argvalue2.Read(context.Background(), jsProt1211)
    if err1212 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1213 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1213 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.FoldByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "sortByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey requires 2 args")
      flag.Usage()
    }
    arg1215 := flag.Arg(1)
    mbTrans1216 := thrift.NewTMemoryBufferLen(len(arg1215))
    defer mbTrans1216.Close()
    _, err1217 := mbTrans1216.WriteString(arg1215)
    if err1217 != nil {
      Usage()
      return
    }
    factory1218 := thrift.NewTJSONProtocolFactory()
    jsProt1219 := factory1218.GetProtocol(mbTrans1216)
    argvalue0 := driver.NewIDataFrameId()
    err1220 := argvalue0.Read(context.Background(), jsProt1219)
    if err1220 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3a requires 3 args")
      flag.Usage()
    }
    arg1222 := flag.Arg(1)
    mbTrans1223 := thrift.NewTMemoryBufferLen(len(arg1222))
    defer mbTrans1223.Close()
    _, err1224 := mbTrans1223.WriteString(arg1222)
    if err1224 != nil {
      Usage()
      return
    }
    factory1225 := thrift.NewTJSONProtocolFactory()
    jsProt1226 := factory1225.GetProtocol(mbTrans1223)
    argvalue0 := driver.NewIDataFrameId()
    err1227 := argvalue0.Read(context.Background(), jsProt1226)
    if err1227 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err1229 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1229 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortByKey3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3b requires 3 args")
      flag.Usage()
    }
    arg1230 := flag.Arg(1)
    mbTrans1231 := thrift.NewTMemoryBufferLen(len(arg1230))
    defer mbTrans1231.Close()
    _, err1232 := mbTrans1231.WriteString(arg1230)
    if err1232 != nil {
      Usage()
      return
    }
    factory1233 := thrift.NewTJSONProtocolFactory()
    jsProt1234 := factory1233.GetProtocol(mbTrans1231)
    argvalue0 := driver.NewIDataFrameId()
    err1235 := argvalue0.Read(context.Background(), jsProt1234)
    if err1235 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1236 := flag.Arg(2)
    mbTrans1237 := thrift.NewTMemoryBufferLen(len(arg1236))
    defer mbTrans1237.Close()
    _, err1238 := mbTrans1237.WriteString(arg1236)
    if err1238 != nil {
      Usage()
      return
    }
    factory1239 := thrift.NewTJSONProtocolFactory()
    jsProt1240 := factory1239.GetProtocol(mbTrans1237)
    argvalue1 := rpc.NewISource()
    err1241 := argvalue1.Read(context.Background(), jsProt1240)
    if err1241 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortByKey3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortByKey4 requires 4 args")
      flag.Usage()
    }
    arg1243 := flag.Arg(1)
    mbTrans1244 := thrift.NewTMemoryBufferLen(len(arg1243))
    defer mbTrans1244.Close()
    _, err1245 := mbTrans1244.WriteString(arg1243)
    if err1245 != nil {
      Usage()
      return
    }
    factory1246 := thrift.NewTJSONProtocolFactory()
    jsProt1247 := factory1246.GetProtocol(mbTrans1244)
    argvalue0 := driver.NewIDataFrameId()
    err1248 := argvalue0.Read(context.Background(), jsProt1247)
    if err1248 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1249 := flag.Arg(2)
    mbTrans1250 := thrift.NewTMemoryBufferLen(len(arg1249))
    defer mbTrans1250.Close()
    _, err1251 := mbTrans1250.WriteString(arg1249)
    if err1251 != nil {
      Usage()
      return
    }
    factory1252 := thrift.NewTJSONProtocolFactory()
    jsProt1253 := factory1252.GetProtocol(mbTrans1250)
    argvalue1 := rpc.NewISource()
    err1254 := argvalue1.Read(context.Background(), jsProt1253)
    if err1254 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err1256 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1256 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "keys":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Keys requires 2 args")
      flag.Usage()
    }
    arg1257 := flag.Arg(1)
    mbTrans1258 := thrift.NewTMemoryBufferLen(len(arg1257))
    defer mbTrans1258.Close()
    _, err1259 := mbTrans1258.WriteString(arg1257)
    if err1259 != nil {
      Usage()
      return
    }
    factory1260 := thrift.NewTJSONProtocolFactory()
    jsProt1261 := factory1260.GetProtocol(mbTrans1258)
    argvalue0 := driver.NewIDataFrameId()
    err1262 := argvalue0.Read(context.Background(), jsProt1261)
    if err1262 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1263 := flag.Arg(2)
    mbTrans1264 := thrift.NewTMemoryBufferLen(len(arg1263))
    defer mbTrans1264.Close()
    _, err1265 := mbTrans1264.WriteString(arg1263)
    if err1265 != nil {
      Usage()
      return
    }
    factory1266 := thrift.NewTJSONProtocolFactory()
    jsProt1267 := factory1266.GetProtocol(mbTrans1264)
    argvalue1 := rpc.NewISource()
    err1268 := argvalue1.Read(context.Background(), jsProt1267)
    if err1268 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Keys(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "values":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Values requires 2 args")
      flag.Usage()
    }
    arg1269 := flag.Arg(1)
    mbTrans1270 := thrift.NewTMemoryBufferLen(len(arg1269))
    defer mbTrans1270.Close()
    _, err1271 := mbTrans1270.WriteString(arg1269)
    if err1271 != nil {
      Usage()
      return
    }
    factory1272 := thrift.NewTJSONProtocolFactory()
    jsProt1273 := factory1272.GetProtocol(mbTrans1270)
    argvalue0 := driver.NewIDataFrameId()
    err1274 := argvalue0.Read(context.Background(), jsProt1273)
    if err1274 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1275 := flag.Arg(2)
    mbTrans1276 := thrift.NewTMemoryBufferLen(len(arg1275))
    defer mbTrans1276.Close()
    _, err1277 := mbTrans1276.WriteString(arg1275)
    if err1277 != nil {
      Usage()
      return
    }
    factory1278 := thrift.NewTJSONProtocolFactory()
    jsProt1279 := factory1278.GetProtocol(mbTrans1276)
    argvalue1 := rpc.NewISource()
    err1280 := argvalue1.Read(context.Background(), jsProt1279)
    if err1280 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Values(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sampleByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SampleByKey requires 4 args")
      flag.Usage()
    }
    arg1281 := flag.Arg(1)
    mbTrans1282 := thrift.NewTMemoryBufferLen(len(arg1281))
    defer mbTrans1282.Close()
    _, err1283 := mbTrans1282.WriteString(arg1281)
    if err1283 != nil {
      Usage()
      return
    }
    factory1284 := thrift.NewTJSONProtocolFactory()
    jsProt1285 := factory1284.GetProtocol(mbTrans1282)
    argvalue0 := driver.NewIDataFrameId()
    err1286 := argvalue0.Read(context.Background(), jsProt1285)
    if err1286 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    arg1288 := flag.Arg(3)
    mbTrans1289 := thrift.NewTMemoryBufferLen(len(arg1288))
    defer mbTrans1289.Close()
    _, err1290 := mbTrans1289.WriteString(arg1288)
    if err1290 != nil {
      Usage()
      return
    }
    factory1291 := thrift.NewTJSONProtocolFactory()
    jsProt1292 := factory1291.GetProtocol(mbTrans1289)
    argvalue2 := rpc.NewISource()
    err1293 := argvalue2.Read(context.Background(), jsProt1292)
    if err1293 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err1294 := (strconv.Atoi(flag.Arg(4)))
    if err1294 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SampleByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "countByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByKey requires 2 args")
      flag.Usage()
    }
    arg1295 := flag.Arg(1)
    mbTrans1296 := thrift.NewTMemoryBufferLen(len(arg1295))
    defer mbTrans1296.Close()
    _, err1297 := mbTrans1296.WriteString(arg1295)
    if err1297 != nil {
      Usage()
      return
    }
    factory1298 := thrift.NewTJSONProtocolFactory()
    jsProt1299 := factory1298.GetProtocol(mbTrans1296)
    argvalue0 := driver.NewIDataFrameId()
    err1300 := argvalue0.Read(context.Background(), jsProt1299)
    if err1300 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1301 := flag.Arg(2)
    mbTrans1302 := thrift.NewTMemoryBufferLen(len(arg1301))
    defer mbTrans1302.Close()
    _, err1303 := mbTrans1302.WriteString(arg1301)
    if err1303 != nil {
      Usage()
      return
    }
    factory1304 := thrift.NewTJSONProtocolFactory()
    jsProt1305 := factory1304.GetProtocol(mbTrans1302)
    argvalue1 := rpc.NewISource()
    err1306 := argvalue1.Read(context.Background(), jsProt1305)
    if err1306 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "countByValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByValue requires 2 args")
      flag.Usage()
    }
    arg1307 := flag.Arg(1)
    mbTrans1308 := thrift.NewTMemoryBufferLen(len(arg1307))
    defer mbTrans1308.Close()
    _, err1309 := mbTrans1308.WriteString(arg1307)
    if err1309 != nil {
      Usage()
      return
    }
    factory1310 := thrift.NewTJSONProtocolFactory()
    jsProt1311 := factory1310.GetProtocol(mbTrans1308)
    argvalue0 := driver.NewIDataFrameId()
    err1312 := argvalue0.Read(context.Background(), jsProt1311)
    if err1312 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1313 := flag.Arg(2)
    mbTrans1314 := thrift.NewTMemoryBufferLen(len(arg1313))
    defer mbTrans1314.Close()
    _, err1315 := mbTrans1314.WriteString(arg1313)
    if err1315 != nil {
      Usage()
      return
    }
    factory1316 := thrift.NewTJSONProtocolFactory()
    jsProt1317 := factory1316.GetProtocol(mbTrans1314)
    argvalue1 := rpc.NewISource()
    err1318 := argvalue1.Read(context.Background(), jsProt1317)
    if err1318 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
