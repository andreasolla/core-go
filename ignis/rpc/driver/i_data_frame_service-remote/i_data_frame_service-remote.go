// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/driver"
)

var _ = rpc.GoUnusedProtection__
var _ = driver.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void setName(IDataFrameId id, string name)")
  fmt.Fprintln(os.Stderr, "  void persist(IDataFrameId id, i8 level)")
  fmt.Fprintln(os.Stderr, "  void cache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void unpersist(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void uncache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  i64 partitions(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void saveAsObjectFile(IDataFrameId id, string path, i8 compression)")
  fmt.Fprintln(os.Stderr, "  void saveAsTextFile(IDataFrameId id, string path)")
  fmt.Fprintln(os.Stderr, "  void saveAsJsonFile(IDataFrameId id, string path, bool pretty)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId repartition(IDataFrameId id, i64 numPartitions, bool preserveOrdering, bool global_)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionByRandom(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionByHash(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionBy(IDataFrameId id, ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId map_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId filter(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatmap(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId keyBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitions(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitionsWithIndex(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutorTo(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy2(IDataFrameId id, ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort2(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy3(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId union_(IDataFrameId id, IDataFrameId other, bool preserveOrder)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId union4(IDataFrameId id, IDataFrameId other, bool preserveOrder, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join(IDataFrameId id, IDataFrameId other)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join3a(IDataFrameId id, IDataFrameId other, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join3b(IDataFrameId id, IDataFrameId other, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join4(IDataFrameId id, IDataFrameId other, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct2a(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct2b(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct3(IDataFrameId id, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  i64 reduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeReduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 collect(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 aggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeAggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 fold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeFold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 take(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  void foreach_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachPartition(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  i64 top(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 top4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sample(IDataFrameId id, bool withReplacement, double fraction, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 takeSample(IDataFrameId id, bool withReplacement, i64 num, i32 seed, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 count(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  i64 max(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 max3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatMapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2a(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2b(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey3(IDataFrameId id, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey(IDataFrameId id, ISource src, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey4(IDataFrameId id, ISource src, i64 numPartitions, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey(IDataFrameId id, ISource zero, ISource seqOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4a(IDataFrameId id, ISource zero, ISource seqOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4b(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey5(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey(IDataFrameId id, ISource zero, ISource src, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey5(IDataFrameId id, ISource zero, ISource src, i64 numPartitions, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3a(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3b(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey4(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  i64 keys(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 values(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sampleByKey(IDataFrameId id, bool withReplacement, ISource fractions, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 countByKey(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 countByValue(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := driver.NewIDataFrameServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetName requires 2 args")
      flag.Usage()
    }
    arg296 := flag.Arg(1)
    mbTrans297 := thrift.NewTMemoryBufferLen(len(arg296))
    defer mbTrans297.Close()
    _, err298 := mbTrans297.WriteString(arg296)
    if err298 != nil {
      Usage()
      return
    }
    factory299 := thrift.NewTJSONProtocolFactory()
    jsProt300 := factory299.GetProtocol(mbTrans297)
    argvalue0 := driver.NewIDataFrameId()
    err301 := argvalue0.Read(context.Background(), jsProt300)
    if err301 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "persist":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Persist requires 2 args")
      flag.Usage()
    }
    arg303 := flag.Arg(1)
    mbTrans304 := thrift.NewTMemoryBufferLen(len(arg303))
    defer mbTrans304.Close()
    _, err305 := mbTrans304.WriteString(arg303)
    if err305 != nil {
      Usage()
      return
    }
    factory306 := thrift.NewTJSONProtocolFactory()
    jsProt307 := factory306.GetProtocol(mbTrans304)
    argvalue0 := driver.NewIDataFrameId()
    err308 := argvalue0.Read(context.Background(), jsProt307)
    if err308 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err309 := (strconv.Atoi(flag.Arg(2)))
    if err309 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    fmt.Print(client.Persist(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Cache requires 1 args")
      flag.Usage()
    }
    arg310 := flag.Arg(1)
    mbTrans311 := thrift.NewTMemoryBufferLen(len(arg310))
    defer mbTrans311.Close()
    _, err312 := mbTrans311.WriteString(arg310)
    if err312 != nil {
      Usage()
      return
    }
    factory313 := thrift.NewTJSONProtocolFactory()
    jsProt314 := factory313.GetProtocol(mbTrans311)
    argvalue0 := driver.NewIDataFrameId()
    err315 := argvalue0.Read(context.Background(), jsProt314)
    if err315 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Cache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unpersist":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unpersist requires 1 args")
      flag.Usage()
    }
    arg316 := flag.Arg(1)
    mbTrans317 := thrift.NewTMemoryBufferLen(len(arg316))
    defer mbTrans317.Close()
    _, err318 := mbTrans317.WriteString(arg316)
    if err318 != nil {
      Usage()
      return
    }
    factory319 := thrift.NewTJSONProtocolFactory()
    jsProt320 := factory319.GetProtocol(mbTrans317)
    argvalue0 := driver.NewIDataFrameId()
    err321 := argvalue0.Read(context.Background(), jsProt320)
    if err321 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unpersist(context.Background(), value0))
    fmt.Print("\n")
    break
  case "uncache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Uncache requires 1 args")
      flag.Usage()
    }
    arg322 := flag.Arg(1)
    mbTrans323 := thrift.NewTMemoryBufferLen(len(arg322))
    defer mbTrans323.Close()
    _, err324 := mbTrans323.WriteString(arg322)
    if err324 != nil {
      Usage()
      return
    }
    factory325 := thrift.NewTJSONProtocolFactory()
    jsProt326 := factory325.GetProtocol(mbTrans323)
    argvalue0 := driver.NewIDataFrameId()
    err327 := argvalue0.Read(context.Background(), jsProt326)
    if err327 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Uncache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Partitions requires 1 args")
      flag.Usage()
    }
    arg328 := flag.Arg(1)
    mbTrans329 := thrift.NewTMemoryBufferLen(len(arg328))
    defer mbTrans329.Close()
    _, err330 := mbTrans329.WriteString(arg328)
    if err330 != nil {
      Usage()
      return
    }
    factory331 := thrift.NewTJSONProtocolFactory()
    jsProt332 := factory331.GetProtocol(mbTrans329)
    argvalue0 := driver.NewIDataFrameId()
    err333 := argvalue0.Read(context.Background(), jsProt332)
    if err333 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Partitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "saveAsObjectFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsObjectFile requires 3 args")
      flag.Usage()
    }
    arg334 := flag.Arg(1)
    mbTrans335 := thrift.NewTMemoryBufferLen(len(arg334))
    defer mbTrans335.Close()
    _, err336 := mbTrans335.WriteString(arg334)
    if err336 != nil {
      Usage()
      return
    }
    factory337 := thrift.NewTJSONProtocolFactory()
    jsProt338 := factory337.GetProtocol(mbTrans335)
    argvalue0 := driver.NewIDataFrameId()
    err339 := argvalue0.Read(context.Background(), jsProt338)
    if err339 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err341 := (strconv.Atoi(flag.Arg(3)))
    if err341 != nil {
      Usage()
      return
    }
    argvalue2 := int8(tmp2)
    value2 := argvalue2
    fmt.Print(client.SaveAsObjectFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "saveAsTextFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SaveAsTextFile requires 2 args")
      flag.Usage()
    }
    arg342 := flag.Arg(1)
    mbTrans343 := thrift.NewTMemoryBufferLen(len(arg342))
    defer mbTrans343.Close()
    _, err344 := mbTrans343.WriteString(arg342)
    if err344 != nil {
      Usage()
      return
    }
    factory345 := thrift.NewTJSONProtocolFactory()
    jsProt346 := factory345.GetProtocol(mbTrans343)
    argvalue0 := driver.NewIDataFrameId()
    err347 := argvalue0.Read(context.Background(), jsProt346)
    if err347 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SaveAsTextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "saveAsJsonFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsJsonFile requires 3 args")
      flag.Usage()
    }
    arg349 := flag.Arg(1)
    mbTrans350 := thrift.NewTMemoryBufferLen(len(arg349))
    defer mbTrans350.Close()
    _, err351 := mbTrans350.WriteString(arg349)
    if err351 != nil {
      Usage()
      return
    }
    factory352 := thrift.NewTJSONProtocolFactory()
    jsProt353 := factory352.GetProtocol(mbTrans350)
    argvalue0 := driver.NewIDataFrameId()
    err354 := argvalue0.Read(context.Background(), jsProt353)
    if err354 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SaveAsJsonFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "repartition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Repartition requires 4 args")
      flag.Usage()
    }
    arg357 := flag.Arg(1)
    mbTrans358 := thrift.NewTMemoryBufferLen(len(arg357))
    defer mbTrans358.Close()
    _, err359 := mbTrans358.WriteString(arg357)
    if err359 != nil {
      Usage()
      return
    }
    factory360 := thrift.NewTJSONProtocolFactory()
    jsProt361 := factory360.GetProtocol(mbTrans358)
    argvalue0 := driver.NewIDataFrameId()
    err362 := argvalue0.Read(context.Background(), jsProt361)
    if err362 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err363 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err363 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.Repartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "partitionByRandom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionByRandom requires 2 args")
      flag.Usage()
    }
    arg366 := flag.Arg(1)
    mbTrans367 := thrift.NewTMemoryBufferLen(len(arg366))
    defer mbTrans367.Close()
    _, err368 := mbTrans367.WriteString(arg366)
    if err368 != nil {
      Usage()
      return
    }
    factory369 := thrift.NewTJSONProtocolFactory()
    jsProt370 := factory369.GetProtocol(mbTrans367)
    argvalue0 := driver.NewIDataFrameId()
    err371 := argvalue0.Read(context.Background(), jsProt370)
    if err371 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err372 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err372 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionByRandom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionByHash":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionByHash requires 2 args")
      flag.Usage()
    }
    arg373 := flag.Arg(1)
    mbTrans374 := thrift.NewTMemoryBufferLen(len(arg373))
    defer mbTrans374.Close()
    _, err375 := mbTrans374.WriteString(arg373)
    if err375 != nil {
      Usage()
      return
    }
    factory376 := thrift.NewTJSONProtocolFactory()
    jsProt377 := factory376.GetProtocol(mbTrans374)
    argvalue0 := driver.NewIDataFrameId()
    err378 := argvalue0.Read(context.Background(), jsProt377)
    if err378 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err379 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err379 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionByHash(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionBy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionBy requires 3 args")
      flag.Usage()
    }
    arg380 := flag.Arg(1)
    mbTrans381 := thrift.NewTMemoryBufferLen(len(arg380))
    defer mbTrans381.Close()
    _, err382 := mbTrans381.WriteString(arg380)
    if err382 != nil {
      Usage()
      return
    }
    factory383 := thrift.NewTJSONProtocolFactory()
    jsProt384 := factory383.GetProtocol(mbTrans381)
    argvalue0 := driver.NewIDataFrameId()
    err385 := argvalue0.Read(context.Background(), jsProt384)
    if err385 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg386 := flag.Arg(2)
    mbTrans387 := thrift.NewTMemoryBufferLen(len(arg386))
    defer mbTrans387.Close()
    _, err388 := mbTrans387.WriteString(arg386)
    if err388 != nil {
      Usage()
      return
    }
    factory389 := thrift.NewTJSONProtocolFactory()
    jsProt390 := factory389.GetProtocol(mbTrans387)
    argvalue1 := rpc.NewISource()
    err391 := argvalue1.Read(context.Background(), jsProt390)
    if err391 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err392 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err392 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionBy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "map_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Map_ requires 2 args")
      flag.Usage()
    }
    arg393 := flag.Arg(1)
    mbTrans394 := thrift.NewTMemoryBufferLen(len(arg393))
    defer mbTrans394.Close()
    _, err395 := mbTrans394.WriteString(arg393)
    if err395 != nil {
      Usage()
      return
    }
    factory396 := thrift.NewTJSONProtocolFactory()
    jsProt397 := factory396.GetProtocol(mbTrans394)
    argvalue0 := driver.NewIDataFrameId()
    err398 := argvalue0.Read(context.Background(), jsProt397)
    if err398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg399 := flag.Arg(2)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue1 := rpc.NewISource()
    err404 := argvalue1.Read(context.Background(), jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Map_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "filter":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Filter requires 2 args")
      flag.Usage()
    }
    arg405 := flag.Arg(1)
    mbTrans406 := thrift.NewTMemoryBufferLen(len(arg405))
    defer mbTrans406.Close()
    _, err407 := mbTrans406.WriteString(arg405)
    if err407 != nil {
      Usage()
      return
    }
    factory408 := thrift.NewTJSONProtocolFactory()
    jsProt409 := factory408.GetProtocol(mbTrans406)
    argvalue0 := driver.NewIDataFrameId()
    err410 := argvalue0.Read(context.Background(), jsProt409)
    if err410 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg411 := flag.Arg(2)
    mbTrans412 := thrift.NewTMemoryBufferLen(len(arg411))
    defer mbTrans412.Close()
    _, err413 := mbTrans412.WriteString(arg411)
    if err413 != nil {
      Usage()
      return
    }
    factory414 := thrift.NewTJSONProtocolFactory()
    jsProt415 := factory414.GetProtocol(mbTrans412)
    argvalue1 := rpc.NewISource()
    err416 := argvalue1.Read(context.Background(), jsProt415)
    if err416 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Filter(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "flatmap":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Flatmap requires 2 args")
      flag.Usage()
    }
    arg417 := flag.Arg(1)
    mbTrans418 := thrift.NewTMemoryBufferLen(len(arg417))
    defer mbTrans418.Close()
    _, err419 := mbTrans418.WriteString(arg417)
    if err419 != nil {
      Usage()
      return
    }
    factory420 := thrift.NewTJSONProtocolFactory()
    jsProt421 := factory420.GetProtocol(mbTrans418)
    argvalue0 := driver.NewIDataFrameId()
    err422 := argvalue0.Read(context.Background(), jsProt421)
    if err422 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg423 := flag.Arg(2)
    mbTrans424 := thrift.NewTMemoryBufferLen(len(arg423))
    defer mbTrans424.Close()
    _, err425 := mbTrans424.WriteString(arg423)
    if err425 != nil {
      Usage()
      return
    }
    factory426 := thrift.NewTJSONProtocolFactory()
    jsProt427 := factory426.GetProtocol(mbTrans424)
    argvalue1 := rpc.NewISource()
    err428 := argvalue1.Read(context.Background(), jsProt427)
    if err428 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Flatmap(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "keyBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "KeyBy requires 2 args")
      flag.Usage()
    }
    arg429 := flag.Arg(1)
    mbTrans430 := thrift.NewTMemoryBufferLen(len(arg429))
    defer mbTrans430.Close()
    _, err431 := mbTrans430.WriteString(arg429)
    if err431 != nil {
      Usage()
      return
    }
    factory432 := thrift.NewTJSONProtocolFactory()
    jsProt433 := factory432.GetProtocol(mbTrans430)
    argvalue0 := driver.NewIDataFrameId()
    err434 := argvalue0.Read(context.Background(), jsProt433)
    if err434 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg435 := flag.Arg(2)
    mbTrans436 := thrift.NewTMemoryBufferLen(len(arg435))
    defer mbTrans436.Close()
    _, err437 := mbTrans436.WriteString(arg435)
    if err437 != nil {
      Usage()
      return
    }
    factory438 := thrift.NewTJSONProtocolFactory()
    jsProt439 := factory438.GetProtocol(mbTrans436)
    argvalue1 := rpc.NewISource()
    err440 := argvalue1.Read(context.Background(), jsProt439)
    if err440 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.KeyBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapPartitions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapPartitions requires 2 args")
      flag.Usage()
    }
    arg441 := flag.Arg(1)
    mbTrans442 := thrift.NewTMemoryBufferLen(len(arg441))
    defer mbTrans442.Close()
    _, err443 := mbTrans442.WriteString(arg441)
    if err443 != nil {
      Usage()
      return
    }
    factory444 := thrift.NewTJSONProtocolFactory()
    jsProt445 := factory444.GetProtocol(mbTrans442)
    argvalue0 := driver.NewIDataFrameId()
    err446 := argvalue0.Read(context.Background(), jsProt445)
    if err446 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg447 := flag.Arg(2)
    mbTrans448 := thrift.NewTMemoryBufferLen(len(arg447))
    defer mbTrans448.Close()
    _, err449 := mbTrans448.WriteString(arg447)
    if err449 != nil {
      Usage()
      return
    }
    factory450 := thrift.NewTJSONProtocolFactory()
    jsProt451 := factory450.GetProtocol(mbTrans448)
    argvalue1 := rpc.NewISource()
    err452 := argvalue1.Read(context.Background(), jsProt451)
    if err452 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapPartitions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapPartitionsWithIndex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapPartitionsWithIndex requires 2 args")
      flag.Usage()
    }
    arg453 := flag.Arg(1)
    mbTrans454 := thrift.NewTMemoryBufferLen(len(arg453))
    defer mbTrans454.Close()
    _, err455 := mbTrans454.WriteString(arg453)
    if err455 != nil {
      Usage()
      return
    }
    factory456 := thrift.NewTJSONProtocolFactory()
    jsProt457 := factory456.GetProtocol(mbTrans454)
    argvalue0 := driver.NewIDataFrameId()
    err458 := argvalue0.Read(context.Background(), jsProt457)
    if err458 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg459 := flag.Arg(2)
    mbTrans460 := thrift.NewTMemoryBufferLen(len(arg459))
    defer mbTrans460.Close()
    _, err461 := mbTrans460.WriteString(arg459)
    if err461 != nil {
      Usage()
      return
    }
    factory462 := thrift.NewTJSONProtocolFactory()
    jsProt463 := factory462.GetProtocol(mbTrans460)
    argvalue1 := rpc.NewISource()
    err464 := argvalue1.Read(context.Background(), jsProt463)
    if err464 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapPartitionsWithIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutor requires 2 args")
      flag.Usage()
    }
    arg465 := flag.Arg(1)
    mbTrans466 := thrift.NewTMemoryBufferLen(len(arg465))
    defer mbTrans466.Close()
    _, err467 := mbTrans466.WriteString(arg465)
    if err467 != nil {
      Usage()
      return
    }
    factory468 := thrift.NewTJSONProtocolFactory()
    jsProt469 := factory468.GetProtocol(mbTrans466)
    argvalue0 := driver.NewIDataFrameId()
    err470 := argvalue0.Read(context.Background(), jsProt469)
    if err470 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg471 := flag.Arg(2)
    mbTrans472 := thrift.NewTMemoryBufferLen(len(arg471))
    defer mbTrans472.Close()
    _, err473 := mbTrans472.WriteString(arg471)
    if err473 != nil {
      Usage()
      return
    }
    factory474 := thrift.NewTJSONProtocolFactory()
    jsProt475 := factory474.GetProtocol(mbTrans472)
    argvalue1 := rpc.NewISource()
    err476 := argvalue1.Read(context.Background(), jsProt475)
    if err476 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapExecutorTo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutorTo requires 2 args")
      flag.Usage()
    }
    arg477 := flag.Arg(1)
    mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
    defer mbTrans478.Close()
    _, err479 := mbTrans478.WriteString(arg477)
    if err479 != nil {
      Usage()
      return
    }
    factory480 := thrift.NewTJSONProtocolFactory()
    jsProt481 := factory480.GetProtocol(mbTrans478)
    argvalue0 := driver.NewIDataFrameId()
    err482 := argvalue0.Read(context.Background(), jsProt481)
    if err482 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg483 := flag.Arg(2)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil {
      Usage()
      return
    }
    factory486 := thrift.NewTJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    argvalue1 := rpc.NewISource()
    err488 := argvalue1.Read(context.Background(), jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutorTo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupBy requires 2 args")
      flag.Usage()
    }
    arg489 := flag.Arg(1)
    mbTrans490 := thrift.NewTMemoryBufferLen(len(arg489))
    defer mbTrans490.Close()
    _, err491 := mbTrans490.WriteString(arg489)
    if err491 != nil {
      Usage()
      return
    }
    factory492 := thrift.NewTJSONProtocolFactory()
    jsProt493 := factory492.GetProtocol(mbTrans490)
    argvalue0 := driver.NewIDataFrameId()
    err494 := argvalue0.Read(context.Background(), jsProt493)
    if err494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg495 := flag.Arg(2)
    mbTrans496 := thrift.NewTMemoryBufferLen(len(arg495))
    defer mbTrans496.Close()
    _, err497 := mbTrans496.WriteString(arg495)
    if err497 != nil {
      Usage()
      return
    }
    factory498 := thrift.NewTJSONProtocolFactory()
    jsProt499 := factory498.GetProtocol(mbTrans496)
    argvalue1 := rpc.NewISource()
    err500 := argvalue1.Read(context.Background(), jsProt499)
    if err500 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupBy2 requires 3 args")
      flag.Usage()
    }
    arg501 := flag.Arg(1)
    mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
    defer mbTrans502.Close()
    _, err503 := mbTrans502.WriteString(arg501)
    if err503 != nil {
      Usage()
      return
    }
    factory504 := thrift.NewTJSONProtocolFactory()
    jsProt505 := factory504.GetProtocol(mbTrans502)
    argvalue0 := driver.NewIDataFrameId()
    err506 := argvalue0.Read(context.Background(), jsProt505)
    if err506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg507 := flag.Arg(2)
    mbTrans508 := thrift.NewTMemoryBufferLen(len(arg507))
    defer mbTrans508.Close()
    _, err509 := mbTrans508.WriteString(arg507)
    if err509 != nil {
      Usage()
      return
    }
    factory510 := thrift.NewTJSONProtocolFactory()
    jsProt511 := factory510.GetProtocol(mbTrans508)
    argvalue1 := rpc.NewISource()
    err512 := argvalue1.Read(context.Background(), jsProt511)
    if err512 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err513 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err513 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupBy2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sort requires 2 args")
      flag.Usage()
    }
    arg514 := flag.Arg(1)
    mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
    defer mbTrans515.Close()
    _, err516 := mbTrans515.WriteString(arg514)
    if err516 != nil {
      Usage()
      return
    }
    factory517 := thrift.NewTJSONProtocolFactory()
    jsProt518 := factory517.GetProtocol(mbTrans515)
    argvalue0 := driver.NewIDataFrameId()
    err519 := argvalue0.Read(context.Background(), jsProt518)
    if err519 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.Sort(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sort2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Sort2 requires 3 args")
      flag.Usage()
    }
    arg521 := flag.Arg(1)
    mbTrans522 := thrift.NewTMemoryBufferLen(len(arg521))
    defer mbTrans522.Close()
    _, err523 := mbTrans522.WriteString(arg521)
    if err523 != nil {
      Usage()
      return
    }
    factory524 := thrift.NewTJSONProtocolFactory()
    jsProt525 := factory524.GetProtocol(mbTrans522)
    argvalue0 := driver.NewIDataFrameId()
    err526 := argvalue0.Read(context.Background(), jsProt525)
    if err526 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err528 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err528 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Sort2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortBy requires 3 args")
      flag.Usage()
    }
    arg529 := flag.Arg(1)
    mbTrans530 := thrift.NewTMemoryBufferLen(len(arg529))
    defer mbTrans530.Close()
    _, err531 := mbTrans530.WriteString(arg529)
    if err531 != nil {
      Usage()
      return
    }
    factory532 := thrift.NewTJSONProtocolFactory()
    jsProt533 := factory532.GetProtocol(mbTrans530)
    argvalue0 := driver.NewIDataFrameId()
    err534 := argvalue0.Read(context.Background(), jsProt533)
    if err534 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg535 := flag.Arg(2)
    mbTrans536 := thrift.NewTMemoryBufferLen(len(arg535))
    defer mbTrans536.Close()
    _, err537 := mbTrans536.WriteString(arg535)
    if err537 != nil {
      Usage()
      return
    }
    factory538 := thrift.NewTJSONProtocolFactory()
    jsProt539 := factory538.GetProtocol(mbTrans536)
    argvalue1 := rpc.NewISource()
    err540 := argvalue1.Read(context.Background(), jsProt539)
    if err540 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortBy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy3":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortBy3 requires 4 args")
      flag.Usage()
    }
    arg542 := flag.Arg(1)
    mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
    defer mbTrans543.Close()
    _, err544 := mbTrans543.WriteString(arg542)
    if err544 != nil {
      Usage()
      return
    }
    factory545 := thrift.NewTJSONProtocolFactory()
    jsProt546 := factory545.GetProtocol(mbTrans543)
    argvalue0 := driver.NewIDataFrameId()
    err547 := argvalue0.Read(context.Background(), jsProt546)
    if err547 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg548 := flag.Arg(2)
    mbTrans549 := thrift.NewTMemoryBufferLen(len(arg548))
    defer mbTrans549.Close()
    _, err550 := mbTrans549.WriteString(arg548)
    if err550 != nil {
      Usage()
      return
    }
    factory551 := thrift.NewTJSONProtocolFactory()
    jsProt552 := factory551.GetProtocol(mbTrans549)
    argvalue1 := rpc.NewISource()
    err553 := argvalue1.Read(context.Background(), jsProt552)
    if err553 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err555 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err555 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortBy3(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "union_":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Union_ requires 3 args")
      flag.Usage()
    }
    arg556 := flag.Arg(1)
    mbTrans557 := thrift.NewTMemoryBufferLen(len(arg556))
    defer mbTrans557.Close()
    _, err558 := mbTrans557.WriteString(arg556)
    if err558 != nil {
      Usage()
      return
    }
    factory559 := thrift.NewTJSONProtocolFactory()
    jsProt560 := factory559.GetProtocol(mbTrans557)
    argvalue0 := driver.NewIDataFrameId()
    err561 := argvalue0.Read(context.Background(), jsProt560)
    if err561 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg562 := flag.Arg(2)
    mbTrans563 := thrift.NewTMemoryBufferLen(len(arg562))
    defer mbTrans563.Close()
    _, err564 := mbTrans563.WriteString(arg562)
    if err564 != nil {
      Usage()
      return
    }
    factory565 := thrift.NewTJSONProtocolFactory()
    jsProt566 := factory565.GetProtocol(mbTrans563)
    argvalue1 := driver.NewIDataFrameId()
    err567 := argvalue1.Read(context.Background(), jsProt566)
    if err567 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.Union_(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "union4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Union4 requires 4 args")
      flag.Usage()
    }
    arg569 := flag.Arg(1)
    mbTrans570 := thrift.NewTMemoryBufferLen(len(arg569))
    defer mbTrans570.Close()
    _, err571 := mbTrans570.WriteString(arg569)
    if err571 != nil {
      Usage()
      return
    }
    factory572 := thrift.NewTJSONProtocolFactory()
    jsProt573 := factory572.GetProtocol(mbTrans570)
    argvalue0 := driver.NewIDataFrameId()
    err574 := argvalue0.Read(context.Background(), jsProt573)
    if err574 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg575 := flag.Arg(2)
    mbTrans576 := thrift.NewTMemoryBufferLen(len(arg575))
    defer mbTrans576.Close()
    _, err577 := mbTrans576.WriteString(arg575)
    if err577 != nil {
      Usage()
      return
    }
    factory578 := thrift.NewTJSONProtocolFactory()
    jsProt579 := factory578.GetProtocol(mbTrans576)
    argvalue1 := driver.NewIDataFrameId()
    err580 := argvalue1.Read(context.Background(), jsProt579)
    if err580 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg582 := flag.Arg(4)
    mbTrans583 := thrift.NewTMemoryBufferLen(len(arg582))
    defer mbTrans583.Close()
    _, err584 := mbTrans583.WriteString(arg582)
    if err584 != nil {
      Usage()
      return
    }
    factory585 := thrift.NewTJSONProtocolFactory()
    jsProt586 := factory585.GetProtocol(mbTrans583)
    argvalue3 := rpc.NewISource()
    err587 := argvalue3.Read(context.Background(), jsProt586)
    if err587 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Union4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "join":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Join requires 2 args")
      flag.Usage()
    }
    arg588 := flag.Arg(1)
    mbTrans589 := thrift.NewTMemoryBufferLen(len(arg588))
    defer mbTrans589.Close()
    _, err590 := mbTrans589.WriteString(arg588)
    if err590 != nil {
      Usage()
      return
    }
    factory591 := thrift.NewTJSONProtocolFactory()
    jsProt592 := factory591.GetProtocol(mbTrans589)
    argvalue0 := driver.NewIDataFrameId()
    err593 := argvalue0.Read(context.Background(), jsProt592)
    if err593 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg594 := flag.Arg(2)
    mbTrans595 := thrift.NewTMemoryBufferLen(len(arg594))
    defer mbTrans595.Close()
    _, err596 := mbTrans595.WriteString(arg594)
    if err596 != nil {
      Usage()
      return
    }
    factory597 := thrift.NewTJSONProtocolFactory()
    jsProt598 := factory597.GetProtocol(mbTrans595)
    argvalue1 := driver.NewIDataFrameId()
    err599 := argvalue1.Read(context.Background(), jsProt598)
    if err599 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Join(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "join3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3a requires 3 args")
      flag.Usage()
    }
    arg600 := flag.Arg(1)
    mbTrans601 := thrift.NewTMemoryBufferLen(len(arg600))
    defer mbTrans601.Close()
    _, err602 := mbTrans601.WriteString(arg600)
    if err602 != nil {
      Usage()
      return
    }
    factory603 := thrift.NewTJSONProtocolFactory()
    jsProt604 := factory603.GetProtocol(mbTrans601)
    argvalue0 := driver.NewIDataFrameId()
    err605 := argvalue0.Read(context.Background(), jsProt604)
    if err605 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg606 := flag.Arg(2)
    mbTrans607 := thrift.NewTMemoryBufferLen(len(arg606))
    defer mbTrans607.Close()
    _, err608 := mbTrans607.WriteString(arg606)
    if err608 != nil {
      Usage()
      return
    }
    factory609 := thrift.NewTJSONProtocolFactory()
    jsProt610 := factory609.GetProtocol(mbTrans607)
    argvalue1 := driver.NewIDataFrameId()
    err611 := argvalue1.Read(context.Background(), jsProt610)
    if err611 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err612 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err612 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3b requires 3 args")
      flag.Usage()
    }
    arg613 := flag.Arg(1)
    mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
    defer mbTrans614.Close()
    _, err615 := mbTrans614.WriteString(arg613)
    if err615 != nil {
      Usage()
      return
    }
    factory616 := thrift.NewTJSONProtocolFactory()
    jsProt617 := factory616.GetProtocol(mbTrans614)
    argvalue0 := driver.NewIDataFrameId()
    err618 := argvalue0.Read(context.Background(), jsProt617)
    if err618 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg619 := flag.Arg(2)
    mbTrans620 := thrift.NewTMemoryBufferLen(len(arg619))
    defer mbTrans620.Close()
    _, err621 := mbTrans620.WriteString(arg619)
    if err621 != nil {
      Usage()
      return
    }
    factory622 := thrift.NewTJSONProtocolFactory()
    jsProt623 := factory622.GetProtocol(mbTrans620)
    argvalue1 := driver.NewIDataFrameId()
    err624 := argvalue1.Read(context.Background(), jsProt623)
    if err624 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg625 := flag.Arg(3)
    mbTrans626 := thrift.NewTMemoryBufferLen(len(arg625))
    defer mbTrans626.Close()
    _, err627 := mbTrans626.WriteString(arg625)
    if err627 != nil {
      Usage()
      return
    }
    factory628 := thrift.NewTJSONProtocolFactory()
    jsProt629 := factory628.GetProtocol(mbTrans626)
    argvalue2 := rpc.NewISource()
    err630 := argvalue2.Read(context.Background(), jsProt629)
    if err630 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Join4 requires 4 args")
      flag.Usage()
    }
    arg631 := flag.Arg(1)
    mbTrans632 := thrift.NewTMemoryBufferLen(len(arg631))
    defer mbTrans632.Close()
    _, err633 := mbTrans632.WriteString(arg631)
    if err633 != nil {
      Usage()
      return
    }
    factory634 := thrift.NewTJSONProtocolFactory()
    jsProt635 := factory634.GetProtocol(mbTrans632)
    argvalue0 := driver.NewIDataFrameId()
    err636 := argvalue0.Read(context.Background(), jsProt635)
    if err636 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg637 := flag.Arg(2)
    mbTrans638 := thrift.NewTMemoryBufferLen(len(arg637))
    defer mbTrans638.Close()
    _, err639 := mbTrans638.WriteString(arg637)
    if err639 != nil {
      Usage()
      return
    }
    factory640 := thrift.NewTJSONProtocolFactory()
    jsProt641 := factory640.GetProtocol(mbTrans638)
    argvalue1 := driver.NewIDataFrameId()
    err642 := argvalue1.Read(context.Background(), jsProt641)
    if err642 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err643 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err643 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg644 := flag.Arg(4)
    mbTrans645 := thrift.NewTMemoryBufferLen(len(arg644))
    defer mbTrans645.Close()
    _, err646 := mbTrans645.WriteString(arg644)
    if err646 != nil {
      Usage()
      return
    }
    factory647 := thrift.NewTJSONProtocolFactory()
    jsProt648 := factory647.GetProtocol(mbTrans645)
    argvalue3 := rpc.NewISource()
    err649 := argvalue3.Read(context.Background(), jsProt648)
    if err649 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Join4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "distinct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Distinct requires 1 args")
      flag.Usage()
    }
    arg650 := flag.Arg(1)
    mbTrans651 := thrift.NewTMemoryBufferLen(len(arg650))
    defer mbTrans651.Close()
    _, err652 := mbTrans651.WriteString(arg650)
    if err652 != nil {
      Usage()
      return
    }
    factory653 := thrift.NewTJSONProtocolFactory()
    jsProt654 := factory653.GetProtocol(mbTrans651)
    argvalue0 := driver.NewIDataFrameId()
    err655 := argvalue0.Read(context.Background(), jsProt654)
    if err655 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Distinct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "distinct2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2a requires 2 args")
      flag.Usage()
    }
    arg656 := flag.Arg(1)
    mbTrans657 := thrift.NewTMemoryBufferLen(len(arg656))
    defer mbTrans657.Close()
    _, err658 := mbTrans657.WriteString(arg656)
    if err658 != nil {
      Usage()
      return
    }
    factory659 := thrift.NewTJSONProtocolFactory()
    jsProt660 := factory659.GetProtocol(mbTrans657)
    argvalue0 := driver.NewIDataFrameId()
    err661 := argvalue0.Read(context.Background(), jsProt660)
    if err661 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err662 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err662 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "distinct2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2b requires 2 args")
      flag.Usage()
    }
    arg663 := flag.Arg(1)
    mbTrans664 := thrift.NewTMemoryBufferLen(len(arg663))
    defer mbTrans664.Close()
    _, err665 := mbTrans664.WriteString(arg663)
    if err665 != nil {
      Usage()
      return
    }
    factory666 := thrift.NewTJSONProtocolFactory()
    jsProt667 := factory666.GetProtocol(mbTrans664)
    argvalue0 := driver.NewIDataFrameId()
    err668 := argvalue0.Read(context.Background(), jsProt667)
    if err668 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg669 := flag.Arg(2)
    mbTrans670 := thrift.NewTMemoryBufferLen(len(arg669))
    defer mbTrans670.Close()
    _, err671 := mbTrans670.WriteString(arg669)
    if err671 != nil {
      Usage()
      return
    }
    factory672 := thrift.NewTJSONProtocolFactory()
    jsProt673 := factory672.GetProtocol(mbTrans670)
    argvalue1 := rpc.NewISource()
    err674 := argvalue1.Read(context.Background(), jsProt673)
    if err674 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "distinct3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Distinct3 requires 3 args")
      flag.Usage()
    }
    arg675 := flag.Arg(1)
    mbTrans676 := thrift.NewTMemoryBufferLen(len(arg675))
    defer mbTrans676.Close()
    _, err677 := mbTrans676.WriteString(arg675)
    if err677 != nil {
      Usage()
      return
    }
    factory678 := thrift.NewTJSONProtocolFactory()
    jsProt679 := factory678.GetProtocol(mbTrans676)
    argvalue0 := driver.NewIDataFrameId()
    err680 := argvalue0.Read(context.Background(), jsProt679)
    if err680 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err681 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err681 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg682 := flag.Arg(3)
    mbTrans683 := thrift.NewTMemoryBufferLen(len(arg682))
    defer mbTrans683.Close()
    _, err684 := mbTrans683.WriteString(arg682)
    if err684 != nil {
      Usage()
      return
    }
    factory685 := thrift.NewTJSONProtocolFactory()
    jsProt686 := factory685.GetProtocol(mbTrans683)
    argvalue2 := rpc.NewISource()
    err687 := argvalue2.Read(context.Background(), jsProt686)
    if err687 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Distinct3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Reduce requires 3 args")
      flag.Usage()
    }
    arg688 := flag.Arg(1)
    mbTrans689 := thrift.NewTMemoryBufferLen(len(arg688))
    defer mbTrans689.Close()
    _, err690 := mbTrans689.WriteString(arg688)
    if err690 != nil {
      Usage()
      return
    }
    factory691 := thrift.NewTJSONProtocolFactory()
    jsProt692 := factory691.GetProtocol(mbTrans689)
    argvalue0 := driver.NewIDataFrameId()
    err693 := argvalue0.Read(context.Background(), jsProt692)
    if err693 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg694 := flag.Arg(2)
    mbTrans695 := thrift.NewTMemoryBufferLen(len(arg694))
    defer mbTrans695.Close()
    _, err696 := mbTrans695.WriteString(arg694)
    if err696 != nil {
      Usage()
      return
    }
    factory697 := thrift.NewTJSONProtocolFactory()
    jsProt698 := factory697.GetProtocol(mbTrans695)
    argvalue1 := rpc.NewISource()
    err699 := argvalue1.Read(context.Background(), jsProt698)
    if err699 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg700 := flag.Arg(3)
    mbTrans701 := thrift.NewTMemoryBufferLen(len(arg700))
    defer mbTrans701.Close()
    _, err702 := mbTrans701.WriteString(arg700)
    if err702 != nil {
      Usage()
      return
    }
    factory703 := thrift.NewTJSONProtocolFactory()
    jsProt704 := factory703.GetProtocol(mbTrans701)
    argvalue2 := rpc.NewISource()
    err705 := argvalue2.Read(context.Background(), jsProt704)
    if err705 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Reduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "treeReduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TreeReduce requires 3 args")
      flag.Usage()
    }
    arg706 := flag.Arg(1)
    mbTrans707 := thrift.NewTMemoryBufferLen(len(arg706))
    defer mbTrans707.Close()
    _, err708 := mbTrans707.WriteString(arg706)
    if err708 != nil {
      Usage()
      return
    }
    factory709 := thrift.NewTJSONProtocolFactory()
    jsProt710 := factory709.GetProtocol(mbTrans707)
    argvalue0 := driver.NewIDataFrameId()
    err711 := argvalue0.Read(context.Background(), jsProt710)
    if err711 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg712 := flag.Arg(2)
    mbTrans713 := thrift.NewTMemoryBufferLen(len(arg712))
    defer mbTrans713.Close()
    _, err714 := mbTrans713.WriteString(arg712)
    if err714 != nil {
      Usage()
      return
    }
    factory715 := thrift.NewTJSONProtocolFactory()
    jsProt716 := factory715.GetProtocol(mbTrans713)
    argvalue1 := rpc.NewISource()
    err717 := argvalue1.Read(context.Background(), jsProt716)
    if err717 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg718 := flag.Arg(3)
    mbTrans719 := thrift.NewTMemoryBufferLen(len(arg718))
    defer mbTrans719.Close()
    _, err720 := mbTrans719.WriteString(arg718)
    if err720 != nil {
      Usage()
      return
    }
    factory721 := thrift.NewTJSONProtocolFactory()
    jsProt722 := factory721.GetProtocol(mbTrans719)
    argvalue2 := rpc.NewISource()
    err723 := argvalue2.Read(context.Background(), jsProt722)
    if err723 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TreeReduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "collect":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Collect requires 2 args")
      flag.Usage()
    }
    arg724 := flag.Arg(1)
    mbTrans725 := thrift.NewTMemoryBufferLen(len(arg724))
    defer mbTrans725.Close()
    _, err726 := mbTrans725.WriteString(arg724)
    if err726 != nil {
      Usage()
      return
    }
    factory727 := thrift.NewTJSONProtocolFactory()
    jsProt728 := factory727.GetProtocol(mbTrans725)
    argvalue0 := driver.NewIDataFrameId()
    err729 := argvalue0.Read(context.Background(), jsProt728)
    if err729 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg730 := flag.Arg(2)
    mbTrans731 := thrift.NewTMemoryBufferLen(len(arg730))
    defer mbTrans731.Close()
    _, err732 := mbTrans731.WriteString(arg730)
    if err732 != nil {
      Usage()
      return
    }
    factory733 := thrift.NewTJSONProtocolFactory()
    jsProt734 := factory733.GetProtocol(mbTrans731)
    argvalue1 := rpc.NewISource()
    err735 := argvalue1.Read(context.Background(), jsProt734)
    if err735 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Collect(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "aggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "Aggregate requires 5 args")
      flag.Usage()
    }
    arg736 := flag.Arg(1)
    mbTrans737 := thrift.NewTMemoryBufferLen(len(arg736))
    defer mbTrans737.Close()
    _, err738 := mbTrans737.WriteString(arg736)
    if err738 != nil {
      Usage()
      return
    }
    factory739 := thrift.NewTJSONProtocolFactory()
    jsProt740 := factory739.GetProtocol(mbTrans737)
    argvalue0 := driver.NewIDataFrameId()
    err741 := argvalue0.Read(context.Background(), jsProt740)
    if err741 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg742 := flag.Arg(2)
    mbTrans743 := thrift.NewTMemoryBufferLen(len(arg742))
    defer mbTrans743.Close()
    _, err744 := mbTrans743.WriteString(arg742)
    if err744 != nil {
      Usage()
      return
    }
    factory745 := thrift.NewTJSONProtocolFactory()
    jsProt746 := factory745.GetProtocol(mbTrans743)
    argvalue1 := rpc.NewISource()
    err747 := argvalue1.Read(context.Background(), jsProt746)
    if err747 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg748 := flag.Arg(3)
    mbTrans749 := thrift.NewTMemoryBufferLen(len(arg748))
    defer mbTrans749.Close()
    _, err750 := mbTrans749.WriteString(arg748)
    if err750 != nil {
      Usage()
      return
    }
    factory751 := thrift.NewTJSONProtocolFactory()
    jsProt752 := factory751.GetProtocol(mbTrans749)
    argvalue2 := rpc.NewISource()
    err753 := argvalue2.Read(context.Background(), jsProt752)
    if err753 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg754 := flag.Arg(4)
    mbTrans755 := thrift.NewTMemoryBufferLen(len(arg754))
    defer mbTrans755.Close()
    _, err756 := mbTrans755.WriteString(arg754)
    if err756 != nil {
      Usage()
      return
    }
    factory757 := thrift.NewTJSONProtocolFactory()
    jsProt758 := factory757.GetProtocol(mbTrans755)
    argvalue3 := rpc.NewISource()
    err759 := argvalue3.Read(context.Background(), jsProt758)
    if err759 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg760 := flag.Arg(5)
    mbTrans761 := thrift.NewTMemoryBufferLen(len(arg760))
    defer mbTrans761.Close()
    _, err762 := mbTrans761.WriteString(arg760)
    if err762 != nil {
      Usage()
      return
    }
    factory763 := thrift.NewTJSONProtocolFactory()
    jsProt764 := factory763.GetProtocol(mbTrans761)
    argvalue4 := rpc.NewISource()
    err765 := argvalue4.Read(context.Background(), jsProt764)
    if err765 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.Aggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "treeAggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TreeAggregate requires 5 args")
      flag.Usage()
    }
    arg766 := flag.Arg(1)
    mbTrans767 := thrift.NewTMemoryBufferLen(len(arg766))
    defer mbTrans767.Close()
    _, err768 := mbTrans767.WriteString(arg766)
    if err768 != nil {
      Usage()
      return
    }
    factory769 := thrift.NewTJSONProtocolFactory()
    jsProt770 := factory769.GetProtocol(mbTrans767)
    argvalue0 := driver.NewIDataFrameId()
    err771 := argvalue0.Read(context.Background(), jsProt770)
    if err771 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg772 := flag.Arg(2)
    mbTrans773 := thrift.NewTMemoryBufferLen(len(arg772))
    defer mbTrans773.Close()
    _, err774 := mbTrans773.WriteString(arg772)
    if err774 != nil {
      Usage()
      return
    }
    factory775 := thrift.NewTJSONProtocolFactory()
    jsProt776 := factory775.GetProtocol(mbTrans773)
    argvalue1 := rpc.NewISource()
    err777 := argvalue1.Read(context.Background(), jsProt776)
    if err777 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg778 := flag.Arg(3)
    mbTrans779 := thrift.NewTMemoryBufferLen(len(arg778))
    defer mbTrans779.Close()
    _, err780 := mbTrans779.WriteString(arg778)
    if err780 != nil {
      Usage()
      return
    }
    factory781 := thrift.NewTJSONProtocolFactory()
    jsProt782 := factory781.GetProtocol(mbTrans779)
    argvalue2 := rpc.NewISource()
    err783 := argvalue2.Read(context.Background(), jsProt782)
    if err783 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg784 := flag.Arg(4)
    mbTrans785 := thrift.NewTMemoryBufferLen(len(arg784))
    defer mbTrans785.Close()
    _, err786 := mbTrans785.WriteString(arg784)
    if err786 != nil {
      Usage()
      return
    }
    factory787 := thrift.NewTJSONProtocolFactory()
    jsProt788 := factory787.GetProtocol(mbTrans785)
    argvalue3 := rpc.NewISource()
    err789 := argvalue3.Read(context.Background(), jsProt788)
    if err789 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg790 := flag.Arg(5)
    mbTrans791 := thrift.NewTMemoryBufferLen(len(arg790))
    defer mbTrans791.Close()
    _, err792 := mbTrans791.WriteString(arg790)
    if err792 != nil {
      Usage()
      return
    }
    factory793 := thrift.NewTJSONProtocolFactory()
    jsProt794 := factory793.GetProtocol(mbTrans791)
    argvalue4 := rpc.NewISource()
    err795 := argvalue4.Read(context.Background(), jsProt794)
    if err795 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TreeAggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "fold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Fold requires 4 args")
      flag.Usage()
    }
    arg796 := flag.Arg(1)
    mbTrans797 := thrift.NewTMemoryBufferLen(len(arg796))
    defer mbTrans797.Close()
    _, err798 := mbTrans797.WriteString(arg796)
    if err798 != nil {
      Usage()
      return
    }
    factory799 := thrift.NewTJSONProtocolFactory()
    jsProt800 := factory799.GetProtocol(mbTrans797)
    argvalue0 := driver.NewIDataFrameId()
    err801 := argvalue0.Read(context.Background(), jsProt800)
    if err801 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg802 := flag.Arg(2)
    mbTrans803 := thrift.NewTMemoryBufferLen(len(arg802))
    defer mbTrans803.Close()
    _, err804 := mbTrans803.WriteString(arg802)
    if err804 != nil {
      Usage()
      return
    }
    factory805 := thrift.NewTJSONProtocolFactory()
    jsProt806 := factory805.GetProtocol(mbTrans803)
    argvalue1 := rpc.NewISource()
    err807 := argvalue1.Read(context.Background(), jsProt806)
    if err807 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg808 := flag.Arg(3)
    mbTrans809 := thrift.NewTMemoryBufferLen(len(arg808))
    defer mbTrans809.Close()
    _, err810 := mbTrans809.WriteString(arg808)
    if err810 != nil {
      Usage()
      return
    }
    factory811 := thrift.NewTJSONProtocolFactory()
    jsProt812 := factory811.GetProtocol(mbTrans809)
    argvalue2 := rpc.NewISource()
    err813 := argvalue2.Read(context.Background(), jsProt812)
    if err813 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg814 := flag.Arg(4)
    mbTrans815 := thrift.NewTMemoryBufferLen(len(arg814))
    defer mbTrans815.Close()
    _, err816 := mbTrans815.WriteString(arg814)
    if err816 != nil {
      Usage()
      return
    }
    factory817 := thrift.NewTJSONProtocolFactory()
    jsProt818 := factory817.GetProtocol(mbTrans815)
    argvalue3 := rpc.NewISource()
    err819 := argvalue3.Read(context.Background(), jsProt818)
    if err819 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Fold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "treeFold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TreeFold requires 4 args")
      flag.Usage()
    }
    arg820 := flag.Arg(1)
    mbTrans821 := thrift.NewTMemoryBufferLen(len(arg820))
    defer mbTrans821.Close()
    _, err822 := mbTrans821.WriteString(arg820)
    if err822 != nil {
      Usage()
      return
    }
    factory823 := thrift.NewTJSONProtocolFactory()
    jsProt824 := factory823.GetProtocol(mbTrans821)
    argvalue0 := driver.NewIDataFrameId()
    err825 := argvalue0.Read(context.Background(), jsProt824)
    if err825 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg826 := flag.Arg(2)
    mbTrans827 := thrift.NewTMemoryBufferLen(len(arg826))
    defer mbTrans827.Close()
    _, err828 := mbTrans827.WriteString(arg826)
    if err828 != nil {
      Usage()
      return
    }
    factory829 := thrift.NewTJSONProtocolFactory()
    jsProt830 := factory829.GetProtocol(mbTrans827)
    argvalue1 := rpc.NewISource()
    err831 := argvalue1.Read(context.Background(), jsProt830)
    if err831 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg832 := flag.Arg(3)
    mbTrans833 := thrift.NewTMemoryBufferLen(len(arg832))
    defer mbTrans833.Close()
    _, err834 := mbTrans833.WriteString(arg832)
    if err834 != nil {
      Usage()
      return
    }
    factory835 := thrift.NewTJSONProtocolFactory()
    jsProt836 := factory835.GetProtocol(mbTrans833)
    argvalue2 := rpc.NewISource()
    err837 := argvalue2.Read(context.Background(), jsProt836)
    if err837 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg838 := flag.Arg(4)
    mbTrans839 := thrift.NewTMemoryBufferLen(len(arg838))
    defer mbTrans839.Close()
    _, err840 := mbTrans839.WriteString(arg838)
    if err840 != nil {
      Usage()
      return
    }
    factory841 := thrift.NewTJSONProtocolFactory()
    jsProt842 := factory841.GetProtocol(mbTrans839)
    argvalue3 := rpc.NewISource()
    err843 := argvalue3.Read(context.Background(), jsProt842)
    if err843 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TreeFold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "take":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Take requires 3 args")
      flag.Usage()
    }
    arg844 := flag.Arg(1)
    mbTrans845 := thrift.NewTMemoryBufferLen(len(arg844))
    defer mbTrans845.Close()
    _, err846 := mbTrans845.WriteString(arg844)
    if err846 != nil {
      Usage()
      return
    }
    factory847 := thrift.NewTJSONProtocolFactory()
    jsProt848 := factory847.GetProtocol(mbTrans845)
    argvalue0 := driver.NewIDataFrameId()
    err849 := argvalue0.Read(context.Background(), jsProt848)
    if err849 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err850 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err850 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg851 := flag.Arg(3)
    mbTrans852 := thrift.NewTMemoryBufferLen(len(arg851))
    defer mbTrans852.Close()
    _, err853 := mbTrans852.WriteString(arg851)
    if err853 != nil {
      Usage()
      return
    }
    factory854 := thrift.NewTJSONProtocolFactory()
    jsProt855 := factory854.GetProtocol(mbTrans852)
    argvalue2 := rpc.NewISource()
    err856 := argvalue2.Read(context.Background(), jsProt855)
    if err856 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Take(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "foreach_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Foreach_ requires 2 args")
      flag.Usage()
    }
    arg857 := flag.Arg(1)
    mbTrans858 := thrift.NewTMemoryBufferLen(len(arg857))
    defer mbTrans858.Close()
    _, err859 := mbTrans858.WriteString(arg857)
    if err859 != nil {
      Usage()
      return
    }
    factory860 := thrift.NewTJSONProtocolFactory()
    jsProt861 := factory860.GetProtocol(mbTrans858)
    argvalue0 := driver.NewIDataFrameId()
    err862 := argvalue0.Read(context.Background(), jsProt861)
    if err862 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg863 := flag.Arg(2)
    mbTrans864 := thrift.NewTMemoryBufferLen(len(arg863))
    defer mbTrans864.Close()
    _, err865 := mbTrans864.WriteString(arg863)
    if err865 != nil {
      Usage()
      return
    }
    factory866 := thrift.NewTJSONProtocolFactory()
    jsProt867 := factory866.GetProtocol(mbTrans864)
    argvalue1 := rpc.NewISource()
    err868 := argvalue1.Read(context.Background(), jsProt867)
    if err868 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Foreach_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachPartition":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachPartition requires 2 args")
      flag.Usage()
    }
    arg869 := flag.Arg(1)
    mbTrans870 := thrift.NewTMemoryBufferLen(len(arg869))
    defer mbTrans870.Close()
    _, err871 := mbTrans870.WriteString(arg869)
    if err871 != nil {
      Usage()
      return
    }
    factory872 := thrift.NewTJSONProtocolFactory()
    jsProt873 := factory872.GetProtocol(mbTrans870)
    argvalue0 := driver.NewIDataFrameId()
    err874 := argvalue0.Read(context.Background(), jsProt873)
    if err874 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg875 := flag.Arg(2)
    mbTrans876 := thrift.NewTMemoryBufferLen(len(arg875))
    defer mbTrans876.Close()
    _, err877 := mbTrans876.WriteString(arg875)
    if err877 != nil {
      Usage()
      return
    }
    factory878 := thrift.NewTJSONProtocolFactory()
    jsProt879 := factory878.GetProtocol(mbTrans876)
    argvalue1 := rpc.NewISource()
    err880 := argvalue1.Read(context.Background(), jsProt879)
    if err880 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachPartition(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachExecutor requires 2 args")
      flag.Usage()
    }
    arg881 := flag.Arg(1)
    mbTrans882 := thrift.NewTMemoryBufferLen(len(arg881))
    defer mbTrans882.Close()
    _, err883 := mbTrans882.WriteString(arg881)
    if err883 != nil {
      Usage()
      return
    }
    factory884 := thrift.NewTJSONProtocolFactory()
    jsProt885 := factory884.GetProtocol(mbTrans882)
    argvalue0 := driver.NewIDataFrameId()
    err886 := argvalue0.Read(context.Background(), jsProt885)
    if err886 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg887 := flag.Arg(2)
    mbTrans888 := thrift.NewTMemoryBufferLen(len(arg887))
    defer mbTrans888.Close()
    _, err889 := mbTrans888.WriteString(arg887)
    if err889 != nil {
      Usage()
      return
    }
    factory890 := thrift.NewTJSONProtocolFactory()
    jsProt891 := factory890.GetProtocol(mbTrans888)
    argvalue1 := rpc.NewISource()
    err892 := argvalue1.Read(context.Background(), jsProt891)
    if err892 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "top":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Top requires 3 args")
      flag.Usage()
    }
    arg893 := flag.Arg(1)
    mbTrans894 := thrift.NewTMemoryBufferLen(len(arg893))
    defer mbTrans894.Close()
    _, err895 := mbTrans894.WriteString(arg893)
    if err895 != nil {
      Usage()
      return
    }
    factory896 := thrift.NewTJSONProtocolFactory()
    jsProt897 := factory896.GetProtocol(mbTrans894)
    argvalue0 := driver.NewIDataFrameId()
    err898 := argvalue0.Read(context.Background(), jsProt897)
    if err898 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err899 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err899 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg900 := flag.Arg(3)
    mbTrans901 := thrift.NewTMemoryBufferLen(len(arg900))
    defer mbTrans901.Close()
    _, err902 := mbTrans901.WriteString(arg900)
    if err902 != nil {
      Usage()
      return
    }
    factory903 := thrift.NewTJSONProtocolFactory()
    jsProt904 := factory903.GetProtocol(mbTrans901)
    argvalue2 := rpc.NewISource()
    err905 := argvalue2.Read(context.Background(), jsProt904)
    if err905 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Top(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "top4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Top4 requires 4 args")
      flag.Usage()
    }
    arg906 := flag.Arg(1)
    mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
    defer mbTrans907.Close()
    _, err908 := mbTrans907.WriteString(arg906)
    if err908 != nil {
      Usage()
      return
    }
    factory909 := thrift.NewTJSONProtocolFactory()
    jsProt910 := factory909.GetProtocol(mbTrans907)
    argvalue0 := driver.NewIDataFrameId()
    err911 := argvalue0.Read(context.Background(), jsProt910)
    if err911 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err912 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err912 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg913 := flag.Arg(3)
    mbTrans914 := thrift.NewTMemoryBufferLen(len(arg913))
    defer mbTrans914.Close()
    _, err915 := mbTrans914.WriteString(arg913)
    if err915 != nil {
      Usage()
      return
    }
    factory916 := thrift.NewTJSONProtocolFactory()
    jsProt917 := factory916.GetProtocol(mbTrans914)
    argvalue2 := rpc.NewISource()
    err918 := argvalue2.Read(context.Background(), jsProt917)
    if err918 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg919 := flag.Arg(4)
    mbTrans920 := thrift.NewTMemoryBufferLen(len(arg919))
    defer mbTrans920.Close()
    _, err921 := mbTrans920.WriteString(arg919)
    if err921 != nil {
      Usage()
      return
    }
    factory922 := thrift.NewTJSONProtocolFactory()
    jsProt923 := factory922.GetProtocol(mbTrans920)
    argvalue3 := rpc.NewISource()
    err924 := argvalue3.Read(context.Background(), jsProt923)
    if err924 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Top4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeOrdered":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TakeOrdered requires 3 args")
      flag.Usage()
    }
    arg925 := flag.Arg(1)
    mbTrans926 := thrift.NewTMemoryBufferLen(len(arg925))
    defer mbTrans926.Close()
    _, err927 := mbTrans926.WriteString(arg925)
    if err927 != nil {
      Usage()
      return
    }
    factory928 := thrift.NewTJSONProtocolFactory()
    jsProt929 := factory928.GetProtocol(mbTrans926)
    argvalue0 := driver.NewIDataFrameId()
    err930 := argvalue0.Read(context.Background(), jsProt929)
    if err930 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err931 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err931 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg932 := flag.Arg(3)
    mbTrans933 := thrift.NewTMemoryBufferLen(len(arg932))
    defer mbTrans933.Close()
    _, err934 := mbTrans933.WriteString(arg932)
    if err934 != nil {
      Usage()
      return
    }
    factory935 := thrift.NewTJSONProtocolFactory()
    jsProt936 := factory935.GetProtocol(mbTrans933)
    argvalue2 := rpc.NewISource()
    err937 := argvalue2.Read(context.Background(), jsProt936)
    if err937 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TakeOrdered(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "takeOrdered4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TakeOrdered4 requires 4 args")
      flag.Usage()
    }
    arg938 := flag.Arg(1)
    mbTrans939 := thrift.NewTMemoryBufferLen(len(arg938))
    defer mbTrans939.Close()
    _, err940 := mbTrans939.WriteString(arg938)
    if err940 != nil {
      Usage()
      return
    }
    factory941 := thrift.NewTJSONProtocolFactory()
    jsProt942 := factory941.GetProtocol(mbTrans939)
    argvalue0 := driver.NewIDataFrameId()
    err943 := argvalue0.Read(context.Background(), jsProt942)
    if err943 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err944 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err944 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg945 := flag.Arg(3)
    mbTrans946 := thrift.NewTMemoryBufferLen(len(arg945))
    defer mbTrans946.Close()
    _, err947 := mbTrans946.WriteString(arg945)
    if err947 != nil {
      Usage()
      return
    }
    factory948 := thrift.NewTJSONProtocolFactory()
    jsProt949 := factory948.GetProtocol(mbTrans946)
    argvalue2 := rpc.NewISource()
    err950 := argvalue2.Read(context.Background(), jsProt949)
    if err950 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg951 := flag.Arg(4)
    mbTrans952 := thrift.NewTMemoryBufferLen(len(arg951))
    defer mbTrans952.Close()
    _, err953 := mbTrans952.WriteString(arg951)
    if err953 != nil {
      Usage()
      return
    }
    factory954 := thrift.NewTJSONProtocolFactory()
    jsProt955 := factory954.GetProtocol(mbTrans952)
    argvalue3 := rpc.NewISource()
    err956 := argvalue3.Read(context.Background(), jsProt955)
    if err956 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TakeOrdered4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sample":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Sample requires 4 args")
      flag.Usage()
    }
    arg957 := flag.Arg(1)
    mbTrans958 := thrift.NewTMemoryBufferLen(len(arg957))
    defer mbTrans958.Close()
    _, err959 := mbTrans958.WriteString(arg957)
    if err959 != nil {
      Usage()
      return
    }
    factory960 := thrift.NewTJSONProtocolFactory()
    jsProt961 := factory960.GetProtocol(mbTrans958)
    argvalue0 := driver.NewIDataFrameId()
    err962 := argvalue0.Read(context.Background(), jsProt961)
    if err962 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err964 := (strconv.ParseFloat(flag.Arg(3), 64))
    if err964 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err965 := (strconv.Atoi(flag.Arg(4)))
    if err965 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.Sample(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeSample":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TakeSample requires 5 args")
      flag.Usage()
    }
    arg966 := flag.Arg(1)
    mbTrans967 := thrift.NewTMemoryBufferLen(len(arg966))
    defer mbTrans967.Close()
    _, err968 := mbTrans967.WriteString(arg966)
    if err968 != nil {
      Usage()
      return
    }
    factory969 := thrift.NewTJSONProtocolFactory()
    jsProt970 := factory969.GetProtocol(mbTrans967)
    argvalue0 := driver.NewIDataFrameId()
    err971 := argvalue0.Read(context.Background(), jsProt970)
    if err971 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err973 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err973 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err974 := (strconv.Atoi(flag.Arg(4)))
    if err974 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg975 := flag.Arg(5)
    mbTrans976 := thrift.NewTMemoryBufferLen(len(arg975))
    defer mbTrans976.Close()
    _, err977 := mbTrans976.WriteString(arg975)
    if err977 != nil {
      Usage()
      return
    }
    factory978 := thrift.NewTJSONProtocolFactory()
    jsProt979 := factory978.GetProtocol(mbTrans976)
    argvalue4 := rpc.NewISource()
    err980 := argvalue4.Read(context.Background(), jsProt979)
    if err980 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TakeSample(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Count requires 1 args")
      flag.Usage()
    }
    arg981 := flag.Arg(1)
    mbTrans982 := thrift.NewTMemoryBufferLen(len(arg981))
    defer mbTrans982.Close()
    _, err983 := mbTrans982.WriteString(arg981)
    if err983 != nil {
      Usage()
      return
    }
    factory984 := thrift.NewTJSONProtocolFactory()
    jsProt985 := factory984.GetProtocol(mbTrans982)
    argvalue0 := driver.NewIDataFrameId()
    err986 := argvalue0.Read(context.Background(), jsProt985)
    if err986 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Count(context.Background(), value0))
    fmt.Print("\n")
    break
  case "max":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Max requires 2 args")
      flag.Usage()
    }
    arg987 := flag.Arg(1)
    mbTrans988 := thrift.NewTMemoryBufferLen(len(arg987))
    defer mbTrans988.Close()
    _, err989 := mbTrans988.WriteString(arg987)
    if err989 != nil {
      Usage()
      return
    }
    factory990 := thrift.NewTJSONProtocolFactory()
    jsProt991 := factory990.GetProtocol(mbTrans988)
    argvalue0 := driver.NewIDataFrameId()
    err992 := argvalue0.Read(context.Background(), jsProt991)
    if err992 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg993 := flag.Arg(2)
    mbTrans994 := thrift.NewTMemoryBufferLen(len(arg993))
    defer mbTrans994.Close()
    _, err995 := mbTrans994.WriteString(arg993)
    if err995 != nil {
      Usage()
      return
    }
    factory996 := thrift.NewTJSONProtocolFactory()
    jsProt997 := factory996.GetProtocol(mbTrans994)
    argvalue1 := rpc.NewISource()
    err998 := argvalue1.Read(context.Background(), jsProt997)
    if err998 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Max(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "max3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Max3 requires 3 args")
      flag.Usage()
    }
    arg999 := flag.Arg(1)
    mbTrans1000 := thrift.NewTMemoryBufferLen(len(arg999))
    defer mbTrans1000.Close()
    _, err1001 := mbTrans1000.WriteString(arg999)
    if err1001 != nil {
      Usage()
      return
    }
    factory1002 := thrift.NewTJSONProtocolFactory()
    jsProt1003 := factory1002.GetProtocol(mbTrans1000)
    argvalue0 := driver.NewIDataFrameId()
    err1004 := argvalue0.Read(context.Background(), jsProt1003)
    if err1004 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1005 := flag.Arg(2)
    mbTrans1006 := thrift.NewTMemoryBufferLen(len(arg1005))
    defer mbTrans1006.Close()
    _, err1007 := mbTrans1006.WriteString(arg1005)
    if err1007 != nil {
      Usage()
      return
    }
    factory1008 := thrift.NewTJSONProtocolFactory()
    jsProt1009 := factory1008.GetProtocol(mbTrans1006)
    argvalue1 := rpc.NewISource()
    err1010 := argvalue1.Read(context.Background(), jsProt1009)
    if err1010 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1011 := flag.Arg(3)
    mbTrans1012 := thrift.NewTMemoryBufferLen(len(arg1011))
    defer mbTrans1012.Close()
    _, err1013 := mbTrans1012.WriteString(arg1011)
    if err1013 != nil {
      Usage()
      return
    }
    factory1014 := thrift.NewTJSONProtocolFactory()
    jsProt1015 := factory1014.GetProtocol(mbTrans1012)
    argvalue2 := rpc.NewISource()
    err1016 := argvalue2.Read(context.Background(), jsProt1015)
    if err1016 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Max3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "min":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Min requires 2 args")
      flag.Usage()
    }
    arg1017 := flag.Arg(1)
    mbTrans1018 := thrift.NewTMemoryBufferLen(len(arg1017))
    defer mbTrans1018.Close()
    _, err1019 := mbTrans1018.WriteString(arg1017)
    if err1019 != nil {
      Usage()
      return
    }
    factory1020 := thrift.NewTJSONProtocolFactory()
    jsProt1021 := factory1020.GetProtocol(mbTrans1018)
    argvalue0 := driver.NewIDataFrameId()
    err1022 := argvalue0.Read(context.Background(), jsProt1021)
    if err1022 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1023 := flag.Arg(2)
    mbTrans1024 := thrift.NewTMemoryBufferLen(len(arg1023))
    defer mbTrans1024.Close()
    _, err1025 := mbTrans1024.WriteString(arg1023)
    if err1025 != nil {
      Usage()
      return
    }
    factory1026 := thrift.NewTJSONProtocolFactory()
    jsProt1027 := factory1026.GetProtocol(mbTrans1024)
    argvalue1 := rpc.NewISource()
    err1028 := argvalue1.Read(context.Background(), jsProt1027)
    if err1028 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Min(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "min3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Min3 requires 3 args")
      flag.Usage()
    }
    arg1029 := flag.Arg(1)
    mbTrans1030 := thrift.NewTMemoryBufferLen(len(arg1029))
    defer mbTrans1030.Close()
    _, err1031 := mbTrans1030.WriteString(arg1029)
    if err1031 != nil {
      Usage()
      return
    }
    factory1032 := thrift.NewTJSONProtocolFactory()
    jsProt1033 := factory1032.GetProtocol(mbTrans1030)
    argvalue0 := driver.NewIDataFrameId()
    err1034 := argvalue0.Read(context.Background(), jsProt1033)
    if err1034 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1035 := flag.Arg(2)
    mbTrans1036 := thrift.NewTMemoryBufferLen(len(arg1035))
    defer mbTrans1036.Close()
    _, err1037 := mbTrans1036.WriteString(arg1035)
    if err1037 != nil {
      Usage()
      return
    }
    factory1038 := thrift.NewTJSONProtocolFactory()
    jsProt1039 := factory1038.GetProtocol(mbTrans1036)
    argvalue1 := rpc.NewISource()
    err1040 := argvalue1.Read(context.Background(), jsProt1039)
    if err1040 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1041 := flag.Arg(3)
    mbTrans1042 := thrift.NewTMemoryBufferLen(len(arg1041))
    defer mbTrans1042.Close()
    _, err1043 := mbTrans1042.WriteString(arg1041)
    if err1043 != nil {
      Usage()
      return
    }
    factory1044 := thrift.NewTJSONProtocolFactory()
    jsProt1045 := factory1044.GetProtocol(mbTrans1042)
    argvalue2 := rpc.NewISource()
    err1046 := argvalue2.Read(context.Background(), jsProt1045)
    if err1046 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Min3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "flatMapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FlatMapValues requires 2 args")
      flag.Usage()
    }
    arg1047 := flag.Arg(1)
    mbTrans1048 := thrift.NewTMemoryBufferLen(len(arg1047))
    defer mbTrans1048.Close()
    _, err1049 := mbTrans1048.WriteString(arg1047)
    if err1049 != nil {
      Usage()
      return
    }
    factory1050 := thrift.NewTJSONProtocolFactory()
    jsProt1051 := factory1050.GetProtocol(mbTrans1048)
    argvalue0 := driver.NewIDataFrameId()
    err1052 := argvalue0.Read(context.Background(), jsProt1051)
    if err1052 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1053 := flag.Arg(2)
    mbTrans1054 := thrift.NewTMemoryBufferLen(len(arg1053))
    defer mbTrans1054.Close()
    _, err1055 := mbTrans1054.WriteString(arg1053)
    if err1055 != nil {
      Usage()
      return
    }
    factory1056 := thrift.NewTJSONProtocolFactory()
    jsProt1057 := factory1056.GetProtocol(mbTrans1054)
    argvalue1 := rpc.NewISource()
    err1058 := argvalue1.Read(context.Background(), jsProt1057)
    if err1058 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.FlatMapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapValues requires 2 args")
      flag.Usage()
    }
    arg1059 := flag.Arg(1)
    mbTrans1060 := thrift.NewTMemoryBufferLen(len(arg1059))
    defer mbTrans1060.Close()
    _, err1061 := mbTrans1060.WriteString(arg1059)
    if err1061 != nil {
      Usage()
      return
    }
    factory1062 := thrift.NewTJSONProtocolFactory()
    jsProt1063 := factory1062.GetProtocol(mbTrans1060)
    argvalue0 := driver.NewIDataFrameId()
    err1064 := argvalue0.Read(context.Background(), jsProt1063)
    if err1064 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1065 := flag.Arg(2)
    mbTrans1066 := thrift.NewTMemoryBufferLen(len(arg1065))
    defer mbTrans1066.Close()
    _, err1067 := mbTrans1066.WriteString(arg1065)
    if err1067 != nil {
      Usage()
      return
    }
    factory1068 := thrift.NewTJSONProtocolFactory()
    jsProt1069 := factory1068.GetProtocol(mbTrans1066)
    argvalue1 := rpc.NewISource()
    err1070 := argvalue1.Read(context.Background(), jsProt1069)
    if err1070 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GroupByKey requires 1 args")
      flag.Usage()
    }
    arg1071 := flag.Arg(1)
    mbTrans1072 := thrift.NewTMemoryBufferLen(len(arg1071))
    defer mbTrans1072.Close()
    _, err1073 := mbTrans1072.WriteString(arg1071)
    if err1073 != nil {
      Usage()
      return
    }
    factory1074 := thrift.NewTJSONProtocolFactory()
    jsProt1075 := factory1074.GetProtocol(mbTrans1072)
    argvalue0 := driver.NewIDataFrameId()
    err1076 := argvalue0.Read(context.Background(), jsProt1075)
    if err1076 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GroupByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2a requires 2 args")
      flag.Usage()
    }
    arg1077 := flag.Arg(1)
    mbTrans1078 := thrift.NewTMemoryBufferLen(len(arg1077))
    defer mbTrans1078.Close()
    _, err1079 := mbTrans1078.WriteString(arg1077)
    if err1079 != nil {
      Usage()
      return
    }
    factory1080 := thrift.NewTJSONProtocolFactory()
    jsProt1081 := factory1080.GetProtocol(mbTrans1078)
    argvalue0 := driver.NewIDataFrameId()
    err1082 := argvalue0.Read(context.Background(), jsProt1081)
    if err1082 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1083 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1083 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2b requires 2 args")
      flag.Usage()
    }
    arg1084 := flag.Arg(1)
    mbTrans1085 := thrift.NewTMemoryBufferLen(len(arg1084))
    defer mbTrans1085.Close()
    _, err1086 := mbTrans1085.WriteString(arg1084)
    if err1086 != nil {
      Usage()
      return
    }
    factory1087 := thrift.NewTJSONProtocolFactory()
    jsProt1088 := factory1087.GetProtocol(mbTrans1085)
    argvalue0 := driver.NewIDataFrameId()
    err1089 := argvalue0.Read(context.Background(), jsProt1088)
    if err1089 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1090 := flag.Arg(2)
    mbTrans1091 := thrift.NewTMemoryBufferLen(len(arg1090))
    defer mbTrans1091.Close()
    _, err1092 := mbTrans1091.WriteString(arg1090)
    if err1092 != nil {
      Usage()
      return
    }
    factory1093 := thrift.NewTJSONProtocolFactory()
    jsProt1094 := factory1093.GetProtocol(mbTrans1091)
    argvalue1 := rpc.NewISource()
    err1095 := argvalue1.Read(context.Background(), jsProt1094)
    if err1095 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupByKey3 requires 3 args")
      flag.Usage()
    }
    arg1096 := flag.Arg(1)
    mbTrans1097 := thrift.NewTMemoryBufferLen(len(arg1096))
    defer mbTrans1097.Close()
    _, err1098 := mbTrans1097.WriteString(arg1096)
    if err1098 != nil {
      Usage()
      return
    }
    factory1099 := thrift.NewTJSONProtocolFactory()
    jsProt1100 := factory1099.GetProtocol(mbTrans1097)
    argvalue0 := driver.NewIDataFrameId()
    err1101 := argvalue0.Read(context.Background(), jsProt1100)
    if err1101 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1102 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1102 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1103 := flag.Arg(3)
    mbTrans1104 := thrift.NewTMemoryBufferLen(len(arg1103))
    defer mbTrans1104.Close()
    _, err1105 := mbTrans1104.WriteString(arg1103)
    if err1105 != nil {
      Usage()
      return
    }
    factory1106 := thrift.NewTJSONProtocolFactory()
    jsProt1107 := factory1106.GetProtocol(mbTrans1104)
    argvalue2 := rpc.NewISource()
    err1108 := argvalue2.Read(context.Background(), jsProt1107)
    if err1108 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupByKey3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReduceByKey requires 3 args")
      flag.Usage()
    }
    arg1109 := flag.Arg(1)
    mbTrans1110 := thrift.NewTMemoryBufferLen(len(arg1109))
    defer mbTrans1110.Close()
    _, err1111 := mbTrans1110.WriteString(arg1109)
    if err1111 != nil {
      Usage()
      return
    }
    factory1112 := thrift.NewTJSONProtocolFactory()
    jsProt1113 := factory1112.GetProtocol(mbTrans1110)
    argvalue0 := driver.NewIDataFrameId()
    err1114 := argvalue0.Read(context.Background(), jsProt1113)
    if err1114 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1115 := flag.Arg(2)
    mbTrans1116 := thrift.NewTMemoryBufferLen(len(arg1115))
    defer mbTrans1116.Close()
    _, err1117 := mbTrans1116.WriteString(arg1115)
    if err1117 != nil {
      Usage()
      return
    }
    factory1118 := thrift.NewTJSONProtocolFactory()
    jsProt1119 := factory1118.GetProtocol(mbTrans1116)
    argvalue1 := rpc.NewISource()
    err1120 := argvalue1.Read(context.Background(), jsProt1119)
    if err1120 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.ReduceByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ReduceByKey4 requires 4 args")
      flag.Usage()
    }
    arg1122 := flag.Arg(1)
    mbTrans1123 := thrift.NewTMemoryBufferLen(len(arg1122))
    defer mbTrans1123.Close()
    _, err1124 := mbTrans1123.WriteString(arg1122)
    if err1124 != nil {
      Usage()
      return
    }
    factory1125 := thrift.NewTJSONProtocolFactory()
    jsProt1126 := factory1125.GetProtocol(mbTrans1123)
    argvalue0 := driver.NewIDataFrameId()
    err1127 := argvalue0.Read(context.Background(), jsProt1126)
    if err1127 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1128 := flag.Arg(2)
    mbTrans1129 := thrift.NewTMemoryBufferLen(len(arg1128))
    defer mbTrans1129.Close()
    _, err1130 := mbTrans1129.WriteString(arg1128)
    if err1130 != nil {
      Usage()
      return
    }
    factory1131 := thrift.NewTJSONProtocolFactory()
    jsProt1132 := factory1131.GetProtocol(mbTrans1129)
    argvalue1 := rpc.NewISource()
    err1133 := argvalue1.Read(context.Background(), jsProt1132)
    if err1133 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err1134 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1134 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.ReduceByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AggregateByKey requires 3 args")
      flag.Usage()
    }
    arg1136 := flag.Arg(1)
    mbTrans1137 := thrift.NewTMemoryBufferLen(len(arg1136))
    defer mbTrans1137.Close()
    _, err1138 := mbTrans1137.WriteString(arg1136)
    if err1138 != nil {
      Usage()
      return
    }
    factory1139 := thrift.NewTJSONProtocolFactory()
    jsProt1140 := factory1139.GetProtocol(mbTrans1137)
    argvalue0 := driver.NewIDataFrameId()
    err1141 := argvalue0.Read(context.Background(), jsProt1140)
    if err1141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1142 := flag.Arg(2)
    mbTrans1143 := thrift.NewTMemoryBufferLen(len(arg1142))
    defer mbTrans1143.Close()
    _, err1144 := mbTrans1143.WriteString(arg1142)
    if err1144 != nil {
      Usage()
      return
    }
    factory1145 := thrift.NewTJSONProtocolFactory()
    jsProt1146 := factory1145.GetProtocol(mbTrans1143)
    argvalue1 := rpc.NewISource()
    err1147 := argvalue1.Read(context.Background(), jsProt1146)
    if err1147 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1148 := flag.Arg(3)
    mbTrans1149 := thrift.NewTMemoryBufferLen(len(arg1148))
    defer mbTrans1149.Close()
    _, err1150 := mbTrans1149.WriteString(arg1148)
    if err1150 != nil {
      Usage()
      return
    }
    factory1151 := thrift.NewTJSONProtocolFactory()
    jsProt1152 := factory1151.GetProtocol(mbTrans1149)
    argvalue2 := rpc.NewISource()
    err1153 := argvalue2.Read(context.Background(), jsProt1152)
    if err1153 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AggregateByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey4a":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4a requires 4 args")
      flag.Usage()
    }
    arg1154 := flag.Arg(1)
    mbTrans1155 := thrift.NewTMemoryBufferLen(len(arg1154))
    defer mbTrans1155.Close()
    _, err1156 := mbTrans1155.WriteString(arg1154)
    if err1156 != nil {
      Usage()
      return
    }
    factory1157 := thrift.NewTJSONProtocolFactory()
    jsProt1158 := factory1157.GetProtocol(mbTrans1155)
    argvalue0 := driver.NewIDataFrameId()
    err1159 := argvalue0.Read(context.Background(), jsProt1158)
    if err1159 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1160 := flag.Arg(2)
    mbTrans1161 := thrift.NewTMemoryBufferLen(len(arg1160))
    defer mbTrans1161.Close()
    _, err1162 := mbTrans1161.WriteString(arg1160)
    if err1162 != nil {
      Usage()
      return
    }
    factory1163 := thrift.NewTJSONProtocolFactory()
    jsProt1164 := factory1163.GetProtocol(mbTrans1161)
    argvalue1 := rpc.NewISource()
    err1165 := argvalue1.Read(context.Background(), jsProt1164)
    if err1165 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1166 := flag.Arg(3)
    mbTrans1167 := thrift.NewTMemoryBufferLen(len(arg1166))
    defer mbTrans1167.Close()
    _, err1168 := mbTrans1167.WriteString(arg1166)
    if err1168 != nil {
      Usage()
      return
    }
    factory1169 := thrift.NewTJSONProtocolFactory()
    jsProt1170 := factory1169.GetProtocol(mbTrans1167)
    argvalue2 := rpc.NewISource()
    err1171 := argvalue2.Read(context.Background(), jsProt1170)
    if err1171 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1172 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1172 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4a(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey4b":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4b requires 4 args")
      flag.Usage()
    }
    arg1173 := flag.Arg(1)
    mbTrans1174 := thrift.NewTMemoryBufferLen(len(arg1173))
    defer mbTrans1174.Close()
    _, err1175 := mbTrans1174.WriteString(arg1173)
    if err1175 != nil {
      Usage()
      return
    }
    factory1176 := thrift.NewTJSONProtocolFactory()
    jsProt1177 := factory1176.GetProtocol(mbTrans1174)
    argvalue0 := driver.NewIDataFrameId()
    err1178 := argvalue0.Read(context.Background(), jsProt1177)
    if err1178 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1179 := flag.Arg(2)
    mbTrans1180 := thrift.NewTMemoryBufferLen(len(arg1179))
    defer mbTrans1180.Close()
    _, err1181 := mbTrans1180.WriteString(arg1179)
    if err1181 != nil {
      Usage()
      return
    }
    factory1182 := thrift.NewTJSONProtocolFactory()
    jsProt1183 := factory1182.GetProtocol(mbTrans1180)
    argvalue1 := rpc.NewISource()
    err1184 := argvalue1.Read(context.Background(), jsProt1183)
    if err1184 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1185 := flag.Arg(3)
    mbTrans1186 := thrift.NewTMemoryBufferLen(len(arg1185))
    defer mbTrans1186.Close()
    _, err1187 := mbTrans1186.WriteString(arg1185)
    if err1187 != nil {
      Usage()
      return
    }
    factory1188 := thrift.NewTJSONProtocolFactory()
    jsProt1189 := factory1188.GetProtocol(mbTrans1186)
    argvalue2 := rpc.NewISource()
    err1190 := argvalue2.Read(context.Background(), jsProt1189)
    if err1190 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1191 := flag.Arg(4)
    mbTrans1192 := thrift.NewTMemoryBufferLen(len(arg1191))
    defer mbTrans1192.Close()
    _, err1193 := mbTrans1192.WriteString(arg1191)
    if err1193 != nil {
      Usage()
      return
    }
    factory1194 := thrift.NewTJSONProtocolFactory()
    jsProt1195 := factory1194.GetProtocol(mbTrans1192)
    argvalue3 := rpc.NewISource()
    err1196 := argvalue3.Read(context.Background(), jsProt1195)
    if err1196 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4b(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AggregateByKey5 requires 5 args")
      flag.Usage()
    }
    arg1197 := flag.Arg(1)
    mbTrans1198 := thrift.NewTMemoryBufferLen(len(arg1197))
    defer mbTrans1198.Close()
    _, err1199 := mbTrans1198.WriteString(arg1197)
    if err1199 != nil {
      Usage()
      return
    }
    factory1200 := thrift.NewTJSONProtocolFactory()
    jsProt1201 := factory1200.GetProtocol(mbTrans1198)
    argvalue0 := driver.NewIDataFrameId()
    err1202 := argvalue0.Read(context.Background(), jsProt1201)
    if err1202 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1203 := flag.Arg(2)
    mbTrans1204 := thrift.NewTMemoryBufferLen(len(arg1203))
    defer mbTrans1204.Close()
    _, err1205 := mbTrans1204.WriteString(arg1203)
    if err1205 != nil {
      Usage()
      return
    }
    factory1206 := thrift.NewTJSONProtocolFactory()
    jsProt1207 := factory1206.GetProtocol(mbTrans1204)
    argvalue1 := rpc.NewISource()
    err1208 := argvalue1.Read(context.Background(), jsProt1207)
    if err1208 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1209 := flag.Arg(3)
    mbTrans1210 := thrift.NewTMemoryBufferLen(len(arg1209))
    defer mbTrans1210.Close()
    _, err1211 := mbTrans1210.WriteString(arg1209)
    if err1211 != nil {
      Usage()
      return
    }
    factory1212 := thrift.NewTJSONProtocolFactory()
    jsProt1213 := factory1212.GetProtocol(mbTrans1210)
    argvalue2 := rpc.NewISource()
    err1214 := argvalue2.Read(context.Background(), jsProt1213)
    if err1214 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1215 := flag.Arg(4)
    mbTrans1216 := thrift.NewTMemoryBufferLen(len(arg1215))
    defer mbTrans1216.Close()
    _, err1217 := mbTrans1216.WriteString(arg1215)
    if err1217 != nil {
      Usage()
      return
    }
    factory1218 := thrift.NewTJSONProtocolFactory()
    jsProt1219 := factory1218.GetProtocol(mbTrans1216)
    argvalue3 := rpc.NewISource()
    err1220 := argvalue3.Read(context.Background(), jsProt1219)
    if err1220 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err1221 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err1221 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AggregateByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "foldByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FoldByKey requires 4 args")
      flag.Usage()
    }
    arg1222 := flag.Arg(1)
    mbTrans1223 := thrift.NewTMemoryBufferLen(len(arg1222))
    defer mbTrans1223.Close()
    _, err1224 := mbTrans1223.WriteString(arg1222)
    if err1224 != nil {
      Usage()
      return
    }
    factory1225 := thrift.NewTJSONProtocolFactory()
    jsProt1226 := factory1225.GetProtocol(mbTrans1223)
    argvalue0 := driver.NewIDataFrameId()
    err1227 := argvalue0.Read(context.Background(), jsProt1226)
    if err1227 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1228 := flag.Arg(2)
    mbTrans1229 := thrift.NewTMemoryBufferLen(len(arg1228))
    defer mbTrans1229.Close()
    _, err1230 := mbTrans1229.WriteString(arg1228)
    if err1230 != nil {
      Usage()
      return
    }
    factory1231 := thrift.NewTJSONProtocolFactory()
    jsProt1232 := factory1231.GetProtocol(mbTrans1229)
    argvalue1 := rpc.NewISource()
    err1233 := argvalue1.Read(context.Background(), jsProt1232)
    if err1233 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1234 := flag.Arg(3)
    mbTrans1235 := thrift.NewTMemoryBufferLen(len(arg1234))
    defer mbTrans1235.Close()
    _, err1236 := mbTrans1235.WriteString(arg1234)
    if err1236 != nil {
      Usage()
      return
    }
    factory1237 := thrift.NewTJSONProtocolFactory()
    jsProt1238 := factory1237.GetProtocol(mbTrans1235)
    argvalue2 := rpc.NewISource()
    err1239 := argvalue2.Read(context.Background(), jsProt1238)
    if err1239 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.FoldByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "foldByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "FoldByKey5 requires 5 args")
      flag.Usage()
    }
    arg1241 := flag.Arg(1)
    mbTrans1242 := thrift.NewTMemoryBufferLen(len(arg1241))
    defer mbTrans1242.Close()
    _, err1243 := mbTrans1242.WriteString(arg1241)
    if err1243 != nil {
      Usage()
      return
    }
    factory1244 := thrift.NewTJSONProtocolFactory()
    jsProt1245 := factory1244.GetProtocol(mbTrans1242)
    argvalue0 := driver.NewIDataFrameId()
    err1246 := argvalue0.Read(context.Background(), jsProt1245)
    if err1246 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1247 := flag.Arg(2)
    mbTrans1248 := thrift.NewTMemoryBufferLen(len(arg1247))
    defer mbTrans1248.Close()
    _, err1249 := mbTrans1248.WriteString(arg1247)
    if err1249 != nil {
      Usage()
      return
    }
    factory1250 := thrift.NewTJSONProtocolFactory()
    jsProt1251 := factory1250.GetProtocol(mbTrans1248)
    argvalue1 := rpc.NewISource()
    err1252 := argvalue1.Read(context.Background(), jsProt1251)
    if err1252 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1253 := flag.Arg(3)
    mbTrans1254 := thrift.NewTMemoryBufferLen(len(arg1253))
    defer mbTrans1254.Close()
    _, err1255 := mbTrans1254.WriteString(arg1253)
    if err1255 != nil {
      Usage()
      return
    }
    factory1256 := thrift.NewTJSONProtocolFactory()
    jsProt1257 := factory1256.GetProtocol(mbTrans1254)
    argvalue2 := rpc.NewISource()
    err1258 := argvalue2.Read(context.Background(), jsProt1257)
    if err1258 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1259 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1259 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.FoldByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "sortByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey requires 2 args")
      flag.Usage()
    }
    arg1261 := flag.Arg(1)
    mbTrans1262 := thrift.NewTMemoryBufferLen(len(arg1261))
    defer mbTrans1262.Close()
    _, err1263 := mbTrans1262.WriteString(arg1261)
    if err1263 != nil {
      Usage()
      return
    }
    factory1264 := thrift.NewTJSONProtocolFactory()
    jsProt1265 := factory1264.GetProtocol(mbTrans1262)
    argvalue0 := driver.NewIDataFrameId()
    err1266 := argvalue0.Read(context.Background(), jsProt1265)
    if err1266 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3a requires 3 args")
      flag.Usage()
    }
    arg1268 := flag.Arg(1)
    mbTrans1269 := thrift.NewTMemoryBufferLen(len(arg1268))
    defer mbTrans1269.Close()
    _, err1270 := mbTrans1269.WriteString(arg1268)
    if err1270 != nil {
      Usage()
      return
    }
    factory1271 := thrift.NewTJSONProtocolFactory()
    jsProt1272 := factory1271.GetProtocol(mbTrans1269)
    argvalue0 := driver.NewIDataFrameId()
    err1273 := argvalue0.Read(context.Background(), jsProt1272)
    if err1273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err1275 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1275 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortByKey3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3b requires 3 args")
      flag.Usage()
    }
    arg1276 := flag.Arg(1)
    mbTrans1277 := thrift.NewTMemoryBufferLen(len(arg1276))
    defer mbTrans1277.Close()
    _, err1278 := mbTrans1277.WriteString(arg1276)
    if err1278 != nil {
      Usage()
      return
    }
    factory1279 := thrift.NewTJSONProtocolFactory()
    jsProt1280 := factory1279.GetProtocol(mbTrans1277)
    argvalue0 := driver.NewIDataFrameId()
    err1281 := argvalue0.Read(context.Background(), jsProt1280)
    if err1281 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1282 := flag.Arg(2)
    mbTrans1283 := thrift.NewTMemoryBufferLen(len(arg1282))
    defer mbTrans1283.Close()
    _, err1284 := mbTrans1283.WriteString(arg1282)
    if err1284 != nil {
      Usage()
      return
    }
    factory1285 := thrift.NewTJSONProtocolFactory()
    jsProt1286 := factory1285.GetProtocol(mbTrans1283)
    argvalue1 := rpc.NewISource()
    err1287 := argvalue1.Read(context.Background(), jsProt1286)
    if err1287 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortByKey3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortByKey4 requires 4 args")
      flag.Usage()
    }
    arg1289 := flag.Arg(1)
    mbTrans1290 := thrift.NewTMemoryBufferLen(len(arg1289))
    defer mbTrans1290.Close()
    _, err1291 := mbTrans1290.WriteString(arg1289)
    if err1291 != nil {
      Usage()
      return
    }
    factory1292 := thrift.NewTJSONProtocolFactory()
    jsProt1293 := factory1292.GetProtocol(mbTrans1290)
    argvalue0 := driver.NewIDataFrameId()
    err1294 := argvalue0.Read(context.Background(), jsProt1293)
    if err1294 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1295 := flag.Arg(2)
    mbTrans1296 := thrift.NewTMemoryBufferLen(len(arg1295))
    defer mbTrans1296.Close()
    _, err1297 := mbTrans1296.WriteString(arg1295)
    if err1297 != nil {
      Usage()
      return
    }
    factory1298 := thrift.NewTJSONProtocolFactory()
    jsProt1299 := factory1298.GetProtocol(mbTrans1296)
    argvalue1 := rpc.NewISource()
    err1300 := argvalue1.Read(context.Background(), jsProt1299)
    if err1300 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err1302 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1302 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "keys":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Keys requires 2 args")
      flag.Usage()
    }
    arg1303 := flag.Arg(1)
    mbTrans1304 := thrift.NewTMemoryBufferLen(len(arg1303))
    defer mbTrans1304.Close()
    _, err1305 := mbTrans1304.WriteString(arg1303)
    if err1305 != nil {
      Usage()
      return
    }
    factory1306 := thrift.NewTJSONProtocolFactory()
    jsProt1307 := factory1306.GetProtocol(mbTrans1304)
    argvalue0 := driver.NewIDataFrameId()
    err1308 := argvalue0.Read(context.Background(), jsProt1307)
    if err1308 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1309 := flag.Arg(2)
    mbTrans1310 := thrift.NewTMemoryBufferLen(len(arg1309))
    defer mbTrans1310.Close()
    _, err1311 := mbTrans1310.WriteString(arg1309)
    if err1311 != nil {
      Usage()
      return
    }
    factory1312 := thrift.NewTJSONProtocolFactory()
    jsProt1313 := factory1312.GetProtocol(mbTrans1310)
    argvalue1 := rpc.NewISource()
    err1314 := argvalue1.Read(context.Background(), jsProt1313)
    if err1314 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Keys(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "values":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Values requires 2 args")
      flag.Usage()
    }
    arg1315 := flag.Arg(1)
    mbTrans1316 := thrift.NewTMemoryBufferLen(len(arg1315))
    defer mbTrans1316.Close()
    _, err1317 := mbTrans1316.WriteString(arg1315)
    if err1317 != nil {
      Usage()
      return
    }
    factory1318 := thrift.NewTJSONProtocolFactory()
    jsProt1319 := factory1318.GetProtocol(mbTrans1316)
    argvalue0 := driver.NewIDataFrameId()
    err1320 := argvalue0.Read(context.Background(), jsProt1319)
    if err1320 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1321 := flag.Arg(2)
    mbTrans1322 := thrift.NewTMemoryBufferLen(len(arg1321))
    defer mbTrans1322.Close()
    _, err1323 := mbTrans1322.WriteString(arg1321)
    if err1323 != nil {
      Usage()
      return
    }
    factory1324 := thrift.NewTJSONProtocolFactory()
    jsProt1325 := factory1324.GetProtocol(mbTrans1322)
    argvalue1 := rpc.NewISource()
    err1326 := argvalue1.Read(context.Background(), jsProt1325)
    if err1326 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Values(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sampleByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SampleByKey requires 4 args")
      flag.Usage()
    }
    arg1327 := flag.Arg(1)
    mbTrans1328 := thrift.NewTMemoryBufferLen(len(arg1327))
    defer mbTrans1328.Close()
    _, err1329 := mbTrans1328.WriteString(arg1327)
    if err1329 != nil {
      Usage()
      return
    }
    factory1330 := thrift.NewTJSONProtocolFactory()
    jsProt1331 := factory1330.GetProtocol(mbTrans1328)
    argvalue0 := driver.NewIDataFrameId()
    err1332 := argvalue0.Read(context.Background(), jsProt1331)
    if err1332 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    arg1334 := flag.Arg(3)
    mbTrans1335 := thrift.NewTMemoryBufferLen(len(arg1334))
    defer mbTrans1335.Close()
    _, err1336 := mbTrans1335.WriteString(arg1334)
    if err1336 != nil {
      Usage()
      return
    }
    factory1337 := thrift.NewTJSONProtocolFactory()
    jsProt1338 := factory1337.GetProtocol(mbTrans1335)
    argvalue2 := rpc.NewISource()
    err1339 := argvalue2.Read(context.Background(), jsProt1338)
    if err1339 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err1340 := (strconv.Atoi(flag.Arg(4)))
    if err1340 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SampleByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "countByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByKey requires 2 args")
      flag.Usage()
    }
    arg1341 := flag.Arg(1)
    mbTrans1342 := thrift.NewTMemoryBufferLen(len(arg1341))
    defer mbTrans1342.Close()
    _, err1343 := mbTrans1342.WriteString(arg1341)
    if err1343 != nil {
      Usage()
      return
    }
    factory1344 := thrift.NewTJSONProtocolFactory()
    jsProt1345 := factory1344.GetProtocol(mbTrans1342)
    argvalue0 := driver.NewIDataFrameId()
    err1346 := argvalue0.Read(context.Background(), jsProt1345)
    if err1346 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1347 := flag.Arg(2)
    mbTrans1348 := thrift.NewTMemoryBufferLen(len(arg1347))
    defer mbTrans1348.Close()
    _, err1349 := mbTrans1348.WriteString(arg1347)
    if err1349 != nil {
      Usage()
      return
    }
    factory1350 := thrift.NewTJSONProtocolFactory()
    jsProt1351 := factory1350.GetProtocol(mbTrans1348)
    argvalue1 := rpc.NewISource()
    err1352 := argvalue1.Read(context.Background(), jsProt1351)
    if err1352 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "countByValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByValue requires 2 args")
      flag.Usage()
    }
    arg1353 := flag.Arg(1)
    mbTrans1354 := thrift.NewTMemoryBufferLen(len(arg1353))
    defer mbTrans1354.Close()
    _, err1355 := mbTrans1354.WriteString(arg1353)
    if err1355 != nil {
      Usage()
      return
    }
    factory1356 := thrift.NewTJSONProtocolFactory()
    jsProt1357 := factory1356.GetProtocol(mbTrans1354)
    argvalue0 := driver.NewIDataFrameId()
    err1358 := argvalue0.Read(context.Background(), jsProt1357)
    if err1358 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1359 := flag.Arg(2)
    mbTrans1360 := thrift.NewTMemoryBufferLen(len(arg1359))
    defer mbTrans1360.Close()
    _, err1361 := mbTrans1360.WriteString(arg1359)
    if err1361 != nil {
      Usage()
      return
    }
    factory1362 := thrift.NewTJSONProtocolFactory()
    jsProt1363 := factory1362.GetProtocol(mbTrans1360)
    argvalue1 := rpc.NewISource()
    err1364 := argvalue1.Read(context.Background(), jsProt1363)
    if err1364 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
