// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"ignis/rpc"
	"ignis/rpc/driver"
)

var _ = rpc.GoUnusedProtection__
var _ = driver.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void setName(IDataFrameId id, string name)")
  fmt.Fprintln(os.Stderr, "  void persist(IDataFrameId id, i8 level)")
  fmt.Fprintln(os.Stderr, "  void cache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void unpersist(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void uncache(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  i64 partitions(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  void saveAsObjectFile(IDataFrameId id, string path, i8 compression)")
  fmt.Fprintln(os.Stderr, "  void saveAsTextFile(IDataFrameId id, string path)")
  fmt.Fprintln(os.Stderr, "  void saveAsJsonFile(IDataFrameId id, string path, bool pretty)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId repartition(IDataFrameId id, i64 numPartitions, bool preserveOrdering, bool global_)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionByRandom(IDataFrameId id, i64 numPartitions, i32 seed)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionByHash(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId partitionBy(IDataFrameId id, ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId map_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId filter(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatmap(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId keyBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapWithIndex(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitions(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapPartitionsWithIndex(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapExecutorTo(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupBy2(IDataFrameId id, ISource src, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sort2(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortBy3(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId union_(IDataFrameId id, IDataFrameId other, bool preserveOrder)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId union4(IDataFrameId id, IDataFrameId other, bool preserveOrder, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join(IDataFrameId id, IDataFrameId other)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join3a(IDataFrameId id, IDataFrameId other, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join3b(IDataFrameId id, IDataFrameId other, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId join4(IDataFrameId id, IDataFrameId other, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct2a(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct2b(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId distinct3(IDataFrameId id, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  i64 reduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeReduce(IDataFrameId id, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 collect(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 aggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeAggregate(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 fold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 treeFold(IDataFrameId id, ISource zero, ISource src, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 take(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  void foreach_(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachPartition(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  void foreachExecutor(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  i64 top(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 top4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered(IDataFrameId id, i64 num, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 takeOrdered4(IDataFrameId id, i64 num, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sample(IDataFrameId id, bool withReplacement, double fraction, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 takeSample(IDataFrameId id, bool withReplacement, i64 num, i32 seed, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 count(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  i64 max(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 max3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 min3(IDataFrameId id, ISource cmp, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId flatMapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId mapValues(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey(IDataFrameId id)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2a(IDataFrameId id, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey2b(IDataFrameId id, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId groupByKey3(IDataFrameId id, i64 numPartitions, ISource src)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey(IDataFrameId id, ISource src, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId reduceByKey4(IDataFrameId id, ISource src, i64 numPartitions, bool localReduce)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey(IDataFrameId id, ISource zero, ISource seqOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4a(IDataFrameId id, ISource zero, ISource seqOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey4b(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId aggregateByKey5(IDataFrameId id, ISource zero, ISource seqOp, ISource combOp, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey(IDataFrameId id, ISource zero, ISource src, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId foldByKey5(IDataFrameId id, ISource zero, ISource src, i64 numPartitions, bool localFold)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey(IDataFrameId id, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3a(IDataFrameId id, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey3b(IDataFrameId id, ISource src, bool ascending)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sortByKey4(IDataFrameId id, ISource src, bool ascending, i64 numPartitions)")
  fmt.Fprintln(os.Stderr, "  i64 keys(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 values(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  IDataFrameId sampleByKey(IDataFrameId id, bool withReplacement, ISource fractions, i32 seed)")
  fmt.Fprintln(os.Stderr, "  i64 countByKey(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr, "  i64 countByValue(IDataFrameId id, ISource tp)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := driver.NewIDataFrameServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetName requires 2 args")
      flag.Usage()
    }
    arg300 := flag.Arg(1)
    mbTrans301 := thrift.NewTMemoryBufferLen(len(arg300))
    defer mbTrans301.Close()
    _, err302 := mbTrans301.WriteString(arg300)
    if err302 != nil {
      Usage()
      return
    }
    factory303 := thrift.NewTJSONProtocolFactory()
    jsProt304 := factory303.GetProtocol(mbTrans301)
    argvalue0 := driver.NewIDataFrameId()
    err305 := argvalue0.Read(context.Background(), jsProt304)
    if err305 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "persist":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Persist requires 2 args")
      flag.Usage()
    }
    arg307 := flag.Arg(1)
    mbTrans308 := thrift.NewTMemoryBufferLen(len(arg307))
    defer mbTrans308.Close()
    _, err309 := mbTrans308.WriteString(arg307)
    if err309 != nil {
      Usage()
      return
    }
    factory310 := thrift.NewTJSONProtocolFactory()
    jsProt311 := factory310.GetProtocol(mbTrans308)
    argvalue0 := driver.NewIDataFrameId()
    err312 := argvalue0.Read(context.Background(), jsProt311)
    if err312 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err313 := (strconv.Atoi(flag.Arg(2)))
    if err313 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    fmt.Print(client.Persist(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Cache requires 1 args")
      flag.Usage()
    }
    arg314 := flag.Arg(1)
    mbTrans315 := thrift.NewTMemoryBufferLen(len(arg314))
    defer mbTrans315.Close()
    _, err316 := mbTrans315.WriteString(arg314)
    if err316 != nil {
      Usage()
      return
    }
    factory317 := thrift.NewTJSONProtocolFactory()
    jsProt318 := factory317.GetProtocol(mbTrans315)
    argvalue0 := driver.NewIDataFrameId()
    err319 := argvalue0.Read(context.Background(), jsProt318)
    if err319 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Cache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unpersist":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unpersist requires 1 args")
      flag.Usage()
    }
    arg320 := flag.Arg(1)
    mbTrans321 := thrift.NewTMemoryBufferLen(len(arg320))
    defer mbTrans321.Close()
    _, err322 := mbTrans321.WriteString(arg320)
    if err322 != nil {
      Usage()
      return
    }
    factory323 := thrift.NewTJSONProtocolFactory()
    jsProt324 := factory323.GetProtocol(mbTrans321)
    argvalue0 := driver.NewIDataFrameId()
    err325 := argvalue0.Read(context.Background(), jsProt324)
    if err325 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unpersist(context.Background(), value0))
    fmt.Print("\n")
    break
  case "uncache":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Uncache requires 1 args")
      flag.Usage()
    }
    arg326 := flag.Arg(1)
    mbTrans327 := thrift.NewTMemoryBufferLen(len(arg326))
    defer mbTrans327.Close()
    _, err328 := mbTrans327.WriteString(arg326)
    if err328 != nil {
      Usage()
      return
    }
    factory329 := thrift.NewTJSONProtocolFactory()
    jsProt330 := factory329.GetProtocol(mbTrans327)
    argvalue0 := driver.NewIDataFrameId()
    err331 := argvalue0.Read(context.Background(), jsProt330)
    if err331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Uncache(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Partitions requires 1 args")
      flag.Usage()
    }
    arg332 := flag.Arg(1)
    mbTrans333 := thrift.NewTMemoryBufferLen(len(arg332))
    defer mbTrans333.Close()
    _, err334 := mbTrans333.WriteString(arg332)
    if err334 != nil {
      Usage()
      return
    }
    factory335 := thrift.NewTJSONProtocolFactory()
    jsProt336 := factory335.GetProtocol(mbTrans333)
    argvalue0 := driver.NewIDataFrameId()
    err337 := argvalue0.Read(context.Background(), jsProt336)
    if err337 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Partitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "saveAsObjectFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsObjectFile requires 3 args")
      flag.Usage()
    }
    arg338 := flag.Arg(1)
    mbTrans339 := thrift.NewTMemoryBufferLen(len(arg338))
    defer mbTrans339.Close()
    _, err340 := mbTrans339.WriteString(arg338)
    if err340 != nil {
      Usage()
      return
    }
    factory341 := thrift.NewTJSONProtocolFactory()
    jsProt342 := factory341.GetProtocol(mbTrans339)
    argvalue0 := driver.NewIDataFrameId()
    err343 := argvalue0.Read(context.Background(), jsProt342)
    if err343 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err345 := (strconv.Atoi(flag.Arg(3)))
    if err345 != nil {
      Usage()
      return
    }
    argvalue2 := int8(tmp2)
    value2 := argvalue2
    fmt.Print(client.SaveAsObjectFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "saveAsTextFile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SaveAsTextFile requires 2 args")
      flag.Usage()
    }
    arg346 := flag.Arg(1)
    mbTrans347 := thrift.NewTMemoryBufferLen(len(arg346))
    defer mbTrans347.Close()
    _, err348 := mbTrans347.WriteString(arg346)
    if err348 != nil {
      Usage()
      return
    }
    factory349 := thrift.NewTJSONProtocolFactory()
    jsProt350 := factory349.GetProtocol(mbTrans347)
    argvalue0 := driver.NewIDataFrameId()
    err351 := argvalue0.Read(context.Background(), jsProt350)
    if err351 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SaveAsTextFile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "saveAsJsonFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SaveAsJsonFile requires 3 args")
      flag.Usage()
    }
    arg353 := flag.Arg(1)
    mbTrans354 := thrift.NewTMemoryBufferLen(len(arg353))
    defer mbTrans354.Close()
    _, err355 := mbTrans354.WriteString(arg353)
    if err355 != nil {
      Usage()
      return
    }
    factory356 := thrift.NewTJSONProtocolFactory()
    jsProt357 := factory356.GetProtocol(mbTrans354)
    argvalue0 := driver.NewIDataFrameId()
    err358 := argvalue0.Read(context.Background(), jsProt357)
    if err358 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SaveAsJsonFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "repartition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Repartition requires 4 args")
      flag.Usage()
    }
    arg361 := flag.Arg(1)
    mbTrans362 := thrift.NewTMemoryBufferLen(len(arg361))
    defer mbTrans362.Close()
    _, err363 := mbTrans362.WriteString(arg361)
    if err363 != nil {
      Usage()
      return
    }
    factory364 := thrift.NewTJSONProtocolFactory()
    jsProt365 := factory364.GetProtocol(mbTrans362)
    argvalue0 := driver.NewIDataFrameId()
    err366 := argvalue0.Read(context.Background(), jsProt365)
    if err366 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err367 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err367 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.Repartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "partitionByRandom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionByRandom requires 3 args")
      flag.Usage()
    }
    arg370 := flag.Arg(1)
    mbTrans371 := thrift.NewTMemoryBufferLen(len(arg370))
    defer mbTrans371.Close()
    _, err372 := mbTrans371.WriteString(arg370)
    if err372 != nil {
      Usage()
      return
    }
    factory373 := thrift.NewTJSONProtocolFactory()
    jsProt374 := factory373.GetProtocol(mbTrans371)
    argvalue0 := driver.NewIDataFrameId()
    err375 := argvalue0.Read(context.Background(), jsProt374)
    if err375 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err376 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err376 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err377 := (strconv.Atoi(flag.Arg(3)))
    if err377 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.PartitionByRandom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "partitionByHash":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionByHash requires 2 args")
      flag.Usage()
    }
    arg378 := flag.Arg(1)
    mbTrans379 := thrift.NewTMemoryBufferLen(len(arg378))
    defer mbTrans379.Close()
    _, err380 := mbTrans379.WriteString(arg378)
    if err380 != nil {
      Usage()
      return
    }
    factory381 := thrift.NewTJSONProtocolFactory()
    jsProt382 := factory381.GetProtocol(mbTrans379)
    argvalue0 := driver.NewIDataFrameId()
    err383 := argvalue0.Read(context.Background(), jsProt382)
    if err383 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err384 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err384 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PartitionByHash(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partitionBy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PartitionBy requires 3 args")
      flag.Usage()
    }
    arg385 := flag.Arg(1)
    mbTrans386 := thrift.NewTMemoryBufferLen(len(arg385))
    defer mbTrans386.Close()
    _, err387 := mbTrans386.WriteString(arg385)
    if err387 != nil {
      Usage()
      return
    }
    factory388 := thrift.NewTJSONProtocolFactory()
    jsProt389 := factory388.GetProtocol(mbTrans386)
    argvalue0 := driver.NewIDataFrameId()
    err390 := argvalue0.Read(context.Background(), jsProt389)
    if err390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg391 := flag.Arg(2)
    mbTrans392 := thrift.NewTMemoryBufferLen(len(arg391))
    defer mbTrans392.Close()
    _, err393 := mbTrans392.WriteString(arg391)
    if err393 != nil {
      Usage()
      return
    }
    factory394 := thrift.NewTJSONProtocolFactory()
    jsProt395 := factory394.GetProtocol(mbTrans392)
    argvalue1 := rpc.NewISource()
    err396 := argvalue1.Read(context.Background(), jsProt395)
    if err396 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err397 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err397 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PartitionBy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "map_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Map_ requires 2 args")
      flag.Usage()
    }
    arg398 := flag.Arg(1)
    mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewTJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue0 := driver.NewIDataFrameId()
    err403 := argvalue0.Read(context.Background(), jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg404 := flag.Arg(2)
    mbTrans405 := thrift.NewTMemoryBufferLen(len(arg404))
    defer mbTrans405.Close()
    _, err406 := mbTrans405.WriteString(arg404)
    if err406 != nil {
      Usage()
      return
    }
    factory407 := thrift.NewTJSONProtocolFactory()
    jsProt408 := factory407.GetProtocol(mbTrans405)
    argvalue1 := rpc.NewISource()
    err409 := argvalue1.Read(context.Background(), jsProt408)
    if err409 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Map_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "filter":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Filter requires 2 args")
      flag.Usage()
    }
    arg410 := flag.Arg(1)
    mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
    defer mbTrans411.Close()
    _, err412 := mbTrans411.WriteString(arg410)
    if err412 != nil {
      Usage()
      return
    }
    factory413 := thrift.NewTJSONProtocolFactory()
    jsProt414 := factory413.GetProtocol(mbTrans411)
    argvalue0 := driver.NewIDataFrameId()
    err415 := argvalue0.Read(context.Background(), jsProt414)
    if err415 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg416 := flag.Arg(2)
    mbTrans417 := thrift.NewTMemoryBufferLen(len(arg416))
    defer mbTrans417.Close()
    _, err418 := mbTrans417.WriteString(arg416)
    if err418 != nil {
      Usage()
      return
    }
    factory419 := thrift.NewTJSONProtocolFactory()
    jsProt420 := factory419.GetProtocol(mbTrans417)
    argvalue1 := rpc.NewISource()
    err421 := argvalue1.Read(context.Background(), jsProt420)
    if err421 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Filter(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "flatmap":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Flatmap requires 2 args")
      flag.Usage()
    }
    arg422 := flag.Arg(1)
    mbTrans423 := thrift.NewTMemoryBufferLen(len(arg422))
    defer mbTrans423.Close()
    _, err424 := mbTrans423.WriteString(arg422)
    if err424 != nil {
      Usage()
      return
    }
    factory425 := thrift.NewTJSONProtocolFactory()
    jsProt426 := factory425.GetProtocol(mbTrans423)
    argvalue0 := driver.NewIDataFrameId()
    err427 := argvalue0.Read(context.Background(), jsProt426)
    if err427 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg428 := flag.Arg(2)
    mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
    defer mbTrans429.Close()
    _, err430 := mbTrans429.WriteString(arg428)
    if err430 != nil {
      Usage()
      return
    }
    factory431 := thrift.NewTJSONProtocolFactory()
    jsProt432 := factory431.GetProtocol(mbTrans429)
    argvalue1 := rpc.NewISource()
    err433 := argvalue1.Read(context.Background(), jsProt432)
    if err433 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Flatmap(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "keyBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "KeyBy requires 2 args")
      flag.Usage()
    }
    arg434 := flag.Arg(1)
    mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
    defer mbTrans435.Close()
    _, err436 := mbTrans435.WriteString(arg434)
    if err436 != nil {
      Usage()
      return
    }
    factory437 := thrift.NewTJSONProtocolFactory()
    jsProt438 := factory437.GetProtocol(mbTrans435)
    argvalue0 := driver.NewIDataFrameId()
    err439 := argvalue0.Read(context.Background(), jsProt438)
    if err439 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg440 := flag.Arg(2)
    mbTrans441 := thrift.NewTMemoryBufferLen(len(arg440))
    defer mbTrans441.Close()
    _, err442 := mbTrans441.WriteString(arg440)
    if err442 != nil {
      Usage()
      return
    }
    factory443 := thrift.NewTJSONProtocolFactory()
    jsProt444 := factory443.GetProtocol(mbTrans441)
    argvalue1 := rpc.NewISource()
    err445 := argvalue1.Read(context.Background(), jsProt444)
    if err445 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.KeyBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapWithIndex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapWithIndex requires 2 args")
      flag.Usage()
    }
    arg446 := flag.Arg(1)
    mbTrans447 := thrift.NewTMemoryBufferLen(len(arg446))
    defer mbTrans447.Close()
    _, err448 := mbTrans447.WriteString(arg446)
    if err448 != nil {
      Usage()
      return
    }
    factory449 := thrift.NewTJSONProtocolFactory()
    jsProt450 := factory449.GetProtocol(mbTrans447)
    argvalue0 := driver.NewIDataFrameId()
    err451 := argvalue0.Read(context.Background(), jsProt450)
    if err451 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg452 := flag.Arg(2)
    mbTrans453 := thrift.NewTMemoryBufferLen(len(arg452))
    defer mbTrans453.Close()
    _, err454 := mbTrans453.WriteString(arg452)
    if err454 != nil {
      Usage()
      return
    }
    factory455 := thrift.NewTJSONProtocolFactory()
    jsProt456 := factory455.GetProtocol(mbTrans453)
    argvalue1 := rpc.NewISource()
    err457 := argvalue1.Read(context.Background(), jsProt456)
    if err457 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapWithIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapPartitions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapPartitions requires 2 args")
      flag.Usage()
    }
    arg458 := flag.Arg(1)
    mbTrans459 := thrift.NewTMemoryBufferLen(len(arg458))
    defer mbTrans459.Close()
    _, err460 := mbTrans459.WriteString(arg458)
    if err460 != nil {
      Usage()
      return
    }
    factory461 := thrift.NewTJSONProtocolFactory()
    jsProt462 := factory461.GetProtocol(mbTrans459)
    argvalue0 := driver.NewIDataFrameId()
    err463 := argvalue0.Read(context.Background(), jsProt462)
    if err463 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg464 := flag.Arg(2)
    mbTrans465 := thrift.NewTMemoryBufferLen(len(arg464))
    defer mbTrans465.Close()
    _, err466 := mbTrans465.WriteString(arg464)
    if err466 != nil {
      Usage()
      return
    }
    factory467 := thrift.NewTJSONProtocolFactory()
    jsProt468 := factory467.GetProtocol(mbTrans465)
    argvalue1 := rpc.NewISource()
    err469 := argvalue1.Read(context.Background(), jsProt468)
    if err469 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapPartitions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapPartitionsWithIndex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapPartitionsWithIndex requires 2 args")
      flag.Usage()
    }
    arg470 := flag.Arg(1)
    mbTrans471 := thrift.NewTMemoryBufferLen(len(arg470))
    defer mbTrans471.Close()
    _, err472 := mbTrans471.WriteString(arg470)
    if err472 != nil {
      Usage()
      return
    }
    factory473 := thrift.NewTJSONProtocolFactory()
    jsProt474 := factory473.GetProtocol(mbTrans471)
    argvalue0 := driver.NewIDataFrameId()
    err475 := argvalue0.Read(context.Background(), jsProt474)
    if err475 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg476 := flag.Arg(2)
    mbTrans477 := thrift.NewTMemoryBufferLen(len(arg476))
    defer mbTrans477.Close()
    _, err478 := mbTrans477.WriteString(arg476)
    if err478 != nil {
      Usage()
      return
    }
    factory479 := thrift.NewTJSONProtocolFactory()
    jsProt480 := factory479.GetProtocol(mbTrans477)
    argvalue1 := rpc.NewISource()
    err481 := argvalue1.Read(context.Background(), jsProt480)
    if err481 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapPartitionsWithIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutor requires 2 args")
      flag.Usage()
    }
    arg482 := flag.Arg(1)
    mbTrans483 := thrift.NewTMemoryBufferLen(len(arg482))
    defer mbTrans483.Close()
    _, err484 := mbTrans483.WriteString(arg482)
    if err484 != nil {
      Usage()
      return
    }
    factory485 := thrift.NewTJSONProtocolFactory()
    jsProt486 := factory485.GetProtocol(mbTrans483)
    argvalue0 := driver.NewIDataFrameId()
    err487 := argvalue0.Read(context.Background(), jsProt486)
    if err487 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg488 := flag.Arg(2)
    mbTrans489 := thrift.NewTMemoryBufferLen(len(arg488))
    defer mbTrans489.Close()
    _, err490 := mbTrans489.WriteString(arg488)
    if err490 != nil {
      Usage()
      return
    }
    factory491 := thrift.NewTJSONProtocolFactory()
    jsProt492 := factory491.GetProtocol(mbTrans489)
    argvalue1 := rpc.NewISource()
    err493 := argvalue1.Read(context.Background(), jsProt492)
    if err493 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapExecutorTo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapExecutorTo requires 2 args")
      flag.Usage()
    }
    arg494 := flag.Arg(1)
    mbTrans495 := thrift.NewTMemoryBufferLen(len(arg494))
    defer mbTrans495.Close()
    _, err496 := mbTrans495.WriteString(arg494)
    if err496 != nil {
      Usage()
      return
    }
    factory497 := thrift.NewTJSONProtocolFactory()
    jsProt498 := factory497.GetProtocol(mbTrans495)
    argvalue0 := driver.NewIDataFrameId()
    err499 := argvalue0.Read(context.Background(), jsProt498)
    if err499 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg500 := flag.Arg(2)
    mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
    defer mbTrans501.Close()
    _, err502 := mbTrans501.WriteString(arg500)
    if err502 != nil {
      Usage()
      return
    }
    factory503 := thrift.NewTJSONProtocolFactory()
    jsProt504 := factory503.GetProtocol(mbTrans501)
    argvalue1 := rpc.NewISource()
    err505 := argvalue1.Read(context.Background(), jsProt504)
    if err505 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapExecutorTo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupBy requires 2 args")
      flag.Usage()
    }
    arg506 := flag.Arg(1)
    mbTrans507 := thrift.NewTMemoryBufferLen(len(arg506))
    defer mbTrans507.Close()
    _, err508 := mbTrans507.WriteString(arg506)
    if err508 != nil {
      Usage()
      return
    }
    factory509 := thrift.NewTJSONProtocolFactory()
    jsProt510 := factory509.GetProtocol(mbTrans507)
    argvalue0 := driver.NewIDataFrameId()
    err511 := argvalue0.Read(context.Background(), jsProt510)
    if err511 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg512 := flag.Arg(2)
    mbTrans513 := thrift.NewTMemoryBufferLen(len(arg512))
    defer mbTrans513.Close()
    _, err514 := mbTrans513.WriteString(arg512)
    if err514 != nil {
      Usage()
      return
    }
    factory515 := thrift.NewTJSONProtocolFactory()
    jsProt516 := factory515.GetProtocol(mbTrans513)
    argvalue1 := rpc.NewISource()
    err517 := argvalue1.Read(context.Background(), jsProt516)
    if err517 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupBy(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupBy2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupBy2 requires 3 args")
      flag.Usage()
    }
    arg518 := flag.Arg(1)
    mbTrans519 := thrift.NewTMemoryBufferLen(len(arg518))
    defer mbTrans519.Close()
    _, err520 := mbTrans519.WriteString(arg518)
    if err520 != nil {
      Usage()
      return
    }
    factory521 := thrift.NewTJSONProtocolFactory()
    jsProt522 := factory521.GetProtocol(mbTrans519)
    argvalue0 := driver.NewIDataFrameId()
    err523 := argvalue0.Read(context.Background(), jsProt522)
    if err523 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg524 := flag.Arg(2)
    mbTrans525 := thrift.NewTMemoryBufferLen(len(arg524))
    defer mbTrans525.Close()
    _, err526 := mbTrans525.WriteString(arg524)
    if err526 != nil {
      Usage()
      return
    }
    factory527 := thrift.NewTJSONProtocolFactory()
    jsProt528 := factory527.GetProtocol(mbTrans525)
    argvalue1 := rpc.NewISource()
    err529 := argvalue1.Read(context.Background(), jsProt528)
    if err529 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err530 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err530 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupBy2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sort":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sort requires 2 args")
      flag.Usage()
    }
    arg531 := flag.Arg(1)
    mbTrans532 := thrift.NewTMemoryBufferLen(len(arg531))
    defer mbTrans532.Close()
    _, err533 := mbTrans532.WriteString(arg531)
    if err533 != nil {
      Usage()
      return
    }
    factory534 := thrift.NewTJSONProtocolFactory()
    jsProt535 := factory534.GetProtocol(mbTrans532)
    argvalue0 := driver.NewIDataFrameId()
    err536 := argvalue0.Read(context.Background(), jsProt535)
    if err536 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.Sort(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sort2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Sort2 requires 3 args")
      flag.Usage()
    }
    arg538 := flag.Arg(1)
    mbTrans539 := thrift.NewTMemoryBufferLen(len(arg538))
    defer mbTrans539.Close()
    _, err540 := mbTrans539.WriteString(arg538)
    if err540 != nil {
      Usage()
      return
    }
    factory541 := thrift.NewTJSONProtocolFactory()
    jsProt542 := factory541.GetProtocol(mbTrans539)
    argvalue0 := driver.NewIDataFrameId()
    err543 := argvalue0.Read(context.Background(), jsProt542)
    if err543 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err545 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err545 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Sort2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortBy requires 3 args")
      flag.Usage()
    }
    arg546 := flag.Arg(1)
    mbTrans547 := thrift.NewTMemoryBufferLen(len(arg546))
    defer mbTrans547.Close()
    _, err548 := mbTrans547.WriteString(arg546)
    if err548 != nil {
      Usage()
      return
    }
    factory549 := thrift.NewTJSONProtocolFactory()
    jsProt550 := factory549.GetProtocol(mbTrans547)
    argvalue0 := driver.NewIDataFrameId()
    err551 := argvalue0.Read(context.Background(), jsProt550)
    if err551 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg552 := flag.Arg(2)
    mbTrans553 := thrift.NewTMemoryBufferLen(len(arg552))
    defer mbTrans553.Close()
    _, err554 := mbTrans553.WriteString(arg552)
    if err554 != nil {
      Usage()
      return
    }
    factory555 := thrift.NewTJSONProtocolFactory()
    jsProt556 := factory555.GetProtocol(mbTrans553)
    argvalue1 := rpc.NewISource()
    err557 := argvalue1.Read(context.Background(), jsProt556)
    if err557 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortBy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortBy3":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortBy3 requires 4 args")
      flag.Usage()
    }
    arg559 := flag.Arg(1)
    mbTrans560 := thrift.NewTMemoryBufferLen(len(arg559))
    defer mbTrans560.Close()
    _, err561 := mbTrans560.WriteString(arg559)
    if err561 != nil {
      Usage()
      return
    }
    factory562 := thrift.NewTJSONProtocolFactory()
    jsProt563 := factory562.GetProtocol(mbTrans560)
    argvalue0 := driver.NewIDataFrameId()
    err564 := argvalue0.Read(context.Background(), jsProt563)
    if err564 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg565 := flag.Arg(2)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil {
      Usage()
      return
    }
    factory568 := thrift.NewTJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    argvalue1 := rpc.NewISource()
    err570 := argvalue1.Read(context.Background(), jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err572 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err572 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortBy3(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "union_":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Union_ requires 3 args")
      flag.Usage()
    }
    arg573 := flag.Arg(1)
    mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
    defer mbTrans574.Close()
    _, err575 := mbTrans574.WriteString(arg573)
    if err575 != nil {
      Usage()
      return
    }
    factory576 := thrift.NewTJSONProtocolFactory()
    jsProt577 := factory576.GetProtocol(mbTrans574)
    argvalue0 := driver.NewIDataFrameId()
    err578 := argvalue0.Read(context.Background(), jsProt577)
    if err578 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg579 := flag.Arg(2)
    mbTrans580 := thrift.NewTMemoryBufferLen(len(arg579))
    defer mbTrans580.Close()
    _, err581 := mbTrans580.WriteString(arg579)
    if err581 != nil {
      Usage()
      return
    }
    factory582 := thrift.NewTJSONProtocolFactory()
    jsProt583 := factory582.GetProtocol(mbTrans580)
    argvalue1 := driver.NewIDataFrameId()
    err584 := argvalue1.Read(context.Background(), jsProt583)
    if err584 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.Union_(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "union4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Union4 requires 4 args")
      flag.Usage()
    }
    arg586 := flag.Arg(1)
    mbTrans587 := thrift.NewTMemoryBufferLen(len(arg586))
    defer mbTrans587.Close()
    _, err588 := mbTrans587.WriteString(arg586)
    if err588 != nil {
      Usage()
      return
    }
    factory589 := thrift.NewTJSONProtocolFactory()
    jsProt590 := factory589.GetProtocol(mbTrans587)
    argvalue0 := driver.NewIDataFrameId()
    err591 := argvalue0.Read(context.Background(), jsProt590)
    if err591 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg592 := flag.Arg(2)
    mbTrans593 := thrift.NewTMemoryBufferLen(len(arg592))
    defer mbTrans593.Close()
    _, err594 := mbTrans593.WriteString(arg592)
    if err594 != nil {
      Usage()
      return
    }
    factory595 := thrift.NewTJSONProtocolFactory()
    jsProt596 := factory595.GetProtocol(mbTrans593)
    argvalue1 := driver.NewIDataFrameId()
    err597 := argvalue1.Read(context.Background(), jsProt596)
    if err597 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg599 := flag.Arg(4)
    mbTrans600 := thrift.NewTMemoryBufferLen(len(arg599))
    defer mbTrans600.Close()
    _, err601 := mbTrans600.WriteString(arg599)
    if err601 != nil {
      Usage()
      return
    }
    factory602 := thrift.NewTJSONProtocolFactory()
    jsProt603 := factory602.GetProtocol(mbTrans600)
    argvalue3 := rpc.NewISource()
    err604 := argvalue3.Read(context.Background(), jsProt603)
    if err604 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Union4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "join":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Join requires 2 args")
      flag.Usage()
    }
    arg605 := flag.Arg(1)
    mbTrans606 := thrift.NewTMemoryBufferLen(len(arg605))
    defer mbTrans606.Close()
    _, err607 := mbTrans606.WriteString(arg605)
    if err607 != nil {
      Usage()
      return
    }
    factory608 := thrift.NewTJSONProtocolFactory()
    jsProt609 := factory608.GetProtocol(mbTrans606)
    argvalue0 := driver.NewIDataFrameId()
    err610 := argvalue0.Read(context.Background(), jsProt609)
    if err610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg611 := flag.Arg(2)
    mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewTJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue1 := driver.NewIDataFrameId()
    err616 := argvalue1.Read(context.Background(), jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Join(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "join3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3a requires 3 args")
      flag.Usage()
    }
    arg617 := flag.Arg(1)
    mbTrans618 := thrift.NewTMemoryBufferLen(len(arg617))
    defer mbTrans618.Close()
    _, err619 := mbTrans618.WriteString(arg617)
    if err619 != nil {
      Usage()
      return
    }
    factory620 := thrift.NewTJSONProtocolFactory()
    jsProt621 := factory620.GetProtocol(mbTrans618)
    argvalue0 := driver.NewIDataFrameId()
    err622 := argvalue0.Read(context.Background(), jsProt621)
    if err622 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg623 := flag.Arg(2)
    mbTrans624 := thrift.NewTMemoryBufferLen(len(arg623))
    defer mbTrans624.Close()
    _, err625 := mbTrans624.WriteString(arg623)
    if err625 != nil {
      Usage()
      return
    }
    factory626 := thrift.NewTJSONProtocolFactory()
    jsProt627 := factory626.GetProtocol(mbTrans624)
    argvalue1 := driver.NewIDataFrameId()
    err628 := argvalue1.Read(context.Background(), jsProt627)
    if err628 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err629 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err629 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Join3b requires 3 args")
      flag.Usage()
    }
    arg630 := flag.Arg(1)
    mbTrans631 := thrift.NewTMemoryBufferLen(len(arg630))
    defer mbTrans631.Close()
    _, err632 := mbTrans631.WriteString(arg630)
    if err632 != nil {
      Usage()
      return
    }
    factory633 := thrift.NewTJSONProtocolFactory()
    jsProt634 := factory633.GetProtocol(mbTrans631)
    argvalue0 := driver.NewIDataFrameId()
    err635 := argvalue0.Read(context.Background(), jsProt634)
    if err635 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg636 := flag.Arg(2)
    mbTrans637 := thrift.NewTMemoryBufferLen(len(arg636))
    defer mbTrans637.Close()
    _, err638 := mbTrans637.WriteString(arg636)
    if err638 != nil {
      Usage()
      return
    }
    factory639 := thrift.NewTJSONProtocolFactory()
    jsProt640 := factory639.GetProtocol(mbTrans637)
    argvalue1 := driver.NewIDataFrameId()
    err641 := argvalue1.Read(context.Background(), jsProt640)
    if err641 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg642 := flag.Arg(3)
    mbTrans643 := thrift.NewTMemoryBufferLen(len(arg642))
    defer mbTrans643.Close()
    _, err644 := mbTrans643.WriteString(arg642)
    if err644 != nil {
      Usage()
      return
    }
    factory645 := thrift.NewTJSONProtocolFactory()
    jsProt646 := factory645.GetProtocol(mbTrans643)
    argvalue2 := rpc.NewISource()
    err647 := argvalue2.Read(context.Background(), jsProt646)
    if err647 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Join3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "join4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Join4 requires 4 args")
      flag.Usage()
    }
    arg648 := flag.Arg(1)
    mbTrans649 := thrift.NewTMemoryBufferLen(len(arg648))
    defer mbTrans649.Close()
    _, err650 := mbTrans649.WriteString(arg648)
    if err650 != nil {
      Usage()
      return
    }
    factory651 := thrift.NewTJSONProtocolFactory()
    jsProt652 := factory651.GetProtocol(mbTrans649)
    argvalue0 := driver.NewIDataFrameId()
    err653 := argvalue0.Read(context.Background(), jsProt652)
    if err653 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg654 := flag.Arg(2)
    mbTrans655 := thrift.NewTMemoryBufferLen(len(arg654))
    defer mbTrans655.Close()
    _, err656 := mbTrans655.WriteString(arg654)
    if err656 != nil {
      Usage()
      return
    }
    factory657 := thrift.NewTJSONProtocolFactory()
    jsProt658 := factory657.GetProtocol(mbTrans655)
    argvalue1 := driver.NewIDataFrameId()
    err659 := argvalue1.Read(context.Background(), jsProt658)
    if err659 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err660 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err660 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg661 := flag.Arg(4)
    mbTrans662 := thrift.NewTMemoryBufferLen(len(arg661))
    defer mbTrans662.Close()
    _, err663 := mbTrans662.WriteString(arg661)
    if err663 != nil {
      Usage()
      return
    }
    factory664 := thrift.NewTJSONProtocolFactory()
    jsProt665 := factory664.GetProtocol(mbTrans662)
    argvalue3 := rpc.NewISource()
    err666 := argvalue3.Read(context.Background(), jsProt665)
    if err666 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Join4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "distinct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Distinct requires 1 args")
      flag.Usage()
    }
    arg667 := flag.Arg(1)
    mbTrans668 := thrift.NewTMemoryBufferLen(len(arg667))
    defer mbTrans668.Close()
    _, err669 := mbTrans668.WriteString(arg667)
    if err669 != nil {
      Usage()
      return
    }
    factory670 := thrift.NewTJSONProtocolFactory()
    jsProt671 := factory670.GetProtocol(mbTrans668)
    argvalue0 := driver.NewIDataFrameId()
    err672 := argvalue0.Read(context.Background(), jsProt671)
    if err672 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Distinct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "distinct2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2a requires 2 args")
      flag.Usage()
    }
    arg673 := flag.Arg(1)
    mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
    defer mbTrans674.Close()
    _, err675 := mbTrans674.WriteString(arg673)
    if err675 != nil {
      Usage()
      return
    }
    factory676 := thrift.NewTJSONProtocolFactory()
    jsProt677 := factory676.GetProtocol(mbTrans674)
    argvalue0 := driver.NewIDataFrameId()
    err678 := argvalue0.Read(context.Background(), jsProt677)
    if err678 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err679 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err679 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "distinct2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Distinct2b requires 2 args")
      flag.Usage()
    }
    arg680 := flag.Arg(1)
    mbTrans681 := thrift.NewTMemoryBufferLen(len(arg680))
    defer mbTrans681.Close()
    _, err682 := mbTrans681.WriteString(arg680)
    if err682 != nil {
      Usage()
      return
    }
    factory683 := thrift.NewTJSONProtocolFactory()
    jsProt684 := factory683.GetProtocol(mbTrans681)
    argvalue0 := driver.NewIDataFrameId()
    err685 := argvalue0.Read(context.Background(), jsProt684)
    if err685 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg686 := flag.Arg(2)
    mbTrans687 := thrift.NewTMemoryBufferLen(len(arg686))
    defer mbTrans687.Close()
    _, err688 := mbTrans687.WriteString(arg686)
    if err688 != nil {
      Usage()
      return
    }
    factory689 := thrift.NewTJSONProtocolFactory()
    jsProt690 := factory689.GetProtocol(mbTrans687)
    argvalue1 := rpc.NewISource()
    err691 := argvalue1.Read(context.Background(), jsProt690)
    if err691 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Distinct2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "distinct3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Distinct3 requires 3 args")
      flag.Usage()
    }
    arg692 := flag.Arg(1)
    mbTrans693 := thrift.NewTMemoryBufferLen(len(arg692))
    defer mbTrans693.Close()
    _, err694 := mbTrans693.WriteString(arg692)
    if err694 != nil {
      Usage()
      return
    }
    factory695 := thrift.NewTJSONProtocolFactory()
    jsProt696 := factory695.GetProtocol(mbTrans693)
    argvalue0 := driver.NewIDataFrameId()
    err697 := argvalue0.Read(context.Background(), jsProt696)
    if err697 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err698 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err698 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg699 := flag.Arg(3)
    mbTrans700 := thrift.NewTMemoryBufferLen(len(arg699))
    defer mbTrans700.Close()
    _, err701 := mbTrans700.WriteString(arg699)
    if err701 != nil {
      Usage()
      return
    }
    factory702 := thrift.NewTJSONProtocolFactory()
    jsProt703 := factory702.GetProtocol(mbTrans700)
    argvalue2 := rpc.NewISource()
    err704 := argvalue2.Read(context.Background(), jsProt703)
    if err704 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Distinct3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Reduce requires 3 args")
      flag.Usage()
    }
    arg705 := flag.Arg(1)
    mbTrans706 := thrift.NewTMemoryBufferLen(len(arg705))
    defer mbTrans706.Close()
    _, err707 := mbTrans706.WriteString(arg705)
    if err707 != nil {
      Usage()
      return
    }
    factory708 := thrift.NewTJSONProtocolFactory()
    jsProt709 := factory708.GetProtocol(mbTrans706)
    argvalue0 := driver.NewIDataFrameId()
    err710 := argvalue0.Read(context.Background(), jsProt709)
    if err710 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg711 := flag.Arg(2)
    mbTrans712 := thrift.NewTMemoryBufferLen(len(arg711))
    defer mbTrans712.Close()
    _, err713 := mbTrans712.WriteString(arg711)
    if err713 != nil {
      Usage()
      return
    }
    factory714 := thrift.NewTJSONProtocolFactory()
    jsProt715 := factory714.GetProtocol(mbTrans712)
    argvalue1 := rpc.NewISource()
    err716 := argvalue1.Read(context.Background(), jsProt715)
    if err716 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg717 := flag.Arg(3)
    mbTrans718 := thrift.NewTMemoryBufferLen(len(arg717))
    defer mbTrans718.Close()
    _, err719 := mbTrans718.WriteString(arg717)
    if err719 != nil {
      Usage()
      return
    }
    factory720 := thrift.NewTJSONProtocolFactory()
    jsProt721 := factory720.GetProtocol(mbTrans718)
    argvalue2 := rpc.NewISource()
    err722 := argvalue2.Read(context.Background(), jsProt721)
    if err722 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Reduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "treeReduce":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TreeReduce requires 3 args")
      flag.Usage()
    }
    arg723 := flag.Arg(1)
    mbTrans724 := thrift.NewTMemoryBufferLen(len(arg723))
    defer mbTrans724.Close()
    _, err725 := mbTrans724.WriteString(arg723)
    if err725 != nil {
      Usage()
      return
    }
    factory726 := thrift.NewTJSONProtocolFactory()
    jsProt727 := factory726.GetProtocol(mbTrans724)
    argvalue0 := driver.NewIDataFrameId()
    err728 := argvalue0.Read(context.Background(), jsProt727)
    if err728 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg729 := flag.Arg(2)
    mbTrans730 := thrift.NewTMemoryBufferLen(len(arg729))
    defer mbTrans730.Close()
    _, err731 := mbTrans730.WriteString(arg729)
    if err731 != nil {
      Usage()
      return
    }
    factory732 := thrift.NewTJSONProtocolFactory()
    jsProt733 := factory732.GetProtocol(mbTrans730)
    argvalue1 := rpc.NewISource()
    err734 := argvalue1.Read(context.Background(), jsProt733)
    if err734 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg735 := flag.Arg(3)
    mbTrans736 := thrift.NewTMemoryBufferLen(len(arg735))
    defer mbTrans736.Close()
    _, err737 := mbTrans736.WriteString(arg735)
    if err737 != nil {
      Usage()
      return
    }
    factory738 := thrift.NewTJSONProtocolFactory()
    jsProt739 := factory738.GetProtocol(mbTrans736)
    argvalue2 := rpc.NewISource()
    err740 := argvalue2.Read(context.Background(), jsProt739)
    if err740 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TreeReduce(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "collect":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Collect requires 2 args")
      flag.Usage()
    }
    arg741 := flag.Arg(1)
    mbTrans742 := thrift.NewTMemoryBufferLen(len(arg741))
    defer mbTrans742.Close()
    _, err743 := mbTrans742.WriteString(arg741)
    if err743 != nil {
      Usage()
      return
    }
    factory744 := thrift.NewTJSONProtocolFactory()
    jsProt745 := factory744.GetProtocol(mbTrans742)
    argvalue0 := driver.NewIDataFrameId()
    err746 := argvalue0.Read(context.Background(), jsProt745)
    if err746 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg747 := flag.Arg(2)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue1 := rpc.NewISource()
    err752 := argvalue1.Read(context.Background(), jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Collect(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "aggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "Aggregate requires 5 args")
      flag.Usage()
    }
    arg753 := flag.Arg(1)
    mbTrans754 := thrift.NewTMemoryBufferLen(len(arg753))
    defer mbTrans754.Close()
    _, err755 := mbTrans754.WriteString(arg753)
    if err755 != nil {
      Usage()
      return
    }
    factory756 := thrift.NewTJSONProtocolFactory()
    jsProt757 := factory756.GetProtocol(mbTrans754)
    argvalue0 := driver.NewIDataFrameId()
    err758 := argvalue0.Read(context.Background(), jsProt757)
    if err758 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg759 := flag.Arg(2)
    mbTrans760 := thrift.NewTMemoryBufferLen(len(arg759))
    defer mbTrans760.Close()
    _, err761 := mbTrans760.WriteString(arg759)
    if err761 != nil {
      Usage()
      return
    }
    factory762 := thrift.NewTJSONProtocolFactory()
    jsProt763 := factory762.GetProtocol(mbTrans760)
    argvalue1 := rpc.NewISource()
    err764 := argvalue1.Read(context.Background(), jsProt763)
    if err764 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg765 := flag.Arg(3)
    mbTrans766 := thrift.NewTMemoryBufferLen(len(arg765))
    defer mbTrans766.Close()
    _, err767 := mbTrans766.WriteString(arg765)
    if err767 != nil {
      Usage()
      return
    }
    factory768 := thrift.NewTJSONProtocolFactory()
    jsProt769 := factory768.GetProtocol(mbTrans766)
    argvalue2 := rpc.NewISource()
    err770 := argvalue2.Read(context.Background(), jsProt769)
    if err770 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg771 := flag.Arg(4)
    mbTrans772 := thrift.NewTMemoryBufferLen(len(arg771))
    defer mbTrans772.Close()
    _, err773 := mbTrans772.WriteString(arg771)
    if err773 != nil {
      Usage()
      return
    }
    factory774 := thrift.NewTJSONProtocolFactory()
    jsProt775 := factory774.GetProtocol(mbTrans772)
    argvalue3 := rpc.NewISource()
    err776 := argvalue3.Read(context.Background(), jsProt775)
    if err776 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg777 := flag.Arg(5)
    mbTrans778 := thrift.NewTMemoryBufferLen(len(arg777))
    defer mbTrans778.Close()
    _, err779 := mbTrans778.WriteString(arg777)
    if err779 != nil {
      Usage()
      return
    }
    factory780 := thrift.NewTJSONProtocolFactory()
    jsProt781 := factory780.GetProtocol(mbTrans778)
    argvalue4 := rpc.NewISource()
    err782 := argvalue4.Read(context.Background(), jsProt781)
    if err782 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.Aggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "treeAggregate":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TreeAggregate requires 5 args")
      flag.Usage()
    }
    arg783 := flag.Arg(1)
    mbTrans784 := thrift.NewTMemoryBufferLen(len(arg783))
    defer mbTrans784.Close()
    _, err785 := mbTrans784.WriteString(arg783)
    if err785 != nil {
      Usage()
      return
    }
    factory786 := thrift.NewTJSONProtocolFactory()
    jsProt787 := factory786.GetProtocol(mbTrans784)
    argvalue0 := driver.NewIDataFrameId()
    err788 := argvalue0.Read(context.Background(), jsProt787)
    if err788 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg789 := flag.Arg(2)
    mbTrans790 := thrift.NewTMemoryBufferLen(len(arg789))
    defer mbTrans790.Close()
    _, err791 := mbTrans790.WriteString(arg789)
    if err791 != nil {
      Usage()
      return
    }
    factory792 := thrift.NewTJSONProtocolFactory()
    jsProt793 := factory792.GetProtocol(mbTrans790)
    argvalue1 := rpc.NewISource()
    err794 := argvalue1.Read(context.Background(), jsProt793)
    if err794 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg795 := flag.Arg(3)
    mbTrans796 := thrift.NewTMemoryBufferLen(len(arg795))
    defer mbTrans796.Close()
    _, err797 := mbTrans796.WriteString(arg795)
    if err797 != nil {
      Usage()
      return
    }
    factory798 := thrift.NewTJSONProtocolFactory()
    jsProt799 := factory798.GetProtocol(mbTrans796)
    argvalue2 := rpc.NewISource()
    err800 := argvalue2.Read(context.Background(), jsProt799)
    if err800 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg801 := flag.Arg(4)
    mbTrans802 := thrift.NewTMemoryBufferLen(len(arg801))
    defer mbTrans802.Close()
    _, err803 := mbTrans802.WriteString(arg801)
    if err803 != nil {
      Usage()
      return
    }
    factory804 := thrift.NewTJSONProtocolFactory()
    jsProt805 := factory804.GetProtocol(mbTrans802)
    argvalue3 := rpc.NewISource()
    err806 := argvalue3.Read(context.Background(), jsProt805)
    if err806 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg807 := flag.Arg(5)
    mbTrans808 := thrift.NewTMemoryBufferLen(len(arg807))
    defer mbTrans808.Close()
    _, err809 := mbTrans808.WriteString(arg807)
    if err809 != nil {
      Usage()
      return
    }
    factory810 := thrift.NewTJSONProtocolFactory()
    jsProt811 := factory810.GetProtocol(mbTrans808)
    argvalue4 := rpc.NewISource()
    err812 := argvalue4.Read(context.Background(), jsProt811)
    if err812 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TreeAggregate(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "fold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Fold requires 4 args")
      flag.Usage()
    }
    arg813 := flag.Arg(1)
    mbTrans814 := thrift.NewTMemoryBufferLen(len(arg813))
    defer mbTrans814.Close()
    _, err815 := mbTrans814.WriteString(arg813)
    if err815 != nil {
      Usage()
      return
    }
    factory816 := thrift.NewTJSONProtocolFactory()
    jsProt817 := factory816.GetProtocol(mbTrans814)
    argvalue0 := driver.NewIDataFrameId()
    err818 := argvalue0.Read(context.Background(), jsProt817)
    if err818 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg819 := flag.Arg(2)
    mbTrans820 := thrift.NewTMemoryBufferLen(len(arg819))
    defer mbTrans820.Close()
    _, err821 := mbTrans820.WriteString(arg819)
    if err821 != nil {
      Usage()
      return
    }
    factory822 := thrift.NewTJSONProtocolFactory()
    jsProt823 := factory822.GetProtocol(mbTrans820)
    argvalue1 := rpc.NewISource()
    err824 := argvalue1.Read(context.Background(), jsProt823)
    if err824 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg825 := flag.Arg(3)
    mbTrans826 := thrift.NewTMemoryBufferLen(len(arg825))
    defer mbTrans826.Close()
    _, err827 := mbTrans826.WriteString(arg825)
    if err827 != nil {
      Usage()
      return
    }
    factory828 := thrift.NewTJSONProtocolFactory()
    jsProt829 := factory828.GetProtocol(mbTrans826)
    argvalue2 := rpc.NewISource()
    err830 := argvalue2.Read(context.Background(), jsProt829)
    if err830 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg831 := flag.Arg(4)
    mbTrans832 := thrift.NewTMemoryBufferLen(len(arg831))
    defer mbTrans832.Close()
    _, err833 := mbTrans832.WriteString(arg831)
    if err833 != nil {
      Usage()
      return
    }
    factory834 := thrift.NewTJSONProtocolFactory()
    jsProt835 := factory834.GetProtocol(mbTrans832)
    argvalue3 := rpc.NewISource()
    err836 := argvalue3.Read(context.Background(), jsProt835)
    if err836 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Fold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "treeFold":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TreeFold requires 4 args")
      flag.Usage()
    }
    arg837 := flag.Arg(1)
    mbTrans838 := thrift.NewTMemoryBufferLen(len(arg837))
    defer mbTrans838.Close()
    _, err839 := mbTrans838.WriteString(arg837)
    if err839 != nil {
      Usage()
      return
    }
    factory840 := thrift.NewTJSONProtocolFactory()
    jsProt841 := factory840.GetProtocol(mbTrans838)
    argvalue0 := driver.NewIDataFrameId()
    err842 := argvalue0.Read(context.Background(), jsProt841)
    if err842 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg843 := flag.Arg(2)
    mbTrans844 := thrift.NewTMemoryBufferLen(len(arg843))
    defer mbTrans844.Close()
    _, err845 := mbTrans844.WriteString(arg843)
    if err845 != nil {
      Usage()
      return
    }
    factory846 := thrift.NewTJSONProtocolFactory()
    jsProt847 := factory846.GetProtocol(mbTrans844)
    argvalue1 := rpc.NewISource()
    err848 := argvalue1.Read(context.Background(), jsProt847)
    if err848 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg849 := flag.Arg(3)
    mbTrans850 := thrift.NewTMemoryBufferLen(len(arg849))
    defer mbTrans850.Close()
    _, err851 := mbTrans850.WriteString(arg849)
    if err851 != nil {
      Usage()
      return
    }
    factory852 := thrift.NewTJSONProtocolFactory()
    jsProt853 := factory852.GetProtocol(mbTrans850)
    argvalue2 := rpc.NewISource()
    err854 := argvalue2.Read(context.Background(), jsProt853)
    if err854 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg855 := flag.Arg(4)
    mbTrans856 := thrift.NewTMemoryBufferLen(len(arg855))
    defer mbTrans856.Close()
    _, err857 := mbTrans856.WriteString(arg855)
    if err857 != nil {
      Usage()
      return
    }
    factory858 := thrift.NewTJSONProtocolFactory()
    jsProt859 := factory858.GetProtocol(mbTrans856)
    argvalue3 := rpc.NewISource()
    err860 := argvalue3.Read(context.Background(), jsProt859)
    if err860 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TreeFold(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "take":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Take requires 3 args")
      flag.Usage()
    }
    arg861 := flag.Arg(1)
    mbTrans862 := thrift.NewTMemoryBufferLen(len(arg861))
    defer mbTrans862.Close()
    _, err863 := mbTrans862.WriteString(arg861)
    if err863 != nil {
      Usage()
      return
    }
    factory864 := thrift.NewTJSONProtocolFactory()
    jsProt865 := factory864.GetProtocol(mbTrans862)
    argvalue0 := driver.NewIDataFrameId()
    err866 := argvalue0.Read(context.Background(), jsProt865)
    if err866 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err867 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err867 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg868 := flag.Arg(3)
    mbTrans869 := thrift.NewTMemoryBufferLen(len(arg868))
    defer mbTrans869.Close()
    _, err870 := mbTrans869.WriteString(arg868)
    if err870 != nil {
      Usage()
      return
    }
    factory871 := thrift.NewTJSONProtocolFactory()
    jsProt872 := factory871.GetProtocol(mbTrans869)
    argvalue2 := rpc.NewISource()
    err873 := argvalue2.Read(context.Background(), jsProt872)
    if err873 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Take(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "foreach_":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Foreach_ requires 2 args")
      flag.Usage()
    }
    arg874 := flag.Arg(1)
    mbTrans875 := thrift.NewTMemoryBufferLen(len(arg874))
    defer mbTrans875.Close()
    _, err876 := mbTrans875.WriteString(arg874)
    if err876 != nil {
      Usage()
      return
    }
    factory877 := thrift.NewTJSONProtocolFactory()
    jsProt878 := factory877.GetProtocol(mbTrans875)
    argvalue0 := driver.NewIDataFrameId()
    err879 := argvalue0.Read(context.Background(), jsProt878)
    if err879 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg880 := flag.Arg(2)
    mbTrans881 := thrift.NewTMemoryBufferLen(len(arg880))
    defer mbTrans881.Close()
    _, err882 := mbTrans881.WriteString(arg880)
    if err882 != nil {
      Usage()
      return
    }
    factory883 := thrift.NewTJSONProtocolFactory()
    jsProt884 := factory883.GetProtocol(mbTrans881)
    argvalue1 := rpc.NewISource()
    err885 := argvalue1.Read(context.Background(), jsProt884)
    if err885 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Foreach_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachPartition":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachPartition requires 2 args")
      flag.Usage()
    }
    arg886 := flag.Arg(1)
    mbTrans887 := thrift.NewTMemoryBufferLen(len(arg886))
    defer mbTrans887.Close()
    _, err888 := mbTrans887.WriteString(arg886)
    if err888 != nil {
      Usage()
      return
    }
    factory889 := thrift.NewTJSONProtocolFactory()
    jsProt890 := factory889.GetProtocol(mbTrans887)
    argvalue0 := driver.NewIDataFrameId()
    err891 := argvalue0.Read(context.Background(), jsProt890)
    if err891 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg892 := flag.Arg(2)
    mbTrans893 := thrift.NewTMemoryBufferLen(len(arg892))
    defer mbTrans893.Close()
    _, err894 := mbTrans893.WriteString(arg892)
    if err894 != nil {
      Usage()
      return
    }
    factory895 := thrift.NewTJSONProtocolFactory()
    jsProt896 := factory895.GetProtocol(mbTrans893)
    argvalue1 := rpc.NewISource()
    err897 := argvalue1.Read(context.Background(), jsProt896)
    if err897 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachPartition(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "foreachExecutor":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForeachExecutor requires 2 args")
      flag.Usage()
    }
    arg898 := flag.Arg(1)
    mbTrans899 := thrift.NewTMemoryBufferLen(len(arg898))
    defer mbTrans899.Close()
    _, err900 := mbTrans899.WriteString(arg898)
    if err900 != nil {
      Usage()
      return
    }
    factory901 := thrift.NewTJSONProtocolFactory()
    jsProt902 := factory901.GetProtocol(mbTrans899)
    argvalue0 := driver.NewIDataFrameId()
    err903 := argvalue0.Read(context.Background(), jsProt902)
    if err903 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg904 := flag.Arg(2)
    mbTrans905 := thrift.NewTMemoryBufferLen(len(arg904))
    defer mbTrans905.Close()
    _, err906 := mbTrans905.WriteString(arg904)
    if err906 != nil {
      Usage()
      return
    }
    factory907 := thrift.NewTJSONProtocolFactory()
    jsProt908 := factory907.GetProtocol(mbTrans905)
    argvalue1 := rpc.NewISource()
    err909 := argvalue1.Read(context.Background(), jsProt908)
    if err909 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ForeachExecutor(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "top":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Top requires 3 args")
      flag.Usage()
    }
    arg910 := flag.Arg(1)
    mbTrans911 := thrift.NewTMemoryBufferLen(len(arg910))
    defer mbTrans911.Close()
    _, err912 := mbTrans911.WriteString(arg910)
    if err912 != nil {
      Usage()
      return
    }
    factory913 := thrift.NewTJSONProtocolFactory()
    jsProt914 := factory913.GetProtocol(mbTrans911)
    argvalue0 := driver.NewIDataFrameId()
    err915 := argvalue0.Read(context.Background(), jsProt914)
    if err915 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err916 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err916 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg917 := flag.Arg(3)
    mbTrans918 := thrift.NewTMemoryBufferLen(len(arg917))
    defer mbTrans918.Close()
    _, err919 := mbTrans918.WriteString(arg917)
    if err919 != nil {
      Usage()
      return
    }
    factory920 := thrift.NewTJSONProtocolFactory()
    jsProt921 := factory920.GetProtocol(mbTrans918)
    argvalue2 := rpc.NewISource()
    err922 := argvalue2.Read(context.Background(), jsProt921)
    if err922 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Top(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "top4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Top4 requires 4 args")
      flag.Usage()
    }
    arg923 := flag.Arg(1)
    mbTrans924 := thrift.NewTMemoryBufferLen(len(arg923))
    defer mbTrans924.Close()
    _, err925 := mbTrans924.WriteString(arg923)
    if err925 != nil {
      Usage()
      return
    }
    factory926 := thrift.NewTJSONProtocolFactory()
    jsProt927 := factory926.GetProtocol(mbTrans924)
    argvalue0 := driver.NewIDataFrameId()
    err928 := argvalue0.Read(context.Background(), jsProt927)
    if err928 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err929 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err929 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg930 := flag.Arg(3)
    mbTrans931 := thrift.NewTMemoryBufferLen(len(arg930))
    defer mbTrans931.Close()
    _, err932 := mbTrans931.WriteString(arg930)
    if err932 != nil {
      Usage()
      return
    }
    factory933 := thrift.NewTJSONProtocolFactory()
    jsProt934 := factory933.GetProtocol(mbTrans931)
    argvalue2 := rpc.NewISource()
    err935 := argvalue2.Read(context.Background(), jsProt934)
    if err935 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg936 := flag.Arg(4)
    mbTrans937 := thrift.NewTMemoryBufferLen(len(arg936))
    defer mbTrans937.Close()
    _, err938 := mbTrans937.WriteString(arg936)
    if err938 != nil {
      Usage()
      return
    }
    factory939 := thrift.NewTJSONProtocolFactory()
    jsProt940 := factory939.GetProtocol(mbTrans937)
    argvalue3 := rpc.NewISource()
    err941 := argvalue3.Read(context.Background(), jsProt940)
    if err941 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.Top4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeOrdered":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TakeOrdered requires 3 args")
      flag.Usage()
    }
    arg942 := flag.Arg(1)
    mbTrans943 := thrift.NewTMemoryBufferLen(len(arg942))
    defer mbTrans943.Close()
    _, err944 := mbTrans943.WriteString(arg942)
    if err944 != nil {
      Usage()
      return
    }
    factory945 := thrift.NewTJSONProtocolFactory()
    jsProt946 := factory945.GetProtocol(mbTrans943)
    argvalue0 := driver.NewIDataFrameId()
    err947 := argvalue0.Read(context.Background(), jsProt946)
    if err947 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err948 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err948 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg949 := flag.Arg(3)
    mbTrans950 := thrift.NewTMemoryBufferLen(len(arg949))
    defer mbTrans950.Close()
    _, err951 := mbTrans950.WriteString(arg949)
    if err951 != nil {
      Usage()
      return
    }
    factory952 := thrift.NewTJSONProtocolFactory()
    jsProt953 := factory952.GetProtocol(mbTrans950)
    argvalue2 := rpc.NewISource()
    err954 := argvalue2.Read(context.Background(), jsProt953)
    if err954 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TakeOrdered(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "takeOrdered4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TakeOrdered4 requires 4 args")
      flag.Usage()
    }
    arg955 := flag.Arg(1)
    mbTrans956 := thrift.NewTMemoryBufferLen(len(arg955))
    defer mbTrans956.Close()
    _, err957 := mbTrans956.WriteString(arg955)
    if err957 != nil {
      Usage()
      return
    }
    factory958 := thrift.NewTJSONProtocolFactory()
    jsProt959 := factory958.GetProtocol(mbTrans956)
    argvalue0 := driver.NewIDataFrameId()
    err960 := argvalue0.Read(context.Background(), jsProt959)
    if err960 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err961 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err961 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg962 := flag.Arg(3)
    mbTrans963 := thrift.NewTMemoryBufferLen(len(arg962))
    defer mbTrans963.Close()
    _, err964 := mbTrans963.WriteString(arg962)
    if err964 != nil {
      Usage()
      return
    }
    factory965 := thrift.NewTJSONProtocolFactory()
    jsProt966 := factory965.GetProtocol(mbTrans963)
    argvalue2 := rpc.NewISource()
    err967 := argvalue2.Read(context.Background(), jsProt966)
    if err967 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg968 := flag.Arg(4)
    mbTrans969 := thrift.NewTMemoryBufferLen(len(arg968))
    defer mbTrans969.Close()
    _, err970 := mbTrans969.WriteString(arg968)
    if err970 != nil {
      Usage()
      return
    }
    factory971 := thrift.NewTJSONProtocolFactory()
    jsProt972 := factory971.GetProtocol(mbTrans969)
    argvalue3 := rpc.NewISource()
    err973 := argvalue3.Read(context.Background(), jsProt972)
    if err973 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TakeOrdered4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sample":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Sample requires 4 args")
      flag.Usage()
    }
    arg974 := flag.Arg(1)
    mbTrans975 := thrift.NewTMemoryBufferLen(len(arg974))
    defer mbTrans975.Close()
    _, err976 := mbTrans975.WriteString(arg974)
    if err976 != nil {
      Usage()
      return
    }
    factory977 := thrift.NewTJSONProtocolFactory()
    jsProt978 := factory977.GetProtocol(mbTrans975)
    argvalue0 := driver.NewIDataFrameId()
    err979 := argvalue0.Read(context.Background(), jsProt978)
    if err979 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err981 := (strconv.ParseFloat(flag.Arg(3), 64))
    if err981 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err982 := (strconv.Atoi(flag.Arg(4)))
    if err982 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.Sample(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "takeSample":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TakeSample requires 5 args")
      flag.Usage()
    }
    arg983 := flag.Arg(1)
    mbTrans984 := thrift.NewTMemoryBufferLen(len(arg983))
    defer mbTrans984.Close()
    _, err985 := mbTrans984.WriteString(arg983)
    if err985 != nil {
      Usage()
      return
    }
    factory986 := thrift.NewTJSONProtocolFactory()
    jsProt987 := factory986.GetProtocol(mbTrans984)
    argvalue0 := driver.NewIDataFrameId()
    err988 := argvalue0.Read(context.Background(), jsProt987)
    if err988 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err990 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err990 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err991 := (strconv.Atoi(flag.Arg(4)))
    if err991 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg992 := flag.Arg(5)
    mbTrans993 := thrift.NewTMemoryBufferLen(len(arg992))
    defer mbTrans993.Close()
    _, err994 := mbTrans993.WriteString(arg992)
    if err994 != nil {
      Usage()
      return
    }
    factory995 := thrift.NewTJSONProtocolFactory()
    jsProt996 := factory995.GetProtocol(mbTrans993)
    argvalue4 := rpc.NewISource()
    err997 := argvalue4.Read(context.Background(), jsProt996)
    if err997 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TakeSample(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Count requires 1 args")
      flag.Usage()
    }
    arg998 := flag.Arg(1)
    mbTrans999 := thrift.NewTMemoryBufferLen(len(arg998))
    defer mbTrans999.Close()
    _, err1000 := mbTrans999.WriteString(arg998)
    if err1000 != nil {
      Usage()
      return
    }
    factory1001 := thrift.NewTJSONProtocolFactory()
    jsProt1002 := factory1001.GetProtocol(mbTrans999)
    argvalue0 := driver.NewIDataFrameId()
    err1003 := argvalue0.Read(context.Background(), jsProt1002)
    if err1003 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Count(context.Background(), value0))
    fmt.Print("\n")
    break
  case "max":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Max requires 2 args")
      flag.Usage()
    }
    arg1004 := flag.Arg(1)
    mbTrans1005 := thrift.NewTMemoryBufferLen(len(arg1004))
    defer mbTrans1005.Close()
    _, err1006 := mbTrans1005.WriteString(arg1004)
    if err1006 != nil {
      Usage()
      return
    }
    factory1007 := thrift.NewTJSONProtocolFactory()
    jsProt1008 := factory1007.GetProtocol(mbTrans1005)
    argvalue0 := driver.NewIDataFrameId()
    err1009 := argvalue0.Read(context.Background(), jsProt1008)
    if err1009 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1010 := flag.Arg(2)
    mbTrans1011 := thrift.NewTMemoryBufferLen(len(arg1010))
    defer mbTrans1011.Close()
    _, err1012 := mbTrans1011.WriteString(arg1010)
    if err1012 != nil {
      Usage()
      return
    }
    factory1013 := thrift.NewTJSONProtocolFactory()
    jsProt1014 := factory1013.GetProtocol(mbTrans1011)
    argvalue1 := rpc.NewISource()
    err1015 := argvalue1.Read(context.Background(), jsProt1014)
    if err1015 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Max(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "max3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Max3 requires 3 args")
      flag.Usage()
    }
    arg1016 := flag.Arg(1)
    mbTrans1017 := thrift.NewTMemoryBufferLen(len(arg1016))
    defer mbTrans1017.Close()
    _, err1018 := mbTrans1017.WriteString(arg1016)
    if err1018 != nil {
      Usage()
      return
    }
    factory1019 := thrift.NewTJSONProtocolFactory()
    jsProt1020 := factory1019.GetProtocol(mbTrans1017)
    argvalue0 := driver.NewIDataFrameId()
    err1021 := argvalue0.Read(context.Background(), jsProt1020)
    if err1021 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1022 := flag.Arg(2)
    mbTrans1023 := thrift.NewTMemoryBufferLen(len(arg1022))
    defer mbTrans1023.Close()
    _, err1024 := mbTrans1023.WriteString(arg1022)
    if err1024 != nil {
      Usage()
      return
    }
    factory1025 := thrift.NewTJSONProtocolFactory()
    jsProt1026 := factory1025.GetProtocol(mbTrans1023)
    argvalue1 := rpc.NewISource()
    err1027 := argvalue1.Read(context.Background(), jsProt1026)
    if err1027 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1028 := flag.Arg(3)
    mbTrans1029 := thrift.NewTMemoryBufferLen(len(arg1028))
    defer mbTrans1029.Close()
    _, err1030 := mbTrans1029.WriteString(arg1028)
    if err1030 != nil {
      Usage()
      return
    }
    factory1031 := thrift.NewTJSONProtocolFactory()
    jsProt1032 := factory1031.GetProtocol(mbTrans1029)
    argvalue2 := rpc.NewISource()
    err1033 := argvalue2.Read(context.Background(), jsProt1032)
    if err1033 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Max3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "min":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Min requires 2 args")
      flag.Usage()
    }
    arg1034 := flag.Arg(1)
    mbTrans1035 := thrift.NewTMemoryBufferLen(len(arg1034))
    defer mbTrans1035.Close()
    _, err1036 := mbTrans1035.WriteString(arg1034)
    if err1036 != nil {
      Usage()
      return
    }
    factory1037 := thrift.NewTJSONProtocolFactory()
    jsProt1038 := factory1037.GetProtocol(mbTrans1035)
    argvalue0 := driver.NewIDataFrameId()
    err1039 := argvalue0.Read(context.Background(), jsProt1038)
    if err1039 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1040 := flag.Arg(2)
    mbTrans1041 := thrift.NewTMemoryBufferLen(len(arg1040))
    defer mbTrans1041.Close()
    _, err1042 := mbTrans1041.WriteString(arg1040)
    if err1042 != nil {
      Usage()
      return
    }
    factory1043 := thrift.NewTJSONProtocolFactory()
    jsProt1044 := factory1043.GetProtocol(mbTrans1041)
    argvalue1 := rpc.NewISource()
    err1045 := argvalue1.Read(context.Background(), jsProt1044)
    if err1045 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Min(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "min3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Min3 requires 3 args")
      flag.Usage()
    }
    arg1046 := flag.Arg(1)
    mbTrans1047 := thrift.NewTMemoryBufferLen(len(arg1046))
    defer mbTrans1047.Close()
    _, err1048 := mbTrans1047.WriteString(arg1046)
    if err1048 != nil {
      Usage()
      return
    }
    factory1049 := thrift.NewTJSONProtocolFactory()
    jsProt1050 := factory1049.GetProtocol(mbTrans1047)
    argvalue0 := driver.NewIDataFrameId()
    err1051 := argvalue0.Read(context.Background(), jsProt1050)
    if err1051 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1052 := flag.Arg(2)
    mbTrans1053 := thrift.NewTMemoryBufferLen(len(arg1052))
    defer mbTrans1053.Close()
    _, err1054 := mbTrans1053.WriteString(arg1052)
    if err1054 != nil {
      Usage()
      return
    }
    factory1055 := thrift.NewTJSONProtocolFactory()
    jsProt1056 := factory1055.GetProtocol(mbTrans1053)
    argvalue1 := rpc.NewISource()
    err1057 := argvalue1.Read(context.Background(), jsProt1056)
    if err1057 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1058 := flag.Arg(3)
    mbTrans1059 := thrift.NewTMemoryBufferLen(len(arg1058))
    defer mbTrans1059.Close()
    _, err1060 := mbTrans1059.WriteString(arg1058)
    if err1060 != nil {
      Usage()
      return
    }
    factory1061 := thrift.NewTJSONProtocolFactory()
    jsProt1062 := factory1061.GetProtocol(mbTrans1059)
    argvalue2 := rpc.NewISource()
    err1063 := argvalue2.Read(context.Background(), jsProt1062)
    if err1063 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.Min3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "flatMapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FlatMapValues requires 2 args")
      flag.Usage()
    }
    arg1064 := flag.Arg(1)
    mbTrans1065 := thrift.NewTMemoryBufferLen(len(arg1064))
    defer mbTrans1065.Close()
    _, err1066 := mbTrans1065.WriteString(arg1064)
    if err1066 != nil {
      Usage()
      return
    }
    factory1067 := thrift.NewTJSONProtocolFactory()
    jsProt1068 := factory1067.GetProtocol(mbTrans1065)
    argvalue0 := driver.NewIDataFrameId()
    err1069 := argvalue0.Read(context.Background(), jsProt1068)
    if err1069 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1070 := flag.Arg(2)
    mbTrans1071 := thrift.NewTMemoryBufferLen(len(arg1070))
    defer mbTrans1071.Close()
    _, err1072 := mbTrans1071.WriteString(arg1070)
    if err1072 != nil {
      Usage()
      return
    }
    factory1073 := thrift.NewTJSONProtocolFactory()
    jsProt1074 := factory1073.GetProtocol(mbTrans1071)
    argvalue1 := rpc.NewISource()
    err1075 := argvalue1.Read(context.Background(), jsProt1074)
    if err1075 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.FlatMapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "mapValues":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapValues requires 2 args")
      flag.Usage()
    }
    arg1076 := flag.Arg(1)
    mbTrans1077 := thrift.NewTMemoryBufferLen(len(arg1076))
    defer mbTrans1077.Close()
    _, err1078 := mbTrans1077.WriteString(arg1076)
    if err1078 != nil {
      Usage()
      return
    }
    factory1079 := thrift.NewTJSONProtocolFactory()
    jsProt1080 := factory1079.GetProtocol(mbTrans1077)
    argvalue0 := driver.NewIDataFrameId()
    err1081 := argvalue0.Read(context.Background(), jsProt1080)
    if err1081 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1082 := flag.Arg(2)
    mbTrans1083 := thrift.NewTMemoryBufferLen(len(arg1082))
    defer mbTrans1083.Close()
    _, err1084 := mbTrans1083.WriteString(arg1082)
    if err1084 != nil {
      Usage()
      return
    }
    factory1085 := thrift.NewTJSONProtocolFactory()
    jsProt1086 := factory1085.GetProtocol(mbTrans1083)
    argvalue1 := rpc.NewISource()
    err1087 := argvalue1.Read(context.Background(), jsProt1086)
    if err1087 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MapValues(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GroupByKey requires 1 args")
      flag.Usage()
    }
    arg1088 := flag.Arg(1)
    mbTrans1089 := thrift.NewTMemoryBufferLen(len(arg1088))
    defer mbTrans1089.Close()
    _, err1090 := mbTrans1089.WriteString(arg1088)
    if err1090 != nil {
      Usage()
      return
    }
    factory1091 := thrift.NewTJSONProtocolFactory()
    jsProt1092 := factory1091.GetProtocol(mbTrans1089)
    argvalue0 := driver.NewIDataFrameId()
    err1093 := argvalue0.Read(context.Background(), jsProt1092)
    if err1093 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GroupByKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "groupByKey2a":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2a requires 2 args")
      flag.Usage()
    }
    arg1094 := flag.Arg(1)
    mbTrans1095 := thrift.NewTMemoryBufferLen(len(arg1094))
    defer mbTrans1095.Close()
    _, err1096 := mbTrans1095.WriteString(arg1094)
    if err1096 != nil {
      Usage()
      return
    }
    factory1097 := thrift.NewTJSONProtocolFactory()
    jsProt1098 := factory1097.GetProtocol(mbTrans1095)
    argvalue0 := driver.NewIDataFrameId()
    err1099 := argvalue0.Read(context.Background(), jsProt1098)
    if err1099 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1100 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1100 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2a(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey2b":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GroupByKey2b requires 2 args")
      flag.Usage()
    }
    arg1101 := flag.Arg(1)
    mbTrans1102 := thrift.NewTMemoryBufferLen(len(arg1101))
    defer mbTrans1102.Close()
    _, err1103 := mbTrans1102.WriteString(arg1101)
    if err1103 != nil {
      Usage()
      return
    }
    factory1104 := thrift.NewTJSONProtocolFactory()
    jsProt1105 := factory1104.GetProtocol(mbTrans1102)
    argvalue0 := driver.NewIDataFrameId()
    err1106 := argvalue0.Read(context.Background(), jsProt1105)
    if err1106 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1107 := flag.Arg(2)
    mbTrans1108 := thrift.NewTMemoryBufferLen(len(arg1107))
    defer mbTrans1108.Close()
    _, err1109 := mbTrans1108.WriteString(arg1107)
    if err1109 != nil {
      Usage()
      return
    }
    factory1110 := thrift.NewTJSONProtocolFactory()
    jsProt1111 := factory1110.GetProtocol(mbTrans1108)
    argvalue1 := rpc.NewISource()
    err1112 := argvalue1.Read(context.Background(), jsProt1111)
    if err1112 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GroupByKey2b(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "groupByKey3":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GroupByKey3 requires 3 args")
      flag.Usage()
    }
    arg1113 := flag.Arg(1)
    mbTrans1114 := thrift.NewTMemoryBufferLen(len(arg1113))
    defer mbTrans1114.Close()
    _, err1115 := mbTrans1114.WriteString(arg1113)
    if err1115 != nil {
      Usage()
      return
    }
    factory1116 := thrift.NewTJSONProtocolFactory()
    jsProt1117 := factory1116.GetProtocol(mbTrans1114)
    argvalue0 := driver.NewIDataFrameId()
    err1118 := argvalue0.Read(context.Background(), jsProt1117)
    if err1118 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1119 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1119 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1120 := flag.Arg(3)
    mbTrans1121 := thrift.NewTMemoryBufferLen(len(arg1120))
    defer mbTrans1121.Close()
    _, err1122 := mbTrans1121.WriteString(arg1120)
    if err1122 != nil {
      Usage()
      return
    }
    factory1123 := thrift.NewTJSONProtocolFactory()
    jsProt1124 := factory1123.GetProtocol(mbTrans1121)
    argvalue2 := rpc.NewISource()
    err1125 := argvalue2.Read(context.Background(), jsProt1124)
    if err1125 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GroupByKey3(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReduceByKey requires 3 args")
      flag.Usage()
    }
    arg1126 := flag.Arg(1)
    mbTrans1127 := thrift.NewTMemoryBufferLen(len(arg1126))
    defer mbTrans1127.Close()
    _, err1128 := mbTrans1127.WriteString(arg1126)
    if err1128 != nil {
      Usage()
      return
    }
    factory1129 := thrift.NewTJSONProtocolFactory()
    jsProt1130 := factory1129.GetProtocol(mbTrans1127)
    argvalue0 := driver.NewIDataFrameId()
    err1131 := argvalue0.Read(context.Background(), jsProt1130)
    if err1131 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1132 := flag.Arg(2)
    mbTrans1133 := thrift.NewTMemoryBufferLen(len(arg1132))
    defer mbTrans1133.Close()
    _, err1134 := mbTrans1133.WriteString(arg1132)
    if err1134 != nil {
      Usage()
      return
    }
    factory1135 := thrift.NewTJSONProtocolFactory()
    jsProt1136 := factory1135.GetProtocol(mbTrans1133)
    argvalue1 := rpc.NewISource()
    err1137 := argvalue1.Read(context.Background(), jsProt1136)
    if err1137 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.ReduceByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reduceByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ReduceByKey4 requires 4 args")
      flag.Usage()
    }
    arg1139 := flag.Arg(1)
    mbTrans1140 := thrift.NewTMemoryBufferLen(len(arg1139))
    defer mbTrans1140.Close()
    _, err1141 := mbTrans1140.WriteString(arg1139)
    if err1141 != nil {
      Usage()
      return
    }
    factory1142 := thrift.NewTJSONProtocolFactory()
    jsProt1143 := factory1142.GetProtocol(mbTrans1140)
    argvalue0 := driver.NewIDataFrameId()
    err1144 := argvalue0.Read(context.Background(), jsProt1143)
    if err1144 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1145 := flag.Arg(2)
    mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
    defer mbTrans1146.Close()
    _, err1147 := mbTrans1146.WriteString(arg1145)
    if err1147 != nil {
      Usage()
      return
    }
    factory1148 := thrift.NewTJSONProtocolFactory()
    jsProt1149 := factory1148.GetProtocol(mbTrans1146)
    argvalue1 := rpc.NewISource()
    err1150 := argvalue1.Read(context.Background(), jsProt1149)
    if err1150 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err1151 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1151 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.ReduceByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AggregateByKey requires 3 args")
      flag.Usage()
    }
    arg1153 := flag.Arg(1)
    mbTrans1154 := thrift.NewTMemoryBufferLen(len(arg1153))
    defer mbTrans1154.Close()
    _, err1155 := mbTrans1154.WriteString(arg1153)
    if err1155 != nil {
      Usage()
      return
    }
    factory1156 := thrift.NewTJSONProtocolFactory()
    jsProt1157 := factory1156.GetProtocol(mbTrans1154)
    argvalue0 := driver.NewIDataFrameId()
    err1158 := argvalue0.Read(context.Background(), jsProt1157)
    if err1158 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1159 := flag.Arg(2)
    mbTrans1160 := thrift.NewTMemoryBufferLen(len(arg1159))
    defer mbTrans1160.Close()
    _, err1161 := mbTrans1160.WriteString(arg1159)
    if err1161 != nil {
      Usage()
      return
    }
    factory1162 := thrift.NewTJSONProtocolFactory()
    jsProt1163 := factory1162.GetProtocol(mbTrans1160)
    argvalue1 := rpc.NewISource()
    err1164 := argvalue1.Read(context.Background(), jsProt1163)
    if err1164 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1165 := flag.Arg(3)
    mbTrans1166 := thrift.NewTMemoryBufferLen(len(arg1165))
    defer mbTrans1166.Close()
    _, err1167 := mbTrans1166.WriteString(arg1165)
    if err1167 != nil {
      Usage()
      return
    }
    factory1168 := thrift.NewTJSONProtocolFactory()
    jsProt1169 := factory1168.GetProtocol(mbTrans1166)
    argvalue2 := rpc.NewISource()
    err1170 := argvalue2.Read(context.Background(), jsProt1169)
    if err1170 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AggregateByKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "aggregateByKey4a":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4a requires 4 args")
      flag.Usage()
    }
    arg1171 := flag.Arg(1)
    mbTrans1172 := thrift.NewTMemoryBufferLen(len(arg1171))
    defer mbTrans1172.Close()
    _, err1173 := mbTrans1172.WriteString(arg1171)
    if err1173 != nil {
      Usage()
      return
    }
    factory1174 := thrift.NewTJSONProtocolFactory()
    jsProt1175 := factory1174.GetProtocol(mbTrans1172)
    argvalue0 := driver.NewIDataFrameId()
    err1176 := argvalue0.Read(context.Background(), jsProt1175)
    if err1176 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1177 := flag.Arg(2)
    mbTrans1178 := thrift.NewTMemoryBufferLen(len(arg1177))
    defer mbTrans1178.Close()
    _, err1179 := mbTrans1178.WriteString(arg1177)
    if err1179 != nil {
      Usage()
      return
    }
    factory1180 := thrift.NewTJSONProtocolFactory()
    jsProt1181 := factory1180.GetProtocol(mbTrans1178)
    argvalue1 := rpc.NewISource()
    err1182 := argvalue1.Read(context.Background(), jsProt1181)
    if err1182 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1183 := flag.Arg(3)
    mbTrans1184 := thrift.NewTMemoryBufferLen(len(arg1183))
    defer mbTrans1184.Close()
    _, err1185 := mbTrans1184.WriteString(arg1183)
    if err1185 != nil {
      Usage()
      return
    }
    factory1186 := thrift.NewTJSONProtocolFactory()
    jsProt1187 := factory1186.GetProtocol(mbTrans1184)
    argvalue2 := rpc.NewISource()
    err1188 := argvalue2.Read(context.Background(), jsProt1187)
    if err1188 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1189 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1189 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4a(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey4b":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AggregateByKey4b requires 4 args")
      flag.Usage()
    }
    arg1190 := flag.Arg(1)
    mbTrans1191 := thrift.NewTMemoryBufferLen(len(arg1190))
    defer mbTrans1191.Close()
    _, err1192 := mbTrans1191.WriteString(arg1190)
    if err1192 != nil {
      Usage()
      return
    }
    factory1193 := thrift.NewTJSONProtocolFactory()
    jsProt1194 := factory1193.GetProtocol(mbTrans1191)
    argvalue0 := driver.NewIDataFrameId()
    err1195 := argvalue0.Read(context.Background(), jsProt1194)
    if err1195 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1196 := flag.Arg(2)
    mbTrans1197 := thrift.NewTMemoryBufferLen(len(arg1196))
    defer mbTrans1197.Close()
    _, err1198 := mbTrans1197.WriteString(arg1196)
    if err1198 != nil {
      Usage()
      return
    }
    factory1199 := thrift.NewTJSONProtocolFactory()
    jsProt1200 := factory1199.GetProtocol(mbTrans1197)
    argvalue1 := rpc.NewISource()
    err1201 := argvalue1.Read(context.Background(), jsProt1200)
    if err1201 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1202 := flag.Arg(3)
    mbTrans1203 := thrift.NewTMemoryBufferLen(len(arg1202))
    defer mbTrans1203.Close()
    _, err1204 := mbTrans1203.WriteString(arg1202)
    if err1204 != nil {
      Usage()
      return
    }
    factory1205 := thrift.NewTJSONProtocolFactory()
    jsProt1206 := factory1205.GetProtocol(mbTrans1203)
    argvalue2 := rpc.NewISource()
    err1207 := argvalue2.Read(context.Background(), jsProt1206)
    if err1207 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1208 := flag.Arg(4)
    mbTrans1209 := thrift.NewTMemoryBufferLen(len(arg1208))
    defer mbTrans1209.Close()
    _, err1210 := mbTrans1209.WriteString(arg1208)
    if err1210 != nil {
      Usage()
      return
    }
    factory1211 := thrift.NewTJSONProtocolFactory()
    jsProt1212 := factory1211.GetProtocol(mbTrans1209)
    argvalue3 := rpc.NewISource()
    err1213 := argvalue3.Read(context.Background(), jsProt1212)
    if err1213 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AggregateByKey4b(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "aggregateByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AggregateByKey5 requires 5 args")
      flag.Usage()
    }
    arg1214 := flag.Arg(1)
    mbTrans1215 := thrift.NewTMemoryBufferLen(len(arg1214))
    defer mbTrans1215.Close()
    _, err1216 := mbTrans1215.WriteString(arg1214)
    if err1216 != nil {
      Usage()
      return
    }
    factory1217 := thrift.NewTJSONProtocolFactory()
    jsProt1218 := factory1217.GetProtocol(mbTrans1215)
    argvalue0 := driver.NewIDataFrameId()
    err1219 := argvalue0.Read(context.Background(), jsProt1218)
    if err1219 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1220 := flag.Arg(2)
    mbTrans1221 := thrift.NewTMemoryBufferLen(len(arg1220))
    defer mbTrans1221.Close()
    _, err1222 := mbTrans1221.WriteString(arg1220)
    if err1222 != nil {
      Usage()
      return
    }
    factory1223 := thrift.NewTJSONProtocolFactory()
    jsProt1224 := factory1223.GetProtocol(mbTrans1221)
    argvalue1 := rpc.NewISource()
    err1225 := argvalue1.Read(context.Background(), jsProt1224)
    if err1225 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1226 := flag.Arg(3)
    mbTrans1227 := thrift.NewTMemoryBufferLen(len(arg1226))
    defer mbTrans1227.Close()
    _, err1228 := mbTrans1227.WriteString(arg1226)
    if err1228 != nil {
      Usage()
      return
    }
    factory1229 := thrift.NewTJSONProtocolFactory()
    jsProt1230 := factory1229.GetProtocol(mbTrans1227)
    argvalue2 := rpc.NewISource()
    err1231 := argvalue2.Read(context.Background(), jsProt1230)
    if err1231 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1232 := flag.Arg(4)
    mbTrans1233 := thrift.NewTMemoryBufferLen(len(arg1232))
    defer mbTrans1233.Close()
    _, err1234 := mbTrans1233.WriteString(arg1232)
    if err1234 != nil {
      Usage()
      return
    }
    factory1235 := thrift.NewTJSONProtocolFactory()
    jsProt1236 := factory1235.GetProtocol(mbTrans1233)
    argvalue3 := rpc.NewISource()
    err1237 := argvalue3.Read(context.Background(), jsProt1236)
    if err1237 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err1238 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err1238 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AggregateByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "foldByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FoldByKey requires 4 args")
      flag.Usage()
    }
    arg1239 := flag.Arg(1)
    mbTrans1240 := thrift.NewTMemoryBufferLen(len(arg1239))
    defer mbTrans1240.Close()
    _, err1241 := mbTrans1240.WriteString(arg1239)
    if err1241 != nil {
      Usage()
      return
    }
    factory1242 := thrift.NewTJSONProtocolFactory()
    jsProt1243 := factory1242.GetProtocol(mbTrans1240)
    argvalue0 := driver.NewIDataFrameId()
    err1244 := argvalue0.Read(context.Background(), jsProt1243)
    if err1244 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1245 := flag.Arg(2)
    mbTrans1246 := thrift.NewTMemoryBufferLen(len(arg1245))
    defer mbTrans1246.Close()
    _, err1247 := mbTrans1246.WriteString(arg1245)
    if err1247 != nil {
      Usage()
      return
    }
    factory1248 := thrift.NewTJSONProtocolFactory()
    jsProt1249 := factory1248.GetProtocol(mbTrans1246)
    argvalue1 := rpc.NewISource()
    err1250 := argvalue1.Read(context.Background(), jsProt1249)
    if err1250 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1251 := flag.Arg(3)
    mbTrans1252 := thrift.NewTMemoryBufferLen(len(arg1251))
    defer mbTrans1252.Close()
    _, err1253 := mbTrans1252.WriteString(arg1251)
    if err1253 != nil {
      Usage()
      return
    }
    factory1254 := thrift.NewTJSONProtocolFactory()
    jsProt1255 := factory1254.GetProtocol(mbTrans1252)
    argvalue2 := rpc.NewISource()
    err1256 := argvalue2.Read(context.Background(), jsProt1255)
    if err1256 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.FoldByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "foldByKey5":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "FoldByKey5 requires 5 args")
      flag.Usage()
    }
    arg1258 := flag.Arg(1)
    mbTrans1259 := thrift.NewTMemoryBufferLen(len(arg1258))
    defer mbTrans1259.Close()
    _, err1260 := mbTrans1259.WriteString(arg1258)
    if err1260 != nil {
      Usage()
      return
    }
    factory1261 := thrift.NewTJSONProtocolFactory()
    jsProt1262 := factory1261.GetProtocol(mbTrans1259)
    argvalue0 := driver.NewIDataFrameId()
    err1263 := argvalue0.Read(context.Background(), jsProt1262)
    if err1263 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1264 := flag.Arg(2)
    mbTrans1265 := thrift.NewTMemoryBufferLen(len(arg1264))
    defer mbTrans1265.Close()
    _, err1266 := mbTrans1265.WriteString(arg1264)
    if err1266 != nil {
      Usage()
      return
    }
    factory1267 := thrift.NewTJSONProtocolFactory()
    jsProt1268 := factory1267.GetProtocol(mbTrans1265)
    argvalue1 := rpc.NewISource()
    err1269 := argvalue1.Read(context.Background(), jsProt1268)
    if err1269 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1270 := flag.Arg(3)
    mbTrans1271 := thrift.NewTMemoryBufferLen(len(arg1270))
    defer mbTrans1271.Close()
    _, err1272 := mbTrans1271.WriteString(arg1270)
    if err1272 != nil {
      Usage()
      return
    }
    factory1273 := thrift.NewTJSONProtocolFactory()
    jsProt1274 := factory1273.GetProtocol(mbTrans1271)
    argvalue2 := rpc.NewISource()
    err1275 := argvalue2.Read(context.Background(), jsProt1274)
    if err1275 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1276 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1276 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.FoldByKey5(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "sortByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SortByKey requires 2 args")
      flag.Usage()
    }
    arg1278 := flag.Arg(1)
    mbTrans1279 := thrift.NewTMemoryBufferLen(len(arg1278))
    defer mbTrans1279.Close()
    _, err1280 := mbTrans1279.WriteString(arg1278)
    if err1280 != nil {
      Usage()
      return
    }
    factory1281 := thrift.NewTJSONProtocolFactory()
    jsProt1282 := factory1281.GetProtocol(mbTrans1279)
    argvalue0 := driver.NewIDataFrameId()
    err1283 := argvalue0.Read(context.Background(), jsProt1282)
    if err1283 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SortByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sortByKey3a":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3a requires 3 args")
      flag.Usage()
    }
    arg1285 := flag.Arg(1)
    mbTrans1286 := thrift.NewTMemoryBufferLen(len(arg1285))
    defer mbTrans1286.Close()
    _, err1287 := mbTrans1286.WriteString(arg1285)
    if err1287 != nil {
      Usage()
      return
    }
    factory1288 := thrift.NewTJSONProtocolFactory()
    jsProt1289 := factory1288.GetProtocol(mbTrans1286)
    argvalue0 := driver.NewIDataFrameId()
    err1290 := argvalue0.Read(context.Background(), jsProt1289)
    if err1290 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2, err1292 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1292 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SortByKey3a(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey3b":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SortByKey3b requires 3 args")
      flag.Usage()
    }
    arg1293 := flag.Arg(1)
    mbTrans1294 := thrift.NewTMemoryBufferLen(len(arg1293))
    defer mbTrans1294.Close()
    _, err1295 := mbTrans1294.WriteString(arg1293)
    if err1295 != nil {
      Usage()
      return
    }
    factory1296 := thrift.NewTJSONProtocolFactory()
    jsProt1297 := factory1296.GetProtocol(mbTrans1294)
    argvalue0 := driver.NewIDataFrameId()
    err1298 := argvalue0.Read(context.Background(), jsProt1297)
    if err1298 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1299 := flag.Arg(2)
    mbTrans1300 := thrift.NewTMemoryBufferLen(len(arg1299))
    defer mbTrans1300.Close()
    _, err1301 := mbTrans1300.WriteString(arg1299)
    if err1301 != nil {
      Usage()
      return
    }
    factory1302 := thrift.NewTJSONProtocolFactory()
    jsProt1303 := factory1302.GetProtocol(mbTrans1300)
    argvalue1 := rpc.NewISource()
    err1304 := argvalue1.Read(context.Background(), jsProt1303)
    if err1304 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SortByKey3b(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sortByKey4":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SortByKey4 requires 4 args")
      flag.Usage()
    }
    arg1306 := flag.Arg(1)
    mbTrans1307 := thrift.NewTMemoryBufferLen(len(arg1306))
    defer mbTrans1307.Close()
    _, err1308 := mbTrans1307.WriteString(arg1306)
    if err1308 != nil {
      Usage()
      return
    }
    factory1309 := thrift.NewTJSONProtocolFactory()
    jsProt1310 := factory1309.GetProtocol(mbTrans1307)
    argvalue0 := driver.NewIDataFrameId()
    err1311 := argvalue0.Read(context.Background(), jsProt1310)
    if err1311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1312 := flag.Arg(2)
    mbTrans1313 := thrift.NewTMemoryBufferLen(len(arg1312))
    defer mbTrans1313.Close()
    _, err1314 := mbTrans1313.WriteString(arg1312)
    if err1314 != nil {
      Usage()
      return
    }
    factory1315 := thrift.NewTJSONProtocolFactory()
    jsProt1316 := factory1315.GetProtocol(mbTrans1313)
    argvalue1 := rpc.NewISource()
    err1317 := argvalue1.Read(context.Background(), jsProt1316)
    if err1317 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3, err1319 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1319 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SortByKey4(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "keys":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Keys requires 2 args")
      flag.Usage()
    }
    arg1320 := flag.Arg(1)
    mbTrans1321 := thrift.NewTMemoryBufferLen(len(arg1320))
    defer mbTrans1321.Close()
    _, err1322 := mbTrans1321.WriteString(arg1320)
    if err1322 != nil {
      Usage()
      return
    }
    factory1323 := thrift.NewTJSONProtocolFactory()
    jsProt1324 := factory1323.GetProtocol(mbTrans1321)
    argvalue0 := driver.NewIDataFrameId()
    err1325 := argvalue0.Read(context.Background(), jsProt1324)
    if err1325 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1326 := flag.Arg(2)
    mbTrans1327 := thrift.NewTMemoryBufferLen(len(arg1326))
    defer mbTrans1327.Close()
    _, err1328 := mbTrans1327.WriteString(arg1326)
    if err1328 != nil {
      Usage()
      return
    }
    factory1329 := thrift.NewTJSONProtocolFactory()
    jsProt1330 := factory1329.GetProtocol(mbTrans1327)
    argvalue1 := rpc.NewISource()
    err1331 := argvalue1.Read(context.Background(), jsProt1330)
    if err1331 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Keys(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "values":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Values requires 2 args")
      flag.Usage()
    }
    arg1332 := flag.Arg(1)
    mbTrans1333 := thrift.NewTMemoryBufferLen(len(arg1332))
    defer mbTrans1333.Close()
    _, err1334 := mbTrans1333.WriteString(arg1332)
    if err1334 != nil {
      Usage()
      return
    }
    factory1335 := thrift.NewTJSONProtocolFactory()
    jsProt1336 := factory1335.GetProtocol(mbTrans1333)
    argvalue0 := driver.NewIDataFrameId()
    err1337 := argvalue0.Read(context.Background(), jsProt1336)
    if err1337 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1338 := flag.Arg(2)
    mbTrans1339 := thrift.NewTMemoryBufferLen(len(arg1338))
    defer mbTrans1339.Close()
    _, err1340 := mbTrans1339.WriteString(arg1338)
    if err1340 != nil {
      Usage()
      return
    }
    factory1341 := thrift.NewTJSONProtocolFactory()
    jsProt1342 := factory1341.GetProtocol(mbTrans1339)
    argvalue1 := rpc.NewISource()
    err1343 := argvalue1.Read(context.Background(), jsProt1342)
    if err1343 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Values(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sampleByKey":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SampleByKey requires 4 args")
      flag.Usage()
    }
    arg1344 := flag.Arg(1)
    mbTrans1345 := thrift.NewTMemoryBufferLen(len(arg1344))
    defer mbTrans1345.Close()
    _, err1346 := mbTrans1345.WriteString(arg1344)
    if err1346 != nil {
      Usage()
      return
    }
    factory1347 := thrift.NewTJSONProtocolFactory()
    jsProt1348 := factory1347.GetProtocol(mbTrans1345)
    argvalue0 := driver.NewIDataFrameId()
    err1349 := argvalue0.Read(context.Background(), jsProt1348)
    if err1349 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    arg1351 := flag.Arg(3)
    mbTrans1352 := thrift.NewTMemoryBufferLen(len(arg1351))
    defer mbTrans1352.Close()
    _, err1353 := mbTrans1352.WriteString(arg1351)
    if err1353 != nil {
      Usage()
      return
    }
    factory1354 := thrift.NewTJSONProtocolFactory()
    jsProt1355 := factory1354.GetProtocol(mbTrans1352)
    argvalue2 := rpc.NewISource()
    err1356 := argvalue2.Read(context.Background(), jsProt1355)
    if err1356 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err1357 := (strconv.Atoi(flag.Arg(4)))
    if err1357 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SampleByKey(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "countByKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByKey requires 2 args")
      flag.Usage()
    }
    arg1358 := flag.Arg(1)
    mbTrans1359 := thrift.NewTMemoryBufferLen(len(arg1358))
    defer mbTrans1359.Close()
    _, err1360 := mbTrans1359.WriteString(arg1358)
    if err1360 != nil {
      Usage()
      return
    }
    factory1361 := thrift.NewTJSONProtocolFactory()
    jsProt1362 := factory1361.GetProtocol(mbTrans1359)
    argvalue0 := driver.NewIDataFrameId()
    err1363 := argvalue0.Read(context.Background(), jsProt1362)
    if err1363 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1364 := flag.Arg(2)
    mbTrans1365 := thrift.NewTMemoryBufferLen(len(arg1364))
    defer mbTrans1365.Close()
    _, err1366 := mbTrans1365.WriteString(arg1364)
    if err1366 != nil {
      Usage()
      return
    }
    factory1367 := thrift.NewTJSONProtocolFactory()
    jsProt1368 := factory1367.GetProtocol(mbTrans1365)
    argvalue1 := rpc.NewISource()
    err1369 := argvalue1.Read(context.Background(), jsProt1368)
    if err1369 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "countByValue":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CountByValue requires 2 args")
      flag.Usage()
    }
    arg1370 := flag.Arg(1)
    mbTrans1371 := thrift.NewTMemoryBufferLen(len(arg1370))
    defer mbTrans1371.Close()
    _, err1372 := mbTrans1371.WriteString(arg1370)
    if err1372 != nil {
      Usage()
      return
    }
    factory1373 := thrift.NewTJSONProtocolFactory()
    jsProt1374 := factory1373.GetProtocol(mbTrans1371)
    argvalue0 := driver.NewIDataFrameId()
    err1375 := argvalue0.Read(context.Background(), jsProt1374)
    if err1375 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1376 := flag.Arg(2)
    mbTrans1377 := thrift.NewTMemoryBufferLen(len(arg1376))
    defer mbTrans1377.Close()
    _, err1378 := mbTrans1377.WriteString(arg1376)
    if err1378 != nil {
      Usage()
      return
    }
    factory1379 := thrift.NewTJSONProtocolFactory()
    jsProt1380 := factory1379.GetProtocol(mbTrans1377)
    argvalue1 := rpc.NewISource()
    err1381 := argvalue1.Read(context.Background(), jsProt1380)
    if err1381 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CountByValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
