// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package driver

import(
	"bytes"
	"context"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type IBackendService interface {
  Stop(ctx context.Context) (_err error)
}

type IBackendServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewIBackendServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IBackendServiceClient {
  return &IBackendServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIBackendServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IBackendServiceClient {
  return &IBackendServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIBackendServiceClient(c thrift.TClient) *IBackendServiceClient {
  return &IBackendServiceClient{
    c: c,
  }
}

func (p *IBackendServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *IBackendServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *IBackendServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

func (p *IBackendServiceClient) Stop(ctx context.Context) (_err error) {
  var _args0 IBackendServiceStopArgs
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "stop", &_args0, nil); err != nil {
    return err
  }
  return nil
}

type IBackendServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IBackendService
}

func (p *IBackendServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IBackendServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IBackendServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIBackendServiceProcessor(handler IBackendService) *IBackendServiceProcessor {

  self1 := &IBackendServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self1.processorMap["stop"] = &iBackendServiceProcessorStop{handler:handler}
return self1
}

func (p *IBackendServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x2 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x2.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x2

}

type iBackendServiceProcessorStop struct {
  handler IBackendService
}

func (p *iBackendServiceProcessorStop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IBackendServiceStopArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 = p.handler.Stop(ctx); err2 != nil {
    tickerCancel()
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type IBackendServiceStopArgs struct {
}

func NewIBackendServiceStopArgs() *IBackendServiceStopArgs {
  return &IBackendServiceStopArgs{}
}

func (p *IBackendServiceStopArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IBackendServiceStopArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "stop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IBackendServiceStopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IBackendServiceStopArgs(%+v)", *p)
}


